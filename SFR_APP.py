#KAID BELKACEM SFR
encoding = 'utf-8' #ENCODAGE
from Tkinter import *  # POUR L'interface graphique
import tkFileDialog  # POUR l'ouverture des fichiers fenetre de dialogue
import csv #Lecture des fichiers CSV
import ttk #Dependance a Tkinter
import re  # Expression reguliere
import tkMessageBox  # POUR un messageboxe pour quitter le programme
import numpy as np #Manipulation de matrices
from threading import Thread #Multithread
import pygal #Graphes interactifs
import datetime #Reconnaisance du format Heure Date
import matplotlib.pyplot as plt #Generation de graphes
from PyQt4 import QtGui #Interface graphique secondaire
from matplotlib.backends.backend_qt4agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.backends.backend_qt4agg import NavigationToolbar2QT as NavigationToolbar
from matplotlib.ticker import MultipleLocator, FormatStrFormatter
from matplotlib import cm
from matplotlib.gridspec import GridSpec
import matplotlib.dates as mdates
import os #Chemin des fichiers CSV

#Fichiers de configuration Python
def include_files():
    path_base = "C:\\Python27\\Lib\\site-packages\\pytz\\zoneinfo\\"
    skip_count = len(path_base)
    zip_includes = [(path_base, "pytz/zoneinfo/")]
    for root, sub_folders, files in os.walk(path_base):
        for file_in_root in files:
            zip_includes.append(
                ("{}".format(os.path.join(root, file_in_root)),
                 "{}".format(os.path.join("pytz/zoneinfo", root[skip_count:], file_in_root))
                 )
            )
    return zip_includes
include_files()

def voix():
    fenetre = Tk()

    def check_error():
        window = Tk()
        err = []

        csvfile = ouvrir_fich()
        outputfile = open('workfile.csv', 'w')
        a = 0
        b = 0

        reader = csv.reader(csvfile)

        verif = re.compile(r"\(.+\)\,\(.+\),([0-8])"
                           , re.IGNORECASE)
        g = 0
        for row in reader:
            a = verif.match(row[161])
            if a:
                if (a.group(1) == '1'):
                    outputfile.write(
                        row[0] + '                 ' + row[161] + '      Drop a cause de: Coverage lost \n')
                    err.append(row[0] + '       ' + row[215] + '    ETAT: Drop a cause de: Coverage lost \n')
                    continue
                if (a.group(1) == '2'):
                    outputfile.write(
                        row[0] + '                 ' + row[161] + '       Drop a cause de: Multi-RAB testing \n')
                    err.append(row[0] + '       ' + row[215] + '    ETAT: Drop a cause de: Multi-RAB testing \n')
                    continue
                if (a.group(1) == '3'):
                    outputfile.write(row[0] + '                 ' + row[161] + ' ---> Drop a cause de: Low coverage \n')
                    err.append(row[0] + '       ' + row[215] + '    ETAT: Drop a cause de: Low coverage \n')
                    continue
                if (a.group(1) == '4'):
                    outputfile.write(
                        row[0] + '                 ' + row[161] + ' ---> Drop a cause de: User behaviour \n')
                    err.append(row[0] + '       ' + row[215] + '    ETAT: Drop a cause de: User behaviour \n')
                    continue
                if (a.group(1) == '5'):
                    outputfile.write(row[0] + '                 ' + row[
                        161] + ' ---> Drop a cause de: Call Attempt Failure notified by OS \n')
                    err.append(row[0] + '       ' + row[
                        215] + '    ETAT: Drop a cause de: Call Attempt Failure notified by OS \n')
                    continue
                if (a.group(1) == '6'):
                    outputfile.write(row[0] + '                 ' + row[
                        161] + ' ---> Drop a cause de: 4G calls without 2G-3G fallback \n')
                    err.append(
                        row[0] + '       ' + row[215] + '    ETAT: Drop a cause de: 4G calls without 2G-3G fallback \n')
                    continue
                if (a.group(1) == '7'):
                    outputfile.write(row[0] + '                 ' + row[
                        161] + ' ---> Drop a cause de: Estimated time to qualify call as CAF \n')
                    err.append(row[0] + '       ' + row[
                        215] + '    ETAT: Drop a cause de: Estimated time to qualify call as CAF \n')
                    continue
                if (a.group(1) == '8'):
                    outputfile.write(row[0] + '                 ' + row[
                        161] + ' ---> Drop a cause de: Force 2G for unknown bearer calls \n')
                    err.append(row[0] + '       ' + row[
                        215] + '    ETAT: Drop a cause de: Force 2G for unknown bearer calls \n')
                    continue
            outputfile.write(row[0] + '                 ' + row[161] + '***** ETAT: ' + row[209] + ' \n')

            err.append(row[0] + '       ' + row[215] + '    ETAT: ' + row[209] + ' \n')

        # Affichage erreurs dans interface
        scrollbar = Scrollbar(window)
        textfield = Text(window, yscrollcommand=scrollbar.set)
        scrollbar.config(command=textfield.yview)
        scrollbar.pack(side='right', fill='y')
        textfield.pack(side='left', expand=5, fill='both')
        window.geometry("1300x700+60+0")
        for i in err:
            textfield.insert(2.0, i)
        window.title("RESULTS")


    def incom_outgo_etats():


        choix.geometry("700x360+20+50")

        #plt.suptitle('DASHBOARD KPIs VOIX', fontsize=18, bbox={'facecolor': 'white', 'pad': 5})

        class lefichier():
            global csvfile
            csvfile = ouvrir_fich()
            fichier = csvfile
            # print(a) #OUVERTURE FICHIER UNE SEULE FOIS

        # print(str(lefichier.fichier))
        # ___________________________**********************DEBUT********************************____________________________#
        # ------------------------------------------------------------------------------------------------------------------#

        # ------------------------------------------------------------------------------------------------------------------#
        # ___________________________**********************FIN********************************____________________________#



        def exec_voix(event, scenario):
            # print(lefichier.fichier)
            def lancer(val1, val2, val3, tech, val5, departement, file):

                tout = ['2G', 'EDGE', 'GPRS', '3G', 'UMTS', 'Dual Carrier', 'HSUPA', 'HSPA', 'HSPA+', 'HSDPA', '4G','LTE', 'LTE-A', 'WIFI', 'N/A', 'UNKNOWN', 'GSM (2G-3G-4G)']
                LA2G = ['2G', 'EDGE', 'GPRS']
                LA3G = ['3G', 'UMTS', 'Dual Carrier', 'HSUPA', 'HSPA', 'HSPA+', 'HSDPA']
                LA4G = ['4G', 'LTE', 'LTE-A']
                LAWIFI = ['WIFI']
                LINCONNU = ['N/A', 'UNKNOWN']

                # print(departement)
                if '2G' in tech:
                    for elem2 in LA2G:
                        tech.append(elem2)
                if '3G' in tech:
                    for elem3 in LA3G:
                        tech.append(elem3)
                if '4G' in tech:
                    for elem4 in LA4G:
                        tech.append(elem4)
                if 'WIFI' in tech:
                    for elem5 in LAWIFI:
                        tech.append(elem5)
                if 'INCONNU' in tech:
                    for elem6 in LINCONNU:
                        tech.append(elem6)
                if 'ALL' in tech:
                    for elem in tout:
                        tech.append(elem)
                print("________________PLEASE WAIT____________________")
                if departement in 'TOUT DPTs':

                    # (val1, val2, val3, tech, val5, departement, file)
                    def taux_inc_out_sans_filtre_dpt(fichier_voix, val1, val2, val3, tech, val5, departement):


                        import datetime


                        # format_date_generale = "%Y-%m-%d"
                        date_debut = datetime.datetime.strptime(val1, "%Y-%m-%d")
                        date_fin = datetime.datetime.strptime(val2, "%Y-%m-%d")

                        fichier_voix = fichier_voix
                        #print(fichier_voix)
                        csv_opner_result = re.compile(r".*u\'(.*\:.*)\'\, .*", re.IGNORECASE)
                        fichier_voix = csv_opner_result.search(str(fichier_voix))
                        fichier_voix=fichier_voix.group(1)
                        #print(fichier_voix)
                        date = []
                        csvfile = open(fichier_voix, 'r')
                        # reader = csv.reader(csvfile, delimiter=';')
                        # reader = csv.reader(csvfile, delimiter=';')
                        reader = csv.reader(csvfile)

                        # VARIABLES ET LISTES QUI VONT AIDER AU CALCUL DES TAUX
                        nb_etat = 0.0
                        nb_succes_voix = 0.0
                        nb_drop_voix = 0.0
                        nb_failure_voix = 0.0

                        taux_succes_voix = 0.0
                        taux_drop_voix = 0.0
                        taux_failure_voix = 0.0

                        for row in reader:
                            dqaid_row = row[0]
                            f = row[1][0:10]
                            row_volte = row[59]
                            cs = row[204]
                            tecc = row[215]
                            a = row[167]  # CAUSE CODE
                            if f == 'date_utc_a':
                                continue

                            datef = datetime.datetime.strptime(f, "%Y-%m-%d")
                            if datef > date_fin:
                                continue
                            if datef < date_debut:
                                break

                            row[221] = '_'.join(row[221].split(" "))

                            # A FAIRE LES IF DATES

                            if (str(row[213]) != 'SFR' and row[213] != 'N/A'):
                                continue
                            if str(row[221]) in val3 and row[220] in val5 and tecc in tech:
                                if str(row[218]) == 'Drop':
                                    nb_drop_voix = nb_drop_voix + 1
                                    nb_etat = nb_etat + 1

                                if str(row[218]) == 'Failure' or str(row[218]) == 'CAF':
                                    nb_failure_voix = nb_failure_voix + 1
                                    nb_etat = nb_etat + 1
                                if row[218] == 'Connected' or row[218] == 'Success' or row[218] == 'Not connected':
                                    nb_succes_voix = nb_succes_voix + 1
                                    nb_etat = nb_etat + 1

                        if nb_etat > 0:
                            taux_succes_voix = (nb_succes_voix * 100.0) / nb_etat
                            taux_drop_voix = (nb_drop_voix * 100.0) / nb_etat
                            taux_failure_voix = (nb_failure_voix * 100.0) / nb_etat

                        # ________________________________________________--___**_ ETATS_INCOMING_OUTGOING_voix _**___--___________________________________________________
                        # _____________________***PARAMS***________________________________________
                        # plt.subplot2grid((9, 5), (4, 0), rowspan=3)

                        fig = plt.figure(facecolor='white')
                        colors = ['forestgreen', 'grey', 'red']
                        legende = [('Succes: ' + str(round(taux_succes_voix, 3)) + '%'),
                                   ('Coup: ' + str(round(taux_drop_voix, 3)) + '%'),
                                   ('Echc: ' + str(round(taux_failure_voix, 3)) + '%')]
                        fracs = [taux_succes_voix, taux_drop_voix, taux_failure_voix]
                        # GRAPHIC
                        plt.pie(fracs, shadow=True, startangle=90, colors=(colors))
                        plt.legend(legende, loc="best", fontsize=20, fancybox=True).get_frame().set_alpha(0.5)
                        plt.title('APPELS ENTRANTS ET SORTANTS DU '+str(val1)+'AU'+str(val2)+' TOUT DPTs')
                        plt.show()
                        # ________________________________________________--___**_ FIN_ETATS_INCOMING_voix _**___--___________________________________________________

                    taux_inc_out_sans_filtre_dpt(file, val1, val2, val3, tech, val5, departement)

                else:
                    def taux_inc_out_avec_filtre_dpt(fichier_voix, val1, val2, val3, tech, val5, departement):


                        import datetime


                        # format_date_generale = "%Y-%m-%d"
                        date_debut = datetime.datetime.strptime(val1, "%Y-%m-%d")
                        date_fin = datetime.datetime.strptime(val2, "%Y-%m-%d")

                        fichier_voix = fichier_voix
                        #print(fichier_voix)
                        csv_opner_result = re.compile(r".*u\'(.*\:.*)\'\, .*", re.IGNORECASE)
                        fichier_voix = csv_opner_result.search(str(fichier_voix))
                        fichier_voix=fichier_voix.group(1)
                        #print(fichier_voix)
                        date = []
                        csvfile = open(fichier_voix, 'r')
                        # reader = csv.reader(csvfile, delimiter=';')
                        # reader = csv.reader(csvfile, delimiter=';')
                        reader = csv.reader(csvfile)




                        #________________________________DEPARTEMENTS__________________________________
                        ci_lac_eci_tac = []

                        # FICHIER G2R
                        csv_opner_result_g2r = re.compile(r".*'(.*:.*\/).*\.csv'\, .*", re.IGNORECASE)
                        fichier_g2r = csv_opner_result_g2r.search(str(csvfile))
                        fichier_g2r = str(fichier_g2r.group(1)) + 'g2r.csv'
                        fichier_g2r = open(fichier_g2r, 'r')
                        fichier_g2r_reader = csv.reader(fichier_g2r, delimiter=';')
                        # print('ON EST DANS LA DATA '+departement)
                        departement_code_postal = {'1': 'Ain', '2': 'Aisne', '3': 'Allier',
                                                   '4': 'Alpes_de_Haute-Provence', '5': 'Hautes-Alpes',
                                                   '6': 'Alpes-Maritimes', '7': 'Ardeche', '8': 'Ardennes',
                                                   '9': 'Ariege', '10': 'Aube', '11': 'Aude', '12': 'Aveyron',
                                                   '13': 'Bouches_du_Rhone', '14': 'Calvados', '15': 'Cantal',
                                                   '16': 'Charente', '17': 'Charente_Maritime', '18': 'Cher',
                                                   '19': 'Correze', '21': 'Cote_dOr', '22': 'Cotes_dArmor',
                                                   '23': 'Creuse', '24': 'Dordogne', '25': 'Doubs', '26': 'Drome',
                                                   '27': 'Eure', '28': 'Eure-et-Loir', '29': 'Finistere',
                                                   '30': 'Gard',
                                                   '31': 'Haute-Garonne', '32': 'Gers', '33': 'Gironde',
                                                   '34': 'Herault', '35': 'Ille-et-Vilaine', '36': 'Indre',
                                                   '37': 'Indre-et-Loire', '38': 'Isere', '39': 'Jura',
                                                   '40': 'Landes',
                                                   '41': 'Loir-et-Cher', '42': 'Loire', '43': 'Haute-Loire',
                                                   '44': 'Loire-Atlantique', '45': 'Loiret', '46': 'Lot',
                                                   '47': 'Lot-et-Garonne', '48': 'Lozere', '49': 'Maine-et-Loire',
                                                   '50': 'Manche', '51': 'Marne', '52': 'Haute-Marne',
                                                   '53': 'Mayenne',
                                                   '54': 'Meurthe-et-Moselle', '55': 'Meuse', '56': 'Morbihan',
                                                   '57': 'Moselle', '58': 'Nievre', '59': 'Nord', '60': 'Oise',
                                                   '61': 'Orne', '62': 'Pas-de-Calais', '63': 'Puy-de-Dome',
                                                   '64': 'Pyrenees-Atlantiques', '65': 'Hautes-Pyrenees',
                                                   '66': 'Pyrenees-Orientales', '67': 'Bas-Rhin', '68': 'Haut-Rhin',
                                                   '69': 'Rhone', '70': 'Haute-Saone', '71': 'Saone-et-Loire',
                                                   '72': 'Sarthe', '73': 'Savoie', '74': 'Haute-Savoie',
                                                   '75': 'Paris',
                                                   '76': 'Seine-Maritime', '77': 'Seine-et-Marne', '78': 'Yvelines',
                                                   '79': 'Deux-Sevres', '80': 'Somme', '81': 'Tarn',
                                                   '82': 'Tarn-et-Garonne', '83': 'Var', '84': 'Vaucluse',
                                                   '85': 'Vendee', '86': 'Vienne', '87': 'Haute-Vienne',
                                                   '88': 'Vosges',
                                                   '89': 'Yonne', '90': 'Territoire-de-Belfort', '91': 'Essonne',
                                                   '92': 'Hauts-de-Seine', '93': 'Seine-St-Denis',
                                                   '94': 'Val-de-Marne',
                                                   '95': 'Val-dOise', '2A': 'Corse_du_Sud', '2B': 'Haute-Corse'}

                        g2r_code_postal = ''
                        departement_eci_tac_ci_lac = ''
                        fichier_ci_lac_decriture = open("Departement_CI_Lac_eCI_Tac.txt", "w")

                        # fichier_ci_lac_decriture.write()
                        fichier_ci_lac_decriture.write(
                            "\n______________________________________________________________________________________________")
                        fichier_ci_lac_decriture.write(
                            "\n\n\n         VOICI LA LISTE DES DEPARTEMENT ET LEUR CORRESPONDANCE EN CI-LAC/eCI-TAC \n\n\n")
                        fichier_ci_lac_decriture.write(
                            "______________________________________________________________________________________________\n\n\n")

                        file.close()
                        ci_lac_eci_tac_intermediaire = []
                        ci_lac_eci_tac_intermediaire_var = ''
                        for row in fichier_g2r_reader:
                            ci = row[21]
                            lac = row[22]
                            num_g2r = row[18]
                            region = row[34]
                            eci = row[38]
                            tac = row[40]

                            if eci:
                                if len(num_g2r) == 5:
                                    g2r_code_postal = num_g2r[:1]
                                    if g2r_code_postal in departement_code_postal:
                                        departement_eci_tac_ci_lac = departement_code_postal[
                                                                         g2r_code_postal] + ' ' + eci + '-' + tac
                                        ci_lac_eci_tac.append(departement_eci_tac_ci_lac)
                                        fichier_ci_lac_decriture.write('\n\n')
                                        fichier_ci_lac_decriture.write(departement_eci_tac_ci_lac)
                                        if str(departement_code_postal[g2r_code_postal]) in str(departement):
                                            ci_lac_eci_tac_intermediaire.append(
                                                departement_code_postal[g2r_code_postal] + ' ' + eci + '-' + tac)

                                if len(num_g2r) == 6:
                                    g2r_code_postal = num_g2r[:2]
                                    if g2r_code_postal in departement_code_postal:
                                        departement_eci_tac_ci_lac = departement_code_postal[
                                                                         g2r_code_postal] + ' ' + eci + '-' + tac
                                        ci_lac_eci_tac.append(departement_eci_tac_ci_lac)
                                        fichier_ci_lac_decriture.write('\n\n')
                                        fichier_ci_lac_decriture.write(departement_eci_tac_ci_lac)

                                        if str(departement_code_postal[g2r_code_postal]) in str(departement):
                                            ci_lac_eci_tac_intermediaire.append(
                                                departement_code_postal[g2r_code_postal] + ' ' + eci + '-' + tac)

                            else:
                                if ci:
                                    if len(num_g2r) == 5:
                                        g2r_code_postal = num_g2r[:1]

                                        if g2r_code_postal in departement_code_postal:
                                            departement_eci_tac_ci_lac = departement_code_postal[
                                                                             g2r_code_postal] + ' ' + ci + '-' + lac
                                            ci_lac_eci_tac.append(departement_eci_tac_ci_lac)
                                            fichier_ci_lac_decriture.write('\n\n')
                                            fichier_ci_lac_decriture.write(departement_eci_tac_ci_lac)
                                            if str(departement_code_postal[g2r_code_postal]) in str(departement):
                                                ci_lac_eci_tac_intermediaire.append(departement_code_postal[
                                                                                        g2r_code_postal] + ' ' + eci + '-' + tac)

                                    if len(num_g2r) == 6:
                                        g2r_code_postal = num_g2r[:2]
                                        if g2r_code_postal in departement_code_postal:
                                            departement_eci_tac_ci_lac = departement_code_postal[
                                                                             g2r_code_postal] + ' ' + ci + '-' + lac
                                            ci_lac_eci_tac.append(departement_eci_tac_ci_lac)
                                            fichier_ci_lac_decriture.write('\n\n')
                                            fichier_ci_lac_decriture.write(departement_eci_tac_ci_lac)
                                            # print(departement_code_postal[g2r_code_postal] +' ET VOICI TON DPT:  ' +departement)
                                            # print(departement_code_postal[g2r_code_postal]+' et ton dpt: '+departement)
                                            # if (departement_code_postal[g2r_code_postal]=='Paris'):
                                            # print(departement_code_postal[g2r_code_postal])
                                            # if (departement_code_postal[g2r_code_postal]==' Paris'):
                                            # print(departement_code_postal[g2r_code_postal]+' *')
                                            # if (departement_code_postal[g2r_code_postal]=='Paris '):
                                            # print(departement_code_postal[g2r_code_postal]+' **')
                                            # if (departement_code_postal[g2r_code_postal]==' Paris '):
                                            # print(departement_code_postal[g2r_code_postal]+' * *')
                                            # if (departement_code_postal[g2r_code_postal] in 'Paris'):
                                            # print(departement_code_postal[g2r_code_postal]+'   IN  ')
                                            # print(str(departement_code_postal[g2r_code_postal] in departement)+'  -->  '+departement_code_postal[g2r_code_postal]+' IN '+departement)
                                            if departement_code_postal[g2r_code_postal] in departement:
                                                ci_lac_eci_tac_intermediaire_var = departement_code_postal[
                                                                                       g2r_code_postal] + ' ' + eci + '-' + tac
                                                ci_lac_eci_tac_intermediaire.append(
                                                    ci_lac_eci_tac_intermediaire_var)

                                                # print(departement)

                                                # for elem in ci_lac_eci_tac:
                                                # fichier_ci_lac_decriture.write('\n\n')
                                                # fichier_ci_lac_decriture.write(elem)
                        fichier_ci_lac_decriture.close()

                        # VARIABLES ET LISTES QUI VONT AIDER AU CALCUL DES TAUX
                        nb_etat = 0.0
                        nb_succes_voix = 0.0
                        nb_drop_voix = 0.0
                        nb_failure_voix = 0.0

                        taux_succes_voix = 0.0
                        taux_drop_voix = 0.0
                        taux_failure_voix = 0.0

                        for row in reader:
                            dqaid_row = row[0]
                            f = row[1][0:10]
                            ci_voix = row[42]
                            lac_voix = row[43]
                            row_volte = row[59]
                            cs = row[204]
                            tecc = row[215]
                            a = row[167]  # CAUSE CODE
                            if f == 'date_utc_a':
                                continue

                            datef = datetime.datetime.strptime(f, "%Y-%m-%d")
                            if datef > date_fin:
                                continue
                            if datef < date_debut:
                                break

                            row[221] = '_'.join(row[221].split(" "))

                            # A FAIRE LES IF DATES

                            if (departement + ' ' + ci_voix + '-' + lac_voix) not in ci_lac_eci_tac_intermediaire:
                                continue
                            if (str(row[213]) != 'SFR' and row[213] != 'N/A'):
                                continue
                            if str(row[221]) in val3 and row[220] in val5 and tecc in tech:
                                if str(row[218]) == 'Drop':
                                    nb_drop_voix = nb_drop_voix + 1
                                    nb_etat = nb_etat + 1

                                if str(row[218]) == 'Failure' or str(row[218]) == 'CAF':
                                    nb_failure_voix = nb_failure_voix + 1
                                    nb_etat = nb_etat + 1
                                if row[218] == 'Connected' or row[218] == 'Success' or row[218] == 'Not connected':
                                    nb_succes_voix = nb_succes_voix + 1
                                    nb_etat = nb_etat + 1

                        if nb_etat > 0:
                            taux_succes_voix = (nb_succes_voix * 100.0) / nb_etat
                            taux_drop_voix = (nb_drop_voix * 100.0) / nb_etat
                            taux_failure_voix = (nb_failure_voix * 100.0) / nb_etat

                        # ________________________________________________--___**_ ETATS_INCOMING_OUTGOING_voix _**___--___________________________________________________
                        # _____________________***PARAMS***________________________________________
                        # plt.subplot2grid((9, 5), (4, 0), rowspan=3)

                        fig = plt.figure(facecolor='white')
                        colors = ['forestgreen', 'grey', 'red']
                        legende = [('Succes: ' + str(round(taux_succes_voix, 3)) + '%'),
                                   ('Coup: ' + str(round(taux_drop_voix, 3)) + '%'),
                                   ('Echc: ' + str(round(taux_failure_voix, 3)) + '%')]
                        fracs = [taux_succes_voix, taux_drop_voix, taux_failure_voix]
                        # GRAPHIC
                        plt.pie(fracs, shadow=True, startangle=90, colors=(colors))
                        plt.legend(legende, loc="best", fontsize=20, fancybox=True).get_frame().set_alpha(0.5)
                        plt.title('APPELS ENTRANTS ET SORTANTS DU '+str(val1)+'AU'+str(val2)+' DPT: '+departement)
                        plt.show()
                        # ________________________________________________--___**_ FIN_ETATS_INCOMING_voix _**___--___________________________________________________

                    taux_inc_out_avec_filtre_dpt(file, val1, val2, val3, tech, val5, departement)

            # __________________________________---Choix date---________________________________________-------___________________________________
            global value1  # DATE DEPART
            value1 = combo.get()
            # print("value 1:  "+value1)

            global value2  # DATE ARRIVEE
            value2 = combo2.get()

            global val5  # OS
            val5 = combo3.get()

            global departement
            departement = combo4.get()
            # print(value1)
            # print(value2)
            # print(val5)
            # print(departement)

            # print("value 3:  " + value3)
            if val5 == 'ALL':
                val5 = ['iOS', 'Android', 'Unknown', '']
            if val5 == 'Android':
                val5 = ['Android']
            if val5 == 'iOS':
                val5 = ['iOS']
            if val5 == 'AUTRES':
                val5 = ['']
            if val5 == 'Unknown':
                val5 = ['Unknown']

            if value1 and value2 and val5 and departement:

                # print("JE SUIS RENTREEEEEEE")
                global csvfile
                # csvfile = ouvrir_fich()
                # csvfile=lefichier.fichier
                # -------------------------------------------------------------------------------DEBUT--------------------------------------------------------------------------------
                # __________________________________--------------************--------------EX FONCTION SELECT-------------------*****************-----------___________________________
                # -------------------------------------------------------------------------------DEBUT--------------------------------------------------------------------------------

                import tkinter as tk
                # try:
                # import Tix as tix  # Python27
                # except ImportError:
                # import tkinter.tix as tix  # Python31+

                # choix1.geometry("+50+150")
                # choix.geometry("500x600+20+50")
                s = ttk.Style()
                global frame2
                techno_ = []
                techno_.append('ALL')
                techno_.append('2G')
                techno_.append('3G')
                techno_.append('4G')
                techno_.append('WIFI')
                techno_.append('INCONNU')

                # choix.mainloop()
                # Label(ttk.Frame, text="SCENARIO                    TECHNO").pack(side='top')
                # SCENARIO
                s.configure('My.TFrame', background='black', label='SFR', Scrollbar=True)
                frame = ttk.Frame(choix, padding=(70, 70, 160, 160), style='My.TFrame')
                frame.grid(column=4, row=15, sticky=(N, S, E, W))

                # Label(choix, text="    SCENARIOS", font=("Helvetica", 15, "bold"), fg='white', bg='black').pack()
                # Label(choix, text="            TECHNO", font=("Helvetica", 15, "bold"), fg='white', bg='black').pack()
                # labelframe.pack(fill="both", expand="yes")

                # TECNO
                frame2 = ttk.Frame(choix, padding=(70, 70, 160, 160), style='My.TFrame')
                frame2.grid(column=5, row=15, sticky=(N, S, E, W))

                # BOUTON RECHERCHE
                frame4 = ttk.Frame(choix, padding=(183, 0, 0, 0), style='My.TFrame')
                frame4.grid(column=4, row=14, sticky=(N, S, E, W))

                # RECHERCHE
                frame3 = ttk.Frame(choix, padding=(70, 10, 0, 0), style='My.TFrame')
                frame3.grid(column=4, row=13, sticky=(N, S, E, W))

                # frame.config(bg='black')

                # s1 = Scrollbar(frame)
                # l1 = Tk.Listbox(f1)

                # choix = Tk()
                # print(str(csvfile))


                # csvfile = ouvrir_fich()
                # csv_opner_result = re.compile(r".*u'(D:.*)'\, .*", re.IGNORECASE)
                # f = csv_opner_result.search(str(csvfile))

                # reader = f.group(1)
                # print(reader)

                # csvfile = open(reader, 'r')
                # print(csvfile)
                # reader = csv.reader(csvfile, delimiter=';')
                # reader = csv.reader(csvfile)

                # date_test = re.compile(r".*([0-9][0-9][0-9][0-9]\-[0-9][0-9]\-[0-9][0-9]) .*", re.IGNORECASE)
                # scenario_test = re.compile(r".*('Scenario Label \[campaign\_label\]').*", re.IGNORECASE)

                b = ''
                z = False
                l = 0
                g = 0
                k = 0
                d = ''
                tec = ''
                # scenario = []
                # techno_ = []
                # date = []
                k = []
                # RECUPERATION DATE ET SCENARIO


                scenario = list(scenario)
                # print(scenario)
                # print(len(scenario))
                # b = str(f.group(1)) #RECUPERATION DE LA DATE
                # scrollbar = Scrollbar(choix)


                date.reverse()
                for item in scenario:
                    scenario[scenario.index(item)] = '_'.join(item.split(" "))

                makeitastring = ' '.join(map(str, scenario))
                # print(scenario)
                # print(scenario)
                # print(len(scenario))

                makeitastring = (makeitastring)
                # print(makeitastring)
                # scrollbar2 = Scrollbar(frame, orient=VERTICAL)
                # scrollbar2.grid(column=2, row=2, sticky='EW')

                # _____-************************-__________________________________________________________________________________________________________________________________
                # SELECTION DES SCENARIOS

                # LES SCENARIOS
                global valores
                valores = StringVar()
                valores1 = tuple(scenario)
                valores.set(valores1)
                # print(valores)
                # print(valores1)

                # LA TECNO
                global valores2
                valores2 = StringVar()
                valores3 = tuple(techno_)
                valores2.set(valores3)

                # SCENARIO
                lstbox = Listbox(frame, listvariable=valores, selectmode=MULTIPLE, width=30, height=10,
                                 fg='OrangeRed2', bg='black')
                lstbox.grid(column=0, row=3, columnspan=2)
                # vbar = Scrollbar(lstbox, orient=VERTICAL)
                # lstbox.config(yscrollcommand=vbar.set)
                # vbar.config(command=lstbox.yview)

                # lstbox.pack(side=LEFT, fill=BOTH, expand=1)
                # lstbox.grid(column=0, row=3)
                # vbar.grid(column=0, sticky=N+S)
                # scrollbar.config(command=lstbox.yview)
                # scrollbar.pack(side=RIGHT, fill=Y)

                # RECHERCHE
                v = StringVar()
                e = Entry(frame3, textvariable=v)
                e.grid(column=0, row=3)
                # e.grid_bbox(0, 3,0,2)
                e.pack()
                e.focus_set()

                # v.set("a default value")
                lstbox2 = Listbox(frame2, listvariable=valores2, selectmode=MULTIPLE, width=30, height=10, fg='red',
                                  bg='black')
                lstbox2.grid(column=0, row=3, columnspan=2)

                # ___________________________________________________HEREEEEEE##################################################################**********
                def callback(frame, frame2, scenario, techno_, lstbox):

                    text = v.get()
                    v.set(text)
                    # print(text)
                    # frame.destroy()
                    # frame2.destroy()

                    import tkinter as tk
                    # try:
                    # import Tix as tix  # Python27
                    # except ImportError:
                    # import tkinter.tix as tix  # Python31+

                    # choix1.geometry("+50+150")
                    # choix.geometry("500x600+20+50")
                    s = ttk.Style()

                    # SCENARIO
                    s.configure('My.TFrame', background='black', label='SFR')
                    frame = ttk.Frame(choix, padding=(70, 70, 160, 160), style='My.TFrame')
                    frame.grid(column=4, row=15, sticky=(N, S, E, W))

                    # TECNO
                    frame2 = ttk.Frame(choix, padding=(70, 70, 160, 160), style='My.TFrame')
                    frame2.grid(column=5, row=15, sticky=(N, S, E, W))

                    # LES SCENARIOS
                    global valores
                    valores = StringVar()
                    valores1 = tuple(scenario)
                    valores.set(valores1)

                    # LA TECNO
                    global valores2
                    valores2 = StringVar()
                    valores3 = tuple(techno_)
                    valores2.set(valores3)
                    # print(text.lower())
                    # print(text.upper())
                    for elementes in scenario:
                        # if elementes in text or text in elementes or elementes in text.lower() or text.lower() in elementes or elementes in text.upper() or text.upper():
                        if text in elementes or text.lower() in elementes or text.upper() in elementes:
                            # print(elementes)
                            lstbox.insert(0, elementes)

                    # SCENARIO
                    lstbox = Listbox(frame, listvariable=valores, selectmode=MULTIPLE, width=30, height=10,
                                     fg='green',
                                     bg='black')
                    lstbox.grid(column=0, row=3, columnspan=2)
                    lstbox2 = Listbox(frame2, listvariable=valores2, selectmode=MULTIPLE, width=30, height=10,
                                      fg='red',
                                      bg='black')
                    lstbox2.grid(column=0, row=3, columnspan=2)
                    lstbox.update()





                    # print(v)

                # b = Button(choix, text="get", width=10, command=callback)
                # b.pack()

                btn3 = ttk.Button(frame4, text='Rechercher',
                                  command=lambda: callback(frame, frame2, scenario, techno_, lstbox))
                btn3.grid(column=2, row=2)

                # lstbox3 = Listbox(frame3, listvariable=valores, selectmode=MULTIPLE, width=30, height=1, fg='grey',bg='white')
                # lstbox3.grid(column=0, row=3)

                # namelbl = ttk.Label(lstbox, text="SCENARIO")
                # name = ttk.Entry(frame)
                # TECNO


                def choix_techno(value1, value2, value3, val5, csvfile):
                    btn8 = ttk.Button(frame2, text='ok',
                                      command=lambda: select_with_tech(value1, value2, value3, val5, csvfile))
                    btn8.grid(column=0, row=4)

                # lstbox = Listbox(frame, listvariable=valores, selectmode=MULTIPLE, width=20, height=10, yscrollcommand=scrollbar2.set)  # LISTBOX
                # scrollbar2.config(command=mapLBox.yview)
                # lstbox.grid(column=2, row=2, sticky='EW')
                # lstbox.grid(column=0, row=0, columnspan=2)

                # print(makeitastring)
                # print(valores.get())

                """
                def select():
                    global reslist
                    global seleccion
                    reslist = list()
                    seleccion = lstbox.curselection()  # PRENDRE EN COMPTE LA SELECTION
                    for i in seleccion:
                        entrada = lstbox.get(i)
                        reslist.append(entrada)
                    #for val in reslist:
                        #print(val)

                    def clear():
                        del reslist[:]
                        lstbox.select_clear(0, END)  # DESELECTIONNER CE QUI A ETE SELECTIONNE

                    btn2 = ttk.Button(frame, text='Annuler', command=clear)
                    btn2.grid(column=1, row=1)

                    return reslist
                """

                def detruire():
                    frame.destroy()
                    frame2.destroy()
                    frame3.destroy()
                    frame4.destroy()
                    root.destroy()
                    choix.geometry("300x345+20+50")

                # btn = ttk.Button(frame, text="Valider", command=exec_voix(event))
                # btn.grid(column=0, row=1)
                # frame.bind('<ButtonRelease-1>', exec_voix)

                # def valider(value1, value2, value3, tech, val5, csvfile):


                def clear2():
                    del value3[:]
                    lstbox2.select_clear(0, END)  # DESELECTIONNER CE QUI A ETE SELECTIONNE
                    # btn3 = ttk.Button(frame, text='ok', command=lambda: select(value1, value2, csvfile))
                    btn6 = ttk.Button(frame2, text='Cancel', command=lambda: clear2())
                    btn6.grid(column=0, row=4)
                    # btn3.grid(column=0, row=1)

                def select_with_tech(value1, value2, value3, val5, csvfile):
                    value1 = value1
                    value2 = value2
                    csvfile = csvfile
                    # print("JE SUIS ICI")

                    # lobal tech
                    global seleccion2
                    tech = list()
                    seleccion2 = lstbox2.curselection()  # PRENDRE EN COMPTE LA SELECTION
                    for i in seleccion2:
                        entrada2 = lstbox2.get(i)
                        tech.append(entrada2)
                        # for val in value3:
                        # print(val)
                        # print(entrada2)
                    # print(tech)
                    btn6 = ttk.Button(frame2, text='Cancel', command=lambda: clear2())
                    btn6.grid(column=1, row=4)
                    btn7 = ttk.Button(frame2, text='Valider',
                                      command=lambda: lancer(value1, value2, value3, tech, val5, departement,
                                                             csvfile))
                    btn7.grid(column=0, row=4)

                def select(value1, value2, val5, csvfile):
                    value1 = value1
                    value2 = value2
                    csvfile = csvfile

                    global value3
                    global seleccion
                    value3 = list()
                    seleccion = lstbox.curselection()  # PRENDRE EN COMPTE LA SELECTION
                    for i in seleccion:
                        entrada = lstbox.get(i)
                        value3.append(entrada)
                        # for val in value3:
                        # print(val)
                        # print(value3)
                    # print(value3)
                    if 'all' in value3:
                        value3 = scenario

                    btn5 = ttk.Button(frame, text='Valider',
                                      command=lambda: choix_techno(value1, value2, value3, val5, csvfile))
                    btn5.grid(column=0, row=4)
                    # btn3 = ttk.Button(frame, text='ok', command=lambda: select(value1, value2, val5, csvfile))
                    # btn3.grid(column=0, row=4)

                def select2(value1, value2, val5, csvfile):
                    value1 = value1
                    value2 = value2
                    csvfile = csvfile

                    # global value3
                    # global seleccion
                    # value3 = list()
                    # seleccion = lstbox.curselection()  # PRENDRE EN COMPTE LA SELECTION
                    # btn3 = ttk.Button(frame, text='Valider', command=lambda: lancer2(value1, value2,val5, csvfile))
                    # btn3.grid(column=1, row=2)

                def clear():

                    del value3[:]
                    lstbox.select_clear(0, END)  # DESELECTIONNER CE QUI A ETE SELECTIONNE
                    btn3 = ttk.Button(frame, text='ok', command=lambda: select(value1, value2, val5, csvfile))
                    btn3.grid(column=0, row=4)

                def clear_custom():
                    # del value3[:]
                    lstbox.select_clear(0, END)  # DESELECTIONNER CE QUI A ETE SELECTIONNE
                    btn3 = ttk.Button(frame, text='ok', command=lambda: select(value1, value2, val5, csvfile))
                    btn3.grid(column=0, row=4)

                # print(value3)
                # btn3 = ttk.Button(frame, text='Valider', command=lambda : lancer(value1,value2,value3,csvfile))
                btn3 = ttk.Button(frame, text='ok', command=lambda: select(value1, value2, val5, csvfile))
                btn3.grid(column=0, row=4)
                # btn4 = ttk.Button(frame, text='Default', command=lambda: select2(value1, value2,val5, csvfile))
                # btn4.grid(column=1, row=)
                btn2 = ttk.Button(frame, text='Cancel', command=clear_custom)
                btn2.grid(column=1, row=4)
                ttk.Style().configure('green/black.TLabel', relief="flat", foreground='black', background='red')
                btnn = ttk.Button(frame, text=" --> Menu Principal ", command=detruire, style='green/black.TLabel')
                # btnn.configure(bg="red")
                btnn.grid(column=0, row=6, sticky=(N, S, E, W))

                ttk.Style().configure('yellow/black.TLabel', relief="flat", foreground='white', background='black')
                btnn = ttk.Button(frame, text="CHOIX SCENARIO", style='yellow/black.TLabel')
                # btnn.configure(bg="red")
                btnn.grid(column=0, row=0, sticky=(N, S, E, W))

                btnn = ttk.Button(frame2, text="CHOIX TECHNO", style='yellow/black.TLabel')
                # btnn.configure(bg="red")
                btnn.grid(column=0, row=0, sticky=(N, S, E, W))

                choix.mainloop()

                # FIN DE SELECTION DES SCENARIOS
                # ______-*******************************-________________________________________________________________________________________________________________________________

                # ------------------------------------------------------------------------------------FIN------------------------------------------------------------------------------------

                # ------------------------------------------------------------------------------------FIN------------------------------------------------------------------------------------

        date = []
        etat = []

        date_cumul = 0

        z = 0
        a = []
        b = 0

        # reader = csv.reader(lefichier.fichier, delimiter=';')
        reader = csv.reader(lefichier.fichier)

        date_test = re.compile(r".*([0-9][0-9][0-9][0-9]\-[0-9][0-9]\-[0-9][0-9]) .*", re.IGNORECASE)
        scenario_test = re.compile(r".*('Scenario Label \[campaign\_label\]').*", re.IGNORECASE)

        b = ''
        z = False
        l = 0
        g = 0
        k = 0
        d = ''
        scenario = []
        scenario.append('all')
        os = dict()

        # RECUPERATION OS


        key = "ALL"
        os.setdefault(key, [])

        # os.setdefault(key, [])

        # os['Belkacem'] = 'KAID'
        # RECUPERATION DATE ET SCENARIO
        for row in reader:
            # f = date_test.search(row[1])
            f = row[1][0:10]
            a = row[161]
            o = row[220]
            if f in 'date_utc_agent' or 'date_utc_agent' in f:
                variable = (f)
                # print(int(val1[-2:]) - 2)
                continue

            # RECUPERATION DATE
            # if f and b != str(f.group(1)):

            if b != f and f not in date:
                # date.append(f.group(1))
                date.append(f)
                b = f
                # b = str(f.group(1))

            # RECUPERATION SCENARIOS
            k = scenario_test.search(row[221])
            d = row[221]
            if d == 'campaign_label':
                continue
            if d not in scenario:
                scenario.append(str(d))

            # RECUPERATION OS
            if o:
                if o not in os:
                    os[key].append(o)
                    os[o] = o
                    # os['Belkacem'].append(o)
        android_ios = 'Android & ios'
        os[android_ios] = ['Android', 'iOS']
        for k in os.keys():
            try:
                if len(os[k]) < 1:
                    del os[k]
            except:
                pass

        date.reverse()

        # print(scenario)
        # print(date)
        # sorted(os, key=operator.itemgetter("ALL"))


        def defocus(event):
            event.widget.master.focus_set()

            # try:
            # import Tix as tix  # Python27
            # except ImportError:
            # import tkinter.tix as tix  # Python31+

        """
        def selected(event):
            global value1
            value1 = combo.entry.get()
            print(value1)

        def selected2(event):
            global value2
            value2 = combo2.entry.get()
            print(value2)
        """

        # import Tkinter as Tk
        root = Tk()
        #root.attributes('-alpha', 0.8)
        # choix1 = Tk()
        # choix1.title("Multiple Choice Listbox")
        # choix1 = tix.Tk()
        root.config(bg='black')

        # use width x height + x_offset + y_offset (no spaces!)
        Label(root, text="SFR", font=("Helvetica", 20, "bold"), fg='red', bg='black').pack()
        Label(root, text="                  SELECTION OS                   ", font=("Helvetica", 10, "bold"),fg='white', bg='black').pack()
        Label(root,text="   DATE DEBUT                                                                                                     DATE FIN           ",font=("Helvetica", 10, "bold"), fg='white', bg='black').pack()
        root.geometry("%dx%d+%d+%d" % (640, 200, 738, 150))
        root.title("Interval")

        # COMBO 1_______________________
        combo = ttk.Combobox(root, values=date)
        # combo.config(bg='white')
        # Label(combo, text="start", font=("Helvetica", 10, "bold"), fg='red', bg='black').pack(side='left')
        combo.pack(side='left', padx=10, pady=10)
        # date=date.reverse()
        # for item in date:
        # combo.slistbox.listbox.insert('end', item)

        # COMBO 2________________________
        combo2 = ttk.Combobox(root, values=date)
        # Label(combo2, text="end", font=("Helvetica", 10, "bold"), fg='red', bg='black').pack(side='right')
        combo2.pack(side='right', padx=10, pady=10)
        # date = date.reverse()
        # for item2 in date:
        # combo2.slistbox.listbox.insert('end', item2)
        # left mouse click on a list item to display selection

        os_remaked = ['ALL', 'Android & ios', 'Android', 'iOS', 'Unknown']
        # COMBO 3________________________
        # print(os)
        combo3 = ttk.Combobox(root, values=os_remaked)
        # Label(combo3, text="OS", font=("Helvetica", 10, "bold"), fg='red', bg='black').pack(side='top')
        combo3.pack(side='top', padx=10, pady=10)
        # date = date.reverse()
        # for item3 in os:
        # combo3.slistbox.listbox.insert('end', item3)
        # left mouse click on a list item to display selection
        Label(root, text="                    DEPARTEMENT                   ", font=("Helvetica", 10, "bold"),
              fg='white', bg='black').pack()
        departement_list = ['TOUT DPTs', 'Ain', 'Aisne', 'Allier', 'Alpes_de_Haute-Provence', 'Hautes-Alpes',
                            'Alpes-Maritimes', 'Ardeche', 'Ardennes', 'Ariege', 'Aube', 'Aude', 'Aveyron',
                            'Bouches_du_Rhone', 'Calvados', 'Cantal', 'Charente', 'Charente_Maritime', 'Cher',
                            'Correze', 'Cote_dOr', 'Cotes_dArmor', 'Creuse', 'Dordogne', 'Doubs', 'Drome', 'Eure',
                            'Eure-et-Loir', 'Finistere', 'Gard', 'Haute-Garonne', 'Gers', 'Gironde', 'Herault',
                            'Ille-et-Vilaine', 'Indre', 'Indre-et-Loire', 'Isere', 'Jura', 'Landes', 'Loir-et-Cher',
                            'Loire', 'Haute-Loire', 'Loire-Atlantique', 'Loiret', 'Lot', 'Lot-et-Garonne', 'Lozere',
                            'Maine-et-Loire', 'Manche', 'Marne', 'Haute-Marne', 'Mayenne', 'Meurthe-et-Moselle',
                            'Meuse', 'Morbihan', 'Moselle', 'Nievre', 'Nord', 'Oise', 'Orne', 'Pas-de-Calais',
                            'Puy-de-Dome', 'Pyrenees-Atlantiques', 'Hautes-Pyrenees', 'Pyrenees-Orientales',
                            'Bas-Rhin',
                            'Haut-Rhin', 'Rhone', 'Haute-Saone', 'Saone-et-Loire', 'Sarthe', 'Savoie',
                            'Haute-Savoie',
                            'Paris', 'Seine-Maritime', 'Seine-et-Marne', 'Yvelines', 'Deux-Sevres', 'Somme', 'Tarn',
                            'Tarn-et-Garonne', 'Var', 'Vaucluse', 'Vendee', 'Vienne', 'Haute-Vienne', 'Vosges',
                            'Yonne',
                            'Territoire-de-Belfort', 'Essonne', 'Hauts-de-Seine', 'Seine-St-Denis', 'Val-de-Marne',
                            'Val-dOise', 'Corse_du_Sud', 'Haute-Corse']
        # COMBO 4________________________
        # print(os)
        combo4 = ttk.Combobox(root, values=departement_list)
        # Label(combo3, text="OS", font=("Helvetica", 10, "bold"), fg='red', bg='black').pack(side='top')
        combo4.pack(side='bottom', padx=10, pady=10)

        # for item4 in departement_list:
        # combo4.slistbox.listbox.insert('end', item4)

        combo.bind('<<ComboboxSelected>>', lambda event: exec_voix(event, scenario))
        combo2.bind('<<ComboboxSelected>>', lambda event: exec_voix(event, scenario))
        combo3.bind('<<ComboboxSelected>>', lambda event: exec_voix(event, scenario))
        combo4.bind('<<ComboboxSelected>>', lambda event: exec_voix(event, scenario))
        # choix_scenario(csvfile)



        root.mainloop()

        """
        fenetre = Tk()
        fenetre.geometry("300x345+20+50")
        fenetre.title("FENETRE DE CHOIX")
        fenetre.config(bg='black')
        fenetre.geometry()

        Label(fenetre, text="").pack()
        Label(fenetre, text="").pack()
        Label(fenetre, text="SFR", font=("Helvetica", 20, "bold"), fg='red', bg='black').pack()
        Label(fenetre, text="").pack()
        b5 = Button(fenetre, text="     VOIX   ", width=15, height=1, relief=GROOVE, command=voix, fg='white',
                    bg='red').pack()
        b6 = Button(fenetre, text="       QUITTER         ", width=15, height=1, relief=GROOVE, command=quitter_prog,
                    fg='white', bg='red').pack()
        Label(choix, text="").pack()
        label = Label(fenetre, text="SFR PERF", fg='white', bg='black').pack()
        Label(fenetre, text="").pack()
        # photo = open(file="logo-3.jpg")
        # Label= Label(fenetre,image="logo-3.jpg").pack() # keep a reference!
        choix.mainloop()
        """


    def les_causes_codes():


        choix.geometry("700x360+20+50")

        #plt.suptitle('DASHBOARD KPIs VOIX', fontsize=18, bbox={'facecolor': 'white', 'pad': 5})

        class lefichier():
            global csvfile
            csvfile = ouvrir_fich()
            fichier = csvfile
            # print(a) #OUVERTURE FICHIER UNE SEULE FOIS

        # print(str(lefichier.fichier))
        # ___________________________**********************DEBUT********************************____________________________#
        # ------------------------------------------------------------------------------------------------------------------#

        # ------------------------------------------------------------------------------------------------------------------#
        # ___________________________**********************FIN********************************____________________________#



        def exec_voix(event, scenario):
            # print(lefichier.fichier)
            def lancer(val1, val2, val3, tech, val5, departement, file):

                tout = ['2G', 'EDGE', 'GPRS', '3G', 'UMTS', 'Dual Carrier', 'HSUPA', 'HSPA', 'HSPA+', 'HSDPA', '4G','LTE', 'LTE-A', 'WIFI', 'N/A', 'UNKNOWN', 'GSM (2G-3G-4G)']
                LA2G = ['2G', 'EDGE', 'GPRS']
                LA3G = ['3G', 'UMTS', 'Dual Carrier', 'HSUPA', 'HSPA', 'HSPA+', 'HSDPA']
                LA4G = ['4G', 'LTE', 'LTE-A']
                LAWIFI = ['WIFI']
                LINCONNU = ['N/A', 'UNKNOWN']

                # print(departement)
                if '2G' in tech:
                    for elem2 in LA2G:
                        tech.append(elem2)
                if '3G' in tech:
                    for elem3 in LA3G:
                        tech.append(elem3)
                if '4G' in tech:
                    for elem4 in LA4G:
                        tech.append(elem4)
                if 'WIFI' in tech:
                    for elem5 in LAWIFI:
                        tech.append(elem5)
                if 'INCONNU' in tech:
                    for elem6 in LINCONNU:
                        tech.append(elem6)
                if 'ALL' in tech:
                    for elem in tout:
                        tech.append(elem)
                print("________________PLEASE WAIT____________________")
                if departement in 'TOUT DPTs':

                    def causes_sans_filtre_dpt(val1, val2, val3, tech, val5, departement, file):



                        #csvfile = open(fichier_voix, 'r')
                        #f = csv_opner_result.search(str(lefichier.fichier))
                        #reader = csv.reader(csvfile)

                        # fichier = open(f.group(1), 'r')
                        # print(f.group(1))
                        # reader = csv.reader(fichier, delimiter=';')
                        #reader = f.group(1)

                        def taille_csv(fichier):
                            csvfile = open(fichier, 'r')
                            # print(csvfile)
                            reader = csv.reader(csvfile, delimiter=';')
                            k = 0.0
                            for row in reader:
                                k = k + 1
                            return k

                        # taille= taille_csv(reader)

                        def etat_par_date(fichier, val4):
                            date = []
                            etat = []
                            fichier = fichier
                            csvfile = open(fichier, 'r')
                            one_ = []
                            two_ = []
                            three_ = []
                            four_ = []
                            five_ = []
                            six_ = []
                            seven_ = []
                            eight_ = []
                            other_one_ = []  # Succes
                            other_two_ = []  # Not Connected
                            drop_set = []
                            caf_set = []
                            connected_set = []

                            date_cumul = 0
                            etat_cumul = 0
                            one_cumul_ = 0.0
                            two_cumul_ = 0.0
                            three_cumul_ = 0.0
                            four_cumul_ = 0.0
                            five_cumul_ = 0.0
                            six_cumul_ = 0.0
                            seven_cumul_ = 0.0
                            eight_cumul_ = 0.0
                            other_one_cumul_ = 0.0  # Succes comul
                            other_two_cumul_ = 0.0  # Not Connected cumul
                            drop = 0.0
                            drop_cumul = 0.0

                            z = 0
                            one = 0
                            two = 0
                            three = 0
                            four = 0
                            five = 0
                            six = 0
                            seven = 0
                            eight = 0
                            other_one = 0
                            other_two = 0
                            caf = 0.0

                            # Graphes cumules
                            one_cumul = 0
                            two_cumul = 0
                            three_cumul = 0
                            four_cumul = 0
                            five_cumul = 0
                            six_cumul = 0
                            seven_cumul = 0
                            eight_cumul = 0
                            other_one_cumul = 0
                            other_two_cumul = 0
                            caf_cumul = 0
                            connected = 0.0
                            connected_cumul = 0.0

                            a = []
                            b = 0

                            reader = csv.reader(csvfile)

                            date_test = re.compile(r".*([0-9][0-9][0-9][0-9]\-[0-9][0-9]\-[0-9][0-9]) .*"
                                                   , re.IGNORECASE)
                            verif_error = re.compile(r"\(.+\)\,\(.+\),([0-8])"
                                                     , re.IGNORECASE)

                            b = ''
                            z = False
                            l = 0
                            g = 0
                            k = 0
                            row_check = 0.0
                            var_ajout = 0.0
                            # for row in reader:
                            # print(row[0])

                            for row in reader:
                                # print(row[1])
                                row_check = row_check + 1
                                # f = date_test.search(row[1])
                                if row[1] in 'date_utc_a' or 'date_utc_a' in row[1]:
                                    continue
                                # print(row[1])
                                f = row[1][0:10]
                                # print(f)
                                a = row[161]
                                if f == 'Date UTC A':
                                    continue
                                if row_check == val4:
                                    b = str(f)
                                    one_.append(one)
                                    two_.append(two)
                                    three_.append(three)
                                    four_.append(four)
                                    five_.append(five)
                                    six_.append(six)
                                    seven_.append(seven)
                                    eight_.append(eight)
                                    other_one_.append(other_one)
                                    other_two_.append(other_two)
                                    drop_set.append(drop)
                                    caf_set.append(caf)
                                    connected_set.append(connected)
                                    break

                                if f and b != str(f) and f != 'Date UTC A':
                                    # print('f est la:  '+f)

                                    date.append(f)
                                    b = str(f)

                                    if var_ajout > 0:
                                        k = k + 1
                                        b = str(f)
                                        one_.append(one)
                                        two_.append(two)
                                        three_.append(three)
                                        four_.append(four)
                                        five_.append(five)
                                        six_.append(six)
                                        seven_.append(seven)
                                        eight_.append(eight)
                                        other_one_.append(other_one)
                                        other_two_.append(other_two)
                                        drop_set.append(drop)
                                        caf_set.append(caf)
                                        connected_set.append(connected)
                                        one = 0.0
                                        two = 0.0
                                        three = 0.0
                                        four = 0.0
                                        five = 0.0
                                        six = 0.0
                                        seven = 0.0
                                        eight = 0.0
                                        other_one = 0.0
                                        other_two = 0.0
                                        drop = 0.0
                                        caf = 0.0
                                        l = l + 1
                                    var_ajout = var_ajout + 1
                                    # Graphes independants
                                    if (row[161] == ''):  # IOS
                                        if row[209] == 'Connected':
                                            connected = connected + 1
                                            connected_cumul = connected_cumul + 1
                                            z = True
                                            continue
                                        if row[209] == 'CAF':
                                            caf = caf + 1
                                            caf_cumul = caf_cumul + 1
                                            one = one + 1
                                            one_cumul = one_cumul + 1
                                            z = True
                                            continue
                                        if str(row[209]) == 'Success':
                                            other_one = other_one + 1
                                            other_one_cumul = other_one_cumul + 1
                                            z = True
                                            continue
                                        if str(row[209]) == 'Not connected':
                                            other_two = other_two + 1
                                            other_two_cumul = other_two_cumul + 1
                                            z = True
                                            continue
                                        if str(row[209]) == 'Drop':
                                            drop = drop + 1
                                            drop_cumul = drop_cumul + 1
                                            continue




                                    else:
                                        if (a[len(row[161]) - 1] == '1'):
                                            if row[209] == 'CAF':
                                                caf = caf + 1
                                                caf_cumul = caf_cumul + 1
                                                one = one + 1
                                                one_cumul = one_cumul + 1
                                                z = True
                                                continue
                                            else:
                                                one = one + 1
                                                one_cumul = one_cumul + 1
                                                drop = drop + 1
                                                drop_cumul = drop_cumul + 1
                                                continue
                                        if (a[len(row[161]) - 1] == '2'):
                                            two = two + 1
                                            two_cumul = two_cumul + 1
                                            drop = drop + 1
                                            drop_cumul = drop_cumul + 1
                                            z = True
                                            continue
                                        if (a[len(row[161]) - 1] == '3'):
                                            three = three + 1
                                            three_cumul = three_cumul + 1
                                            drop_cumul = drop_cumul + 1
                                            z = True
                                            continue
                                        if (a[len(row[161]) - 1] == '4'):
                                            four = four + 1
                                            four_cumul = four_cumul + 1
                                            drop = drop + 1
                                            drop_cumul = drop_cumul + 1
                                            z = True
                                            continue
                                        if (a[len(row[161]) - 1] == '5'):
                                            five = five + 1
                                            five_cumul = five_cumul + 1
                                            caf = caf + 1
                                            caf_cumul = caf_cumul + 1
                                            z = True
                                            continue
                                        if (a[len(row[161]) - 1] == '6'):
                                            six = six + 1
                                            six_cumul = six_cumul + 1
                                            drop = drop + 1
                                            drop_cumul = drop_cumul + 1
                                            z = True
                                            continue
                                        if (a[len(row[161]) - 1] == '7'):
                                            seven = seven + 1
                                            seven_cumul = seven_cumul + 1
                                            drop = drop + 1
                                            drop_cumul = drop_cumul + 1
                                            z = True
                                            continue
                                        if (a[len(row[161]) - 1] == '8'):
                                            eight = eight + 1
                                            eight_cumul = eight_cumul + 1
                                            drop = drop + 1
                                            drop_cumul = drop_cumul + 1
                                            z = True
                                            continue
                                        if str(row[209]) == 'Success':
                                            other_one = other_one + 1
                                            other_one_cumul = other_one_cumul + 1
                                            z = True
                                            continue
                                        if str(row[209]) == 'Not connected':
                                            other_two = other_two + 1
                                            other_two_cumul = other_two_cumul + 1
                                            z = True
                                            continue


                                else:
                                    if (row[161] == ''):  # IOS
                                        if row[209] == 'Connected':
                                            connected = connected + 1
                                            connected_cumul = connected_cumul + 1
                                            z = True
                                            continue
                                        if row[209] == 'CAF':
                                            caf = caf + 1
                                            caf_cumul = caf_cumul + 1
                                            one = one + 1
                                            one_cumul = one_cumul + 1
                                            z = True
                                            continue
                                        if str(row[209]) == 'Success':
                                            other_one = other_one + 1
                                            other_one_cumul = other_one_cumul + 1
                                            z = True
                                            continue
                                        if str(row[209]) == 'Not connected':
                                            other_two = other_two + 1
                                            other_two_cumul = other_two_cumul + 1
                                            z = True
                                            continue
                                        if str(row[209]) == 'Drop':
                                            drop = drop + 1
                                            drop_cumul = drop_cumul + 1
                                            continue
                                    else:

                                        if (a[len(row[161]) - 1] == '1'):
                                            if row[209] == 'CAF':
                                                caf = caf + 1
                                                caf_cumul = caf_cumul + 1
                                                continue
                                            else:
                                                one = one + 1
                                                one_cumul = one_cumul + 1
                                                drop = drop + 1
                                                drop_cumul = drop_cumul + 1
                                                z = True
                                                continue
                                        if (a[len(row[161]) - 1] == '2'):
                                            two = two + 1
                                            two_cumul = two_cumul + 1
                                            drop = drop + 1
                                            drop_cumul = drop_cumul + 1
                                            z = True
                                            continue
                                        if (a[len(row[161]) - 1] == '3'):
                                            three = three + 1
                                            three_cumul = three_cumul + 1
                                            drop = drop + 1
                                            drop_cumul = drop_cumul + 1
                                            z = True
                                            continue
                                        if (a[len(row[161]) - 1] == '4'):
                                            four = four + 1
                                            four_cumul = four_cumul + 1
                                            drop = drop + 1
                                            drop_cumul = drop_cumul + 1
                                            z = True
                                            continue
                                        if (a[len(row[161]) - 1] == '5'):
                                            five = five + 1
                                            five_cumul = five_cumul + 1
                                            caf = caf + 1
                                            caf_cumul = caf_cumul + 1
                                            z = True
                                            continue
                                        if (a[len(row[161]) - 1] == '6'):
                                            six = six + 1
                                            six_cumul = six_cumul + 1
                                            drop = drop + 1
                                            drop_cumul = drop_cumul + 1
                                            z = True
                                            continue
                                        if (a[len(row[161]) - 1] == '7'):
                                            seven = seven + 1
                                            seven_cumul = seven_cumul + 1
                                            drop = drop + 1
                                            drop_cumul = drop_cumul + 1
                                            z = True
                                            continue
                                        if (a[len(row[161]) - 1] == '8'):
                                            eight = eight + 1
                                            eight_cumul = eight_cumul + 1
                                            drop = drop + 1
                                            drop_cumul = drop_cumul + 1
                                            z = True
                                            continue
                                        if str(row[209]) == 'Success':
                                            other_one = other_one + 1
                                            other_one_cumul = other_one_cumul + 1
                                            drop = drop + 1
                                            z = True
                                            continue
                                            # print(other_one)
                                        if str(row[209]) == 'Not connected':
                                            other_two = other_two + 1
                                            other_two_cumul = other_two_cumul + 1
                                            z = True
                                            continue

                            caf_cumul = caf_cumul
                            connected_cumul = connected_cumul
                            one_cumul_ = one_cumul
                            two_cumul_ = two_cumul
                            three_cumul_ = three_cumul
                            four_cumul_ = four_cumul
                            five_cumul_ = five_cumul
                            six_cumul_ = six_cumul
                            seven_cumul_ = seven_cumul
                            eight_cumul_ = eight_cumul
                            other_one_cumul_ = other_one_cumul
                            other_two_cumul_ = other_two_cumul
                            drop_cumul = drop_cumul

                            # print(date)

                            return one_, two_, three_, four_, five_, six_, seven_, eight_, other_one_, other_two_, date, one_cumul_, two_cumul_, three_cumul_, four_cumul_, five_cumul_, six_cumul_, seven_cumul_, eight_cumul_, other_one_cumul_, other_two_cumul_, drop_set, drop_cumul, caf_cumul, caf_set, connected_set, connected_cumul

                        csv_opner_result = re.compile(r".*'(.*:.*)'\, .*", re.IGNORECASE)
                        fichier_voix = file
                        f = csv_opner_result.search(str(fichier_voix))
                        reader = f.group(1)
                        def causes_codes(fichier_voix, val1, val2, val3, tech, val5, departement):

                            print(fichier_voix)
                            import datetime
                            # format_date_generale = "%Y-%m-%d"
                            date_debut = datetime.datetime.strptime(val1, "%Y-%m-%d")
                            date_fin = datetime.datetime.strptime(val2, "%Y-%m-%d")

                            fichier_voix = fichier_voix
                            date = []
                            csvfile = open(fichier_voix, 'r')
                            # reader = csv.reader(csvfile, delimiter=';')
                            # reader = csv.reader(csvfile, delimiter=';')
                            reader = csv.reader(csvfile)
                            # CAUSES CODES
                            one = 0.0  # COVERAGE LOST
                            two = 0.0  # Multi-RAB testing -> potential CORE issue
                            three = 0.0  # Low coverage -> potential radio issue
                            four = 0.0  # User behaviour
                            five = 0.0  # Call Attempt Failure notified by OS -> radio limitation
                            six = 0.0  # 4G calls without 2G-3G fallback
                            seven = 0.0  # Estimated time to qualify call as CAF
                            eight = 0.0  # Force 2G for unknown bearer calls
                            succes = 0.0  # SUCCES DE L APPEL -> ETAT PROPRE A ANDROID
                            notconnected = 0.0  # ANNULATION PAR L APPELANT  -> CONSIDERE COMME SUCCES
                            caf = 0.0  # ECHEC DE L APPEL
                            connected = 0.0  # SUCCES DE L APPEL (APPEL EMIS) -> ETAT PROPRE A APPLE -> PAS TRES PRECIS
                            drop = 0.0  # COUPURE -> VERIFIE DANS LE CAS DE TERMINAL APPLE

                            # LES CUMULATIFS EN LISTE
                            one_cumule_liste = []  # COVERAGE LOST
                            two_cumule_liste = []  # Multi-RAB testing -> potential CORE issue
                            three_cumule_liste = []  # Low coverage -> potential radio issue
                            four_cumule_liste = []  # User behaviour
                            five_cumule_liste = []  # Call Attempt Failure notified by OS -> radio limitation
                            six_cumule_liste = []  # 4G calls without 2G-3G fallback
                            seven_cumule_liste = []  # Estimated time to qualify call as CAF
                            eight_cumule_liste = []  # Force 2G for unknown bearer calls
                            succes_cumule_liste = []  # SUCCES DE L APPEL -> ETAT PROPRE A ANDROID
                            notconnected_cumule_liste = []  # ANNULATION PAR L APPELANT  -> CONSIDERE COMME SUCCES
                            caf_cumule_liste = []  # ECHEC DE L APPEL
                            connected_cumule_liste = []  # SUCCES DE L APPEL (APPEL EMIS) -> ETAT PROPRE A APPLE -> PAS TRES PRECIS
                            drop_cumule_liste = []  # COUPURE -> VERIFIE DANS LE CAS DE TERMINAL APPLE
                            nb_cause_code_cumule_liste = []  # LE TOTAL DES CAUSES CODES

                            # LES CUMULATIFS EN LISTE DE TAUX
                            one_cumule_liste_taux = []  # COVERAGE LOST
                            two_cumule_liste_taux = []  # Multi-RAB testing -> potential CORE issue
                            three_cumule_liste_taux = []  # Low coverage -> potential radio issue
                            four_cumule_liste_taux = []  # User behaviour
                            five_cumule_liste_taux = []  # Call Attempt Failure notified by OS -> radio limitation
                            six_cumule_liste_taux = []  # 4G calls without 2G-3G fallback
                            seven_cumule_liste_taux = []  # Estimated time to qualify call as CAF
                            eight_cumule_liste_taux = []  # Force 2G for unknown bearer calls
                            succes_cumule_liste_taux = []  # SUCCES DE L APPEL -> ETAT PROPRE A ANDROID
                            notconnected_cumule_liste_taux = []  # ANNULATION PAR L APPELANT  -> CONSIDERE COMME SUCCES
                            caf_cumule_liste_taux = []  # ECHEC DE L APPEL
                            connected_cumule_liste_taux = []  # SUCCES DE L APPEL (APPEL EMIS) -> ETAT PROPRE A APPLE -> PAS TRES PRECIS
                            drop_cumule_liste_taux = []  # COUPURE -> VERIFIE DANS LE CAS DE TERMINAL APPLE
                            nb_cause_code_cumule_liste_taux = []  # LE TOTAL DES CAUSES CODES

                            # LES CUMULATIFS EN VARIABLES
                            one_cumule = 0.0  # COVERAGE LOST
                            two_cumule = 0.0  # Multi-RAB testing -> potential CORE issue
                            three_cumule = 0.0  # Low coverage -> potential radio issue
                            four_cumule = 0.0  # User behaviour
                            five_cumule = 0.0  # Call Attempt Failure notified by OS -> radio limitation
                            six_cumule = 0.0  # 4G calls without 2G-3G fallback
                            seven_cumule = 0.0  # Estimated time to qualify call as CAF
                            eight_cumule = 0.0  # Force 2G for unknown bearer calls
                            succes_cumule = 0.0  # SUCCES DE L APPEL -> ETAT PROPRE A ANDROID
                            notconnected_cumule = 0.0  # ANNULATION PAR L APPELANT  -> CONSIDERE COMME SUCCES
                            caf_cumule = 0.0  # ECHEC DE L APPEL
                            connected_cumule = 0.0  # SUCCES DE L APPEL (APPEL EMIS) -> ETAT PROPRE A APPLE -> PAS TRES PRECIS
                            drop_cumule = 0.0  # COUPURE -> VERIFIE DANS LE CAS DE TERMINAL APPLE
                            nb_cause_code_cumule = 0.0  # LE TOTAL DES CAUSES CODES

                            # Nombre total
                            nb_cause_code = 0.0  # LE TOTAL DES CAUSES CODES

                            b = ''
                            deja_boucle = 0.0
                            for row in reader:
                                dqaid_row = row[0]
                                f = row[1][0:10]
                                row_volte = row[59]
                                cs = row[204]
                                tecc = row[215]
                                a = row[167]  # CAUSE CODE
                                if f == 'date_utc_a':
                                    continue
                                datef = datetime.datetime.strptime(f, "%Y-%m-%d")
                                if datef > date_fin:
                                    continue

                                if datef < date_debut:
                                    # print('JE SUIS RENTRE ET LA DATE EST: '+str(b))
                                    # AJOUT DES CUMULATIFS DANS LEURS LISTES RESPECTIVES
                                    one_cumule_liste.append(one_cumule)
                                    # print(one_cumule_liste)
                                    # print("\n")
                                    two_cumule_liste.append(two_cumule)
                                    three_cumule_liste.append(three_cumule)
                                    four_cumule_liste.append(four_cumule)
                                    five_cumule_liste.append(five_cumule)
                                    six_cumule_liste.append(six_cumule)
                                    seven_cumule_liste.append(seven_cumule)
                                    eight_cumule_liste.append(eight_cumule)
                                    succes_cumule_liste.append(succes_cumule)
                                    notconnected_cumule_liste.append(notconnected)
                                    caf_cumule_liste.append(caf_cumule)
                                    connected_cumule_liste.append(connected_cumule)
                                    drop_cumule_liste.append(drop_cumule)
                                    nb_cause_code_cumule_liste.append(nb_cause_code_cumule)

                                    # CALCULES DES TAUX PAR JOUR
                                    if nb_cause_code_cumule>0:
                                        one_cumule_liste_taux.append(one_cumule * 100 / nb_cause_code_cumule)
                                        two_cumule_liste_taux.append(two_cumule * 100 / nb_cause_code_cumule)
                                        three_cumule_liste_taux.append(three_cumule * 100 / nb_cause_code_cumule)
                                        four_cumule_liste_taux.append(four_cumule * 100 / nb_cause_code_cumule)
                                        five_cumule_liste_taux.append(five_cumule * 100 / nb_cause_code_cumule)
                                        six_cumule_liste_taux.append(six_cumule * 100 / nb_cause_code_cumule)
                                        seven_cumule_liste_taux.append(seven_cumule * 100 / nb_cause_code_cumule)
                                        eight_cumule_liste_taux.append(eight_cumule * 100 / nb_cause_code_cumule)
                                        succes_cumule_liste_taux.append(succes_cumule * 100 / nb_cause_code_cumule)
                                        notconnected_cumule_liste_taux.append(notconnected_cumule * 100 / nb_cause_code_cumule)
                                        caf_cumule_liste_taux.append(caf_cumule * 100 / nb_cause_code_cumule)
                                        connected_cumule_liste_taux.append(connected_cumule * 100 / nb_cause_code_cumule)
                                        drop_cumule_liste_taux.append(drop_cumule * 100 / nb_cause_code_cumule)
                                    else:
                                        one_cumule_liste_taux.append(0.0)
                                        two_cumule_liste_taux.append(0.0)
                                        three_cumule_liste_taux.append(0.0)
                                        four_cumule_liste_taux.append(0.0)
                                        five_cumule_liste_taux.append(0.0)
                                        six_cumule_liste_taux.append(0.0)
                                        seven_cumule_liste_taux.append(0.0)
                                        eight_cumule_liste_taux.append(0.0)
                                        succes_cumule_liste_taux.append(0.0)
                                        notconnected_cumule_liste_taux.append(0.0)
                                        caf_cumule_liste_taux.append(0.0)
                                        connected_cumule_liste_taux.append(0.0)
                                        drop_cumule_liste_taux.append(0.0)
                                    # nb_cause_code_cumule_liste_taux.append(one_cumule*100/nb_cause_code_cumule)

                                    break

                                row[221] = '_'.join(row[221].split(" "))

                                if (str(row[213]) != 'SFR' and row[213] != 'N/A'):
                                    continue
                                if str(row[221]) in val3 and row[220] in val5 and tecc in tech:

                                    if b != str(f):
                                        date.append(str(f))
                                        b = str(f)

                                        if deja_boucle > 0:

                                            # print('JE SUIS RENTRE ET LA DATE EST: '+str(b))
                                            # AJOUT DES CUMULATIFS DANS LEURS LISTES RESPECTIVES
                                            one_cumule_liste.append(one_cumule)
                                            # print(one_cumule_liste)
                                            # print("\n")
                                            two_cumule_liste.append(two_cumule)
                                            three_cumule_liste.append(three_cumule)
                                            four_cumule_liste.append(four_cumule)
                                            five_cumule_liste.append(five_cumule)
                                            six_cumule_liste.append(six_cumule)
                                            seven_cumule_liste.append(seven_cumule)
                                            eight_cumule_liste.append(eight_cumule)
                                            succes_cumule_liste.append(succes_cumule)
                                            notconnected_cumule_liste.append(notconnected)
                                            caf_cumule_liste.append(caf_cumule)
                                            connected_cumule_liste.append(connected_cumule)
                                            drop_cumule_liste.append(drop_cumule)
                                            nb_cause_code_cumule_liste.append(nb_cause_code_cumule)

                                            # CALCULES DES TAUX PAR JOUR
                                            one_cumule_liste_taux.append(one_cumule * 100 / nb_cause_code_cumule)
                                            two_cumule_liste_taux.append(two_cumule * 100 / nb_cause_code_cumule)
                                            three_cumule_liste_taux.append(three_cumule * 100 / nb_cause_code_cumule)
                                            four_cumule_liste_taux.append(four_cumule * 100 / nb_cause_code_cumule)
                                            five_cumule_liste_taux.append(five_cumule * 100 / nb_cause_code_cumule)
                                            six_cumule_liste_taux.append(six_cumule * 100 / nb_cause_code_cumule)
                                            seven_cumule_liste_taux.append(seven_cumule * 100 / nb_cause_code_cumule)
                                            eight_cumule_liste_taux.append(eight_cumule * 100 / nb_cause_code_cumule)
                                            succes_cumule_liste_taux.append(succes_cumule * 100 / nb_cause_code_cumule)
                                            notconnected_cumule_liste_taux.append(
                                                notconnected_cumule * 100 / nb_cause_code_cumule)
                                            caf_cumule_liste_taux.append(caf_cumule * 100 / nb_cause_code_cumule)
                                            connected_cumule_liste_taux.append(
                                                connected_cumule * 100 / nb_cause_code_cumule)
                                            drop_cumule_liste_taux.append(drop_cumule * 100 / nb_cause_code_cumule)
                                            # nb_cause_code_cumule_liste_taux.append(one_cumule*100/nb_cause_code_cumule)

                                            # REINITIALISATION DES VARIABLES CUMULS
                                            one_cumule = 0.0  # COVERAGE LOST
                                            two_cumule = 0.0  # Multi-RAB testing -> potential CORE issue
                                            three_cumule = 0.0  # Low coverage -> potential radio issue
                                            four_cumule = 0.0  # User behaviour
                                            five_cumule = 0.0  # Call Attempt Failure notified by OS -> radio limitation
                                            six_cumule = 0.0  # 4G calls without 2G-3G fallback
                                            seven_cumule = 0.0  # Estimated time to qualify call as CAF
                                            eight_cumule = 0.0  # Force 2G for unknown bearer calls
                                            succes_cumule = 0.0  # SUCCES DE L APPEL -> ETAT PROPRE A ANDROID
                                            notconnected_cumule = 0.0  # ANNULATION PAR L APPELANT  -> CONSIDERE COMME SUCCES
                                            caf_cumule = 0.0  # ECHEC DE L APPEL
                                            connected_cumule = 0.0  # SUCCES DE L APPEL (APPEL EMIS) -> ETAT PROPRE A APPLE -> PAS TRES PRECIS
                                            drop_cumule = 0.0  # COUPURE -> VERIFIE DANS LE CAS DE TERMINAL APPLE
                                            nb_cause_code_cumule = 0.0  # LE TOTAL DES CAUSES CODES


                                        # if var_ajout > 0:
                                        # a faire plus tard

                                    deja_boucle = deja_boucle + 1

                                if (str(row[213]) != 'SFR' and row[213] != 'N/A'):
                                    continue

                                # LES ETATS

                                if (row[167] == ''):  # IOS
                                    nb_cause_code = nb_cause_code + 1
                                    nb_cause_code_cumule = nb_cause_code_cumule + 1
                                    if row[218] == 'Connected':
                                        connected = connected + 1
                                        connected_cumule = connected_cumule + 1
                                    if row[218] == 'CAF':
                                        caf = caf + 1
                                        caf_cumule = caf_cumule + 1
                                    if str(row[218]) == 'Success':
                                        succes = succes + 1
                                        succes_cumule = succes_cumule + 1
                                    if str(row[218]) == 'Not connected':
                                        notconnected = notconnected + 1
                                        notconnected_cumule = notconnected_cumule + 1
                                    if str(row[218]) == 'Drop':
                                        drop = drop + 1
                                        drop_cumule = drop_cumule + 1
                                else:  # ANDROID
                                    nb_cause_code = nb_cause_code + 1
                                    nb_cause_code_cumule = nb_cause_code_cumule + 1
                                    if (a[len(row[167]) - 1] == '1'):
                                        one = one + 1
                                        one_cumule = one_cumule + 1
                                    if (a[len(row[167]) - 1] == '2'):
                                        two = two + 1
                                        two_cumule = two_cumule + 1
                                    if (a[len(row[167]) - 1] == '3'):
                                        three = three + 1
                                        three_cumule = three_cumule + 1
                                    if (a[len(row[167]) - 1] == '4'):
                                        four = four + 1
                                        four_cumule = four_cumule + 1
                                    if (a[len(row[167]) - 1] == '5'):
                                        five = five + 1
                                        five_cumule = five_cumule + 1
                                    if (a[len(row[167]) - 1] == '6'):
                                        six = six + 1
                                        six_cumule = six_cumule + 1
                                    if (a[len(row[167]) - 1] == '7'):
                                        seven = seven + 1
                                        seven_cumule = seven_cumule + 1
                                    if (a[len(row[167]) - 1] == '8'):
                                        eight = eight + 1
                                        eight_cumule = eight_cumule + 1
                                    if str(row[218]) == 'Success':
                                        succes = succes + 1
                                        succes_cumule = succes_cumule + 1
                                    if str(row[218]) == 'Not connected':
                                        notconnected = notconnected + 1
                                        notconnected_cumule = notconnected_cumule + 1

                            """"

                            if nb_cause_code == 0:
                                one = 0.0  # COVERAGE LOST
                                two = 0.0  # Multi-RAB testing -> potential CORE issue
                                three = 0.0  # Low coverage -> potential radio issue
                                four = 0.0  # User behaviour
                                five = 0.0  # Call Attempt Failure notified by OS -> radio limitation
                                six = 0.0  # 4G calls without 2G-3G fallback
                                seven = 0.0  # Estimated time to qualify call as CAF
                                eight = 0.0  # Force 2G for unknown bearer calls
                                succes = 0.0  # SUCCES DE L APPEL -> ETAT PROPRE A ANDROID
                                notconnected = 0.0  # ANNULATION PAR L APPELANT  -> CONSIDERE COMME SUCCES
                                caf = 0.0  # ECHEC DE L APPEL
                                connected = 0.0  # SUCCES DE L APPEL (APPEL EMIS) -> ETAT PROPRE A APPLE -> PAS TRES PRECIS
                                drop = 0.0
                            else:
                                one = (one * 100.0) / nb_cause_code  # COVERAGE LOST
                                two = (two * 100.0) / nb_cause_code  # Multi-RAB testing -> potential CORE issue
                                three = (three * 100.0) / nb_cause_code  # Low coverage -> potential radio issue
                                four = (four * 100.0) / nb_cause_code  # User behaviour
                                five = (five * 100.0) / nb_cause_code  # Call Attempt Failure notified by OS -> radio limitation
                                six = (six * 100.0) / nb_cause_code  # 4G calls without 2G-3G fallback
                                seven = (seven * 100.0) / nb_cause_code  # Estimated time to qualify call as CAF
                                eight = (eight * 100.0) / nb_cause_code  # Force 2G for unknown bearer calls
                                succes = (succes * 100.0) / nb_cause_code  # SUCCES DE L APPEL -> ETAT PROPRE A ANDROID
                                notconnected = (
                                               notconnected * 100.0) / nb_cause_code  # ANNULATION PAR L APPELANT  -> CONSIDERE COMME SUCCES
                                caf = (caf * 100.0) / nb_cause_code  # ECHEC DE L APPEL
                                connected = (
                                            connected * 100.0) / nb_cause_code  # SUCCES DE L APPEL (APPEL EMIS) -> ETAT PROPRE A APPLE -> PAS TRES PRECIS
                                drop = (drop * 100.0) / nb_cause_code

                            """

                            if datef >= date_debut:
                                # print('JE SUIS RENTRE ET LA DATE EST: '+str(b))
                                # AJOUT DES CUMULATIFS DANS LEURS LISTES RESPECTIVES
                                one_cumule_liste.append(one_cumule)
                                # print(one_cumule_liste)
                                # print("\n")
                                two_cumule_liste.append(two_cumule)
                                three_cumule_liste.append(three_cumule)
                                four_cumule_liste.append(four_cumule)
                                five_cumule_liste.append(five_cumule)
                                six_cumule_liste.append(six_cumule)
                                seven_cumule_liste.append(seven_cumule)
                                eight_cumule_liste.append(eight_cumule)
                                succes_cumule_liste.append(succes_cumule)
                                notconnected_cumule_liste.append(notconnected)
                                caf_cumule_liste.append(caf_cumule)
                                connected_cumule_liste.append(connected_cumule)
                                drop_cumule_liste.append(drop_cumule)
                                nb_cause_code_cumule_liste.append(nb_cause_code_cumule)

                                # CALCULES DES TAUX PAR JOUR
                                if nb_cause_code_cumule > 0:
                                    one_cumule_liste_taux.append(one_cumule * 100 / nb_cause_code_cumule)
                                    two_cumule_liste_taux.append(two_cumule * 100 / nb_cause_code_cumule)
                                    three_cumule_liste_taux.append(three_cumule * 100 / nb_cause_code_cumule)
                                    four_cumule_liste_taux.append(four_cumule * 100 / nb_cause_code_cumule)
                                    five_cumule_liste_taux.append(five_cumule * 100 / nb_cause_code_cumule)
                                    six_cumule_liste_taux.append(six_cumule * 100 / nb_cause_code_cumule)
                                    seven_cumule_liste_taux.append(seven_cumule * 100 / nb_cause_code_cumule)
                                    eight_cumule_liste_taux.append(eight_cumule * 100 / nb_cause_code_cumule)
                                    succes_cumule_liste_taux.append(succes_cumule * 100 / nb_cause_code_cumule)
                                    notconnected_cumule_liste_taux.append(
                                        notconnected_cumule * 100 / nb_cause_code_cumule)
                                    caf_cumule_liste_taux.append(caf_cumule * 100 / nb_cause_code_cumule)
                                    connected_cumule_liste_taux.append(connected_cumule * 100 / nb_cause_code_cumule)
                                    drop_cumule_liste_taux.append(drop_cumule * 100 / nb_cause_code_cumule)
                                else:
                                    one_cumule_liste_taux.append(0.0)
                                    two_cumule_liste_taux.append(0.0)
                                    three_cumule_liste_taux.append(0.0)
                                    four_cumule_liste_taux.append(0.0)
                                    five_cumule_liste_taux.append(0.0)
                                    six_cumule_liste_taux.append(0.0)
                                    seven_cumule_liste_taux.append(0.0)
                                    eight_cumule_liste_taux.append(0.0)
                                    succes_cumule_liste_taux.append(0.0)
                                    notconnected_cumule_liste_taux.append(0.0)
                                    caf_cumule_liste_taux.append(0.0)
                                    connected_cumule_liste_taux.append(0.0)
                                    drop_cumule_liste_taux.append(0.0)




                            return one_cumule_liste, two_cumule_liste, three_cumule_liste, four_cumule_liste, five_cumule_liste, six_cumule_liste, seven_cumule_liste, eight_cumule_liste, succes_cumule_liste, notconnected_cumule_liste, caf_cumule_liste, connected_cumule_liste, drop_cumule_liste, nb_cause_code_cumule_liste, date, one, two, three, four, five, six, seven, eight, succes, notconnected, caf, connected, drop, nb_cause_code

                        def exec_causes_codes_par_date(fichier_voix, val1, val2, val3, tech, val5, departement):
                            one_cumul_exe = []
                            two_cumul_exe = []
                            three_cumul_exe = []
                            four_cumul_exe = []
                            five_cumul_exe = []
                            six_cumul_exe = []
                            seven_cumul_exe = []
                            eight_cumul_exe = []
                            succes_cumul_exe = []
                            notconnected_cumul = []
                            caf_cumul_exe = []
                            connected_cumul_exe = []
                            drop_cumul_exe = []
                            date_ex = []
                            nb_cause_code_cumul_liste = []
                            # one_cumul_exe = 0.0
                            # two_cumul_exe = 0.0
                            # three_cumul_exe = 0.0
                            # four_cumul_exe = 0.0
                            # five_cumul_exe = 0.0
                            # six_cumul_exe = 0.0
                            # seven_cumul_exe = 0.0
                            # eight_cumul_exe = 0.0
                            # other_one_cumul_exe = 0.0  # Succes comul
                            # other_two_cumul_exe = 0.0  # Not Connected cumul
                            taux_one = 0.0
                            taux_two = 0.0
                            taux_three = 0.0
                            taux_four = 0.0
                            taux_five = 0.0
                            taux_six = 0.0
                            taux_seven = 0.0
                            taux_eight = 0.0
                            taux_succes = 0.0
                            taux_notconnected = 0.0
                            valeur_totale = 0.0
                            drop_total = 0.0
                            caf_cumul_exe = 0.0
                            taux_caf = 0.0
                            connected_set_exe = []
                            connected_cumul_exe = 0.0
                            caf_set_exe = []
                            drop_exe = []
                            legende = []
                            # date=[]
                            # taux_one ,taux_two ,taux_three ,taux_four ,taux_five ,taux_six ,taux_seven ,taux_eight ,taux_succes ,taux_notconnected,taux_caf,taux_connected
                            # date_ex,one_ex, two_ex, three_ex, four_ex, five_ex, six_ex, seven_ex, eight_ex, succ_ex, not_two_ex, date_ex, one_cumul_exe, two_cumul_exe, three_cumul_exe, four_cumul_exe, five_cumul_exe, six_cumul_exe, seven_cumul_exe, eight_cumul_exe, other_one_cumul_exe, other_two_cumul_exe, drop_exe, drop_total, caf_cumul_exe, caf_set_exe,connected_set_exe,connected_cumul_exe= etat_par_date(reader,taille)
                            one_cumul_exe, two_cumul_exe, three_cumul_exe, four_cumul_exe, five_cumul_exe, six_cumul_exe, seven_cumul_exe, eight_cumul_exe, succes_cumul_exe, notconnected_cumul, caf_cumul_exe, connected_cumul_exe, drop_cumul_liste, nb_cause_code_cumul_liste, date_ex, one, two, three, four, five, six, seven, eight, succes, notconnected, caf, connected, drop, nb_cause_code = causes_codes(fichier_voix, val1, val2, val3, tech, val5, departement)
                            # print(taux_one)
                            # print(len(date_ex))
                            # print(len(other_one_ex))
                            # a=1
                            # b=[]
                            # print(one_cumul_exe)
                            # valeur_totale = connected_cumul_exe+one_cumul_exe + two_cumul_exe + three_cumul_exe + four_cumul_exe + five_cumul_exe + six_cumul_exe + seven_cumul_exe + eight_cumul_exe + other_one_cumul_exe + other_two_cumul_exe
                            date_ex.reverse()
                            taux_one = (one * 100.0) / nb_cause_code  # ERROR
                            taux_two = (two * 100.0) / nb_cause_code
                            taux_three = (three * 100.0) / nb_cause_code
                            taux_four = (four * 100.0) / nb_cause_code
                            taux_five = (five * 100.0) / nb_cause_code
                            taux_six = (six * 100.0) / nb_cause_code
                            taux_seven = (seven * 100.0) / nb_cause_code
                            taux_eight = (eight * 100.0) / nb_cause_code
                            taux_succes = (succes * 100.0) / nb_cause_code
                            taux_notconnected = (notconnected * 100.0) / nb_cause_code
                            taux_connected = (connected * 100.0) / nb_cause_code
                            taux_caf = (caf * 100.0) / nb_cause_code
                            taux_drop = (drop * 100.0) / nb_cause_code
                            colors = ['white', 'purple', 'orange', 'lightgray', 'moccasin', 'lime', 'cyan', 'pink',
                                      'green', 'yellow', 'red']
                            legende = [('Coverage lost: ' + str(round(taux_one, 3)) + '%'),
                                       ('Multi-RAB testing: ' + str(round(taux_two, 3)) + '%'),
                                       ('Low coverage: ' + str(round(taux_three, 3)) + '%'),
                                       ('User behaviour: ' + str(round(taux_four, 3)) + '%'),
                                       ('Call Attempt Failure notified by OS: ' + str(round(taux_five, 3)) + '%'),
                                       ('4G calls without 2G-3G fallback: ' + str(round(taux_six, 3)) + '%'),
                                       (
                                       'Estimated time to qualify call as CAF: ' + str(round(taux_seven, 3)) + '%'),
                                       ('Force 2G for unknown bearer calls: ' + str(round(taux_eight, 3)) + '%'),
                                       ('Succes: ' + str(round(taux_succes, 3)) + '%'),
                                       ('Not Connected: ' + str(round(taux_notconnected, 3)) + '%'),
                                       ('CAF: ' + str(round(taux_caf, 3)) + '%'),
                                       ('Connected: ' + str(round(taux_connected, 3)) + '%'),
                                       ('Drop: ' + str(round(taux_drop, 3)) + '%')]
                            # make a square figure and axes
                            # plt.subplot(plt.subplot2grid((3,3), (0,0)))
                            # plt.figure(1, figsize=(6, 6))
                            # ax = plt.axes([0.1, 0.1, 0.8, 0.8])

                            # The slices will be ordered and plotted counter-clockwise.
                            plt.figure(2)
                            labels_abrev = ['CL', 'MRT', 'LC', 'UB', 'COS', '4GcW', 'ET', 'F2G', 'SC', 'NC', 'CAF',
                                            'CT']
                            labels = 'Coverage lost', 'Multi-RAB testing', 'Low coverage', 'User behaviour', 'Call Attempt Failure notified by OS', '4G calls without 2G-3G fallback', 'Estimated time to qualify call as CAF', 'Force 2G for unknown bearer calls', 'Succes', 'Not Connected', 'caf', 'Connected'
                            fracs = [taux_one, taux_two, taux_three, taux_four, taux_five, taux_six, taux_seven,
                                     taux_eight,
                                     taux_succes,
                                     taux_notconnected, taux_caf, taux_connected]
                            # explode=(0, 0.05, 0, 0)
                            # the_grid = GridSpec(1, 1)
                            # plt.subplot(the_grid[0, 0], aspect=1)
                            # plt.subplot(plt.subplot2grid((2, 5), (0, 0)),rowspan=2, colspan=2)
                            ax3 = plt.subplot2grid((5, 5), (0, 0), rowspan=4, colspan=2)  # PLT SUBLOT
                            plt.pie(fracs, shadow=True, startangle=90,
                                    colors=(colors))  # PLT PIE___________________________

                            plt.legend(legende, loc="best", prop={'size': 7})
                            # plt.legend(fracs, loc="best",prop={'size':10})

                            plt.title(
                                'Etat des communication du ' + date_ex[0] + ' Au ' + date_ex[len(date_ex) - 1]+' TOUT DPTs',
                                bbox={'facecolor': '0.8', 'pad': 5})

                            # print(other_one_ex)
                            b = []
                            a = 1  # decallage date sur les graphes
                            # for i in date_ex:
                            # b.append(a)
                            # a = a + 1
                            # date_ex = re.sub('[-.:]', ',', date_ex)
                            # print('date:  '+date_ex[a]+'------------>')
                            # a = 0
                            # c = 1
                            import datetime as dt
                            # Coverage lost
                            plt.subplot(plt.subplot2grid((5, 5), (0, 2)))  # SUBLOT
                            # print("JE SUIS ICI")
                            x = [dt.datetime.strptime(d, '%Y-%m-%d').date() for d in date_ex]
                            y = one_cumul_exe
                            print (x)
                            print(y)
                            plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y/%m/%d'))
                            plt.gca().xaxis.set_major_locator(mdates.DayLocator())
                            markerline, stemlines, baseline = plt.stem(x, y)  # PLT STEM_____________________
                            plt.setp(markerline, 'markerfacecolor', 'black')
                            plt.setp(baseline, 'color', 'yellow', 'linewidth', 2)
                            plt.xlabel('jour')
                            plt.ylabel('Nb Coverage Lost                                  ')
                            plt.grid(True)
                            plt.title('Coverage Los   t')
                            # plt.gcf().autofmt_xdate()
                            plt.xticks(rotation='vertical', fontsize=8)
                            # plt.show()


                            """
                            # Multi-RAB testing
                            x = [dt.datetime.strptime(d, '%Y-%m-%d').date() for d in date_ex]
                            y = two_ex
                            plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y/%m/%d'))
                            plt.gca().xaxis.set_major_locator(mdates.DayLocator())
                            markerline, stemlines, baseline = plt.stem(x, y)
                            plt.setp(markerline, 'markerfacecolor', 'purple')
                            plt.setp(baseline, 'color', 'yellow', 'linewidth', 2)
                            plt.xlabel('jour')
                            plt.ylabel('Nb Multi-RAB testing')
                            plt.grid(True)
                            plt.title('Multi-RAB testing du ' + date_ex[0] + ' au ' + date_ex[len(date_ex) - 1])
                            plt.gcf().autofmt_xdate()
                            plt.show()

                            plt.subplot(plt.subplot2grid((3, 5), (0, 3)))
                            x = [dt.datetime.strptime(d, '%Y-%m-%d').date() for d in date_ex]
                            y = two_ex
                            plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y/%m/%d'))
                            plt.gca().xaxis.set_major_locator(mdates.DayLocator())
                            markerline, stemlines, baseline=plt.stem(x,three_ex)#PLT STEM_____________________
                            plt.setp(markerline, 'markerfacecolor', 'purple')
                            plt.setp(baseline, 'color', 'yellow', 'linewidth', 2)
                            plt.xlabel('jour')
                            plt.ylabel('Nb Multi-RAB testing')
                            plt.grid(True)
                            plt.title('Multi-RAB testing du '+date_ex[0]+' au '+date_ex[len(date_ex)-1])
                            plt.gcf()
                            #plt.show()
                            """

                            # Low Coverage
                            plt.subplot(plt.subplot2grid((5, 5), (0, 3)))  # SUBLOT
                            x = [dt.datetime.strptime(d, '%Y-%m-%d').date() for d in date_ex]
                            y = three_cumul_exe
                            plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y/%m/%d'))
                            plt.gca().xaxis.set_major_locator(mdates.DayLocator())
                            markerline, stemlines, baseline = plt.stem(x, y)  # PLT STEM_______________________
                            plt.setp(markerline, 'markerfacecolor', 'orange')
                            plt.setp(baseline, 'color', 'yellow', 'linewidth', 2)
                            plt.xlabel('jour')
                            plt.ylabel('Nb Low Coverage')
                            plt.grid(True)
                            plt.title('Low Coverage du ')
                            # plt.gcf().autofmt_xdate()
                            plt.xticks(rotation='vertical', fontsize=8)
                            # plt.show()


                            # user behaviour
                            plt.subplot(plt.subplot2grid((5, 5), (0, 4)))  # SUBLOT
                            x = [dt.datetime.strptime(d, '%Y-%m-%d').date() for d in date_ex]
                            y = four_cumul_exe
                            plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y/%m/%d'))
                            plt.gca().xaxis.set_major_locator(mdates.DayLocator())
                            markerline, stemlines, baseline = plt.stem(x, y)
                            plt.setp(markerline, 'markerfacecolor', 'r')
                            plt.setp(baseline, 'color', 'pink', 'linewidth', 2)
                            plt.xlabel('jour')
                            plt.ylabel('user behaviour')
                            plt.grid(True)
                            plt.title('user behaviour')
                            # plt.gcf().autofmt_xdate()
                            plt.xticks(rotation='vertical', fontsize=8)
                            # plt.show()



                            # Call Attempt Failure notified by OS
                            plt.subplot(plt.subplot2grid((5, 5), (2, 2)))  # SUBLOT
                            x = [dt.datetime.strptime(d, '%Y-%m-%d').date() for d in date_ex]
                            y = five_cumul_exe
                            plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y/%m/%d'))
                            plt.gca().xaxis.set_major_locator(mdates.DayLocator())
                            markerline, stemlines, baseline = plt.stem(x, y)  # PLT STEM____________________
                            plt.setp(markerline, 'markerfacecolor', 'chartreuse')
                            plt.setp(baseline, 'color', 'yellow', 'linewidth', 2)
                            plt.xlabel('jour')
                            plt.ylabel('Nb CAF notif by OS')
                            plt.grid(True)
                            plt.title('CAF notif by OS')
                            plt.xticks(rotation='vertical', fontsize=8)
                            # plt.gcf().autofmt_xdate()
                            # plt.show()


                            # 4G Calls without 2G-3G fallback
                            plt.subplot(plt.subplot2grid((5, 5), (2, 3)))  # SUBLOT
                            x = [dt.datetime.strptime(d, '%Y-%m-%d').date() for d in date_ex]
                            y = six_cumul_exe
                            plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y/%m/%d'))
                            plt.gca().xaxis.set_major_locator(mdates.DayLocator())
                            markerline, stemlines, baseline = plt.stem(x, y)
                            plt.setp(markerline, 'markerfacecolor', 'moccasin')
                            plt.setp(baseline, 'color', 'yellow', 'linewidth', 2)
                            plt.xlabel('jour')
                            # plt.ylabel('Nb 4GCalls/2G-3G fallback')
                            plt.grid(True)
                            plt.title('4GCalls/2G-3G fallback')
                            plt.xticks(rotation='vertical', fontsize=8)
                            # plt.gcf().autofmt_xdate()
                            # plt.show()

                            # Estimated time to qualify calls as CAF
                            plt.subplot(plt.subplot2grid((5, 5), (2, 4)))  # SUBLOT
                            x = [dt.datetime.strptime(d, '%Y-%m-%d').date() for d in date_ex]
                            y = seven_cumul_exe
                            plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y/%m/%d'))
                            plt.gca().xaxis.set_major_locator(mdates.DayLocator())
                            markerline, stemlines, baseline = plt.stem(x, y)
                            plt.setp(markerline, 'markerfacecolor', 'lime')
                            plt.setp(baseline, 'color', 'yellow', 'linewidth', 2)
                            plt.xlabel('jour')
                            # plt.ylabel('Nb CAF')
                            plt.grid(True)
                            plt.title('Estim t qualify calls CAF')
                            plt.xticks(rotation='vertical', fontsize=8)
                            # plt.gcf().autofmt_xdate()
                            # plt.show()


                            # Force 2G for unknown bearer calls
                            plt.subplot(plt.subplot2grid((5, 5), (4, 2)))  # SUBLOT
                            x = [dt.datetime.strptime(d, '%Y-%m-%d').date() for d in date_ex]
                            y = eight_cumul_exe
                            plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y/%m/%d'))
                            plt.gca().xaxis.set_major_locator(mdates.DayLocator())
                            markerline, stemlines, baseline = plt.stem(x, y)
                            plt.setp(markerline, 'markerfacecolor', 'cyan')
                            plt.setp(baseline, 'color', 'yellow', 'linewidth', 2)
                            plt.xlabel('jour')
                            plt.ylabel('Nb Force 2G for unknown bearer calls')
                            plt.grid(True)
                            plt.title('Force 2G f unknown bearer c')
                            plt.xticks(rotation='vertical', fontsize=8)
                            # plt.gcf().autofmt_xdate()
                            # plt.show()


                            # Not Connected
                            plt.subplot(plt.subplot2grid((5, 5), (4, 3)))  # SUBLOT
                            x = [dt.datetime.strptime(d, '%Y-%m-%d').date() for d in date_ex]
                            y = notconnected_cumul
                            plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y/%m/%d'))
                            plt.gca().xaxis.set_major_locator(mdates.DayLocator())
                            markerline, stemlines, baseline = plt.stem(x, y)
                            plt.setp(markerline, 'markerfacecolor', 'red')
                            plt.setp(baseline, 'color', 'yellow', 'linewidth', 2)
                            plt.xlabel('jour')
                            plt.ylabel('Not Connected')
                            plt.grid(True)
                            plt.title('Not Connected')
                            plt.xticks(rotation='vertical', fontsize=8)
                            # plt.gcf().autofmt_xdate()
                            # plt.show()
                            """
                            markerline, stemlines, baseline=plt.stem(b,other_two_ex)
                            plt.setp(markerline, 'markerfacecolor', 'brown')
                            plt.setp(baseline, 'color', 'yellow', 'linewidth', 2)
                            plt.xlabel('jour')
                            plt.ylabel('Not Connected')
                            plt.grid(True)
                            plt.title('Not Connected du '+date_ex[0]+' au '+date_ex[len(date_ex)-1])
                            plt.gcf()
                            plt.show()
                            """

                            # caf_cumule_exe = []
                            # connected_cumule_exe = []
                            # drop_cumule_exe = []
                            # succes
                            plt.subplot(plt.subplot2grid((5, 5), (4, 4)))  # SUBLOT
                            x = [dt.datetime.strptime(d, '%Y-%m-%d').date() for d in date_ex]
                            y = succes_cumul_exe
                            plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y/%m/%d'))
                            plt.gca().xaxis.set_major_locator(mdates.DayLocator())
                            markerline, stemlines, baseline = plt.stem(x, y)
                            plt.setp(markerline, 'markerfacecolor', 'green')
                            plt.setp(baseline, 'color', 'yellow', 'linewidth', 2)
                            plt.xlabel('jour')
                            plt.ylabel('Nb Succes')
                            plt.grid(True)
                            plt.title('SUCCES')
                            plt.xticks(rotation='vertical', fontsize=8)
                            # plt.gcf().autofmt_xdate()
                            figManager = plt.get_current_fig_manager()
                            figManager.window.showMaximized()
                            plt.show()

                        taille = 0.0
                        exec_causes_codes_par_date(reader, val1, val2, val3, tech, val5, departement)



                    causes_sans_filtre_dpt(val1, val2, val3, tech, val5, departement, file)

                else:
                    def causes_avec_filtre_dpt(val1, val2, val3, tech, val5, departement, file):



                        #csvfile = open(fichier_voix, 'r')
                        #f = csv_opner_result.search(str(lefichier.fichier))
                        #reader = csv.reader(csvfile)

                        # fichier = open(f.group(1), 'r')
                        # print(f.group(1))
                        # reader = csv.reader(fichier, delimiter=';')
                        #reader = f.group(1)

                        def taille_csv(fichier):
                            csvfile = open(fichier, 'r')
                            # print(csvfile)
                            reader = csv.reader(csvfile, delimiter=';')
                            k = 0.0
                            for row in reader:
                                k = k + 1
                            return k

                        # taille= taille_csv(reader)

                        def etat_par_date(fichier, val4):
                            date = []
                            etat = []
                            fichier = fichier
                            csvfile = open(fichier, 'r')
                            one_ = []
                            two_ = []
                            three_ = []
                            four_ = []
                            five_ = []
                            six_ = []
                            seven_ = []
                            eight_ = []
                            other_one_ = []  # Succes
                            other_two_ = []  # Not Connected
                            drop_set = []
                            caf_set = []
                            connected_set = []

                            date_cumul = 0
                            etat_cumul = 0
                            one_cumul_ = 0.0
                            two_cumul_ = 0.0
                            three_cumul_ = 0.0
                            four_cumul_ = 0.0
                            five_cumul_ = 0.0
                            six_cumul_ = 0.0
                            seven_cumul_ = 0.0
                            eight_cumul_ = 0.0
                            other_one_cumul_ = 0.0  # Succes comul
                            other_two_cumul_ = 0.0  # Not Connected cumul
                            drop = 0.0
                            drop_cumul = 0.0

                            z = 0
                            one = 0
                            two = 0
                            three = 0
                            four = 0
                            five = 0
                            six = 0
                            seven = 0
                            eight = 0
                            other_one = 0
                            other_two = 0
                            caf = 0.0

                            # Graphes cumules
                            one_cumul = 0
                            two_cumul = 0
                            three_cumul = 0
                            four_cumul = 0
                            five_cumul = 0
                            six_cumul = 0
                            seven_cumul = 0
                            eight_cumul = 0
                            other_one_cumul = 0
                            other_two_cumul = 0
                            caf_cumul = 0
                            connected = 0.0
                            connected_cumul = 0.0

                            a = []
                            b = 0

                            reader = csv.reader(csvfile)

                            date_test = re.compile(r".*([0-9][0-9][0-9][0-9]\-[0-9][0-9]\-[0-9][0-9]) .*"
                                                   , re.IGNORECASE)
                            verif_error = re.compile(r"\(.+\)\,\(.+\),([0-8])"
                                                     , re.IGNORECASE)

                            b = ''
                            z = False
                            l = 0
                            g = 0
                            k = 0
                            row_check = 0.0
                            var_ajout = 0.0
                            # for row in reader:
                            # print(row[0])

                            for row in reader:
                                # print(row[1])
                                row_check = row_check + 1
                                # f = date_test.search(row[1])
                                if row[1] in 'date_utc_a' or 'date_utc_a' in row[1]:
                                    continue
                                # print(row[1])
                                f = row[1][0:10]
                                # print(f)
                                a = row[161]
                                if f == 'Date UTC A':
                                    continue
                                if row_check == val4:
                                    b = str(f)
                                    one_.append(one)
                                    two_.append(two)
                                    three_.append(three)
                                    four_.append(four)
                                    five_.append(five)
                                    six_.append(six)
                                    seven_.append(seven)
                                    eight_.append(eight)
                                    other_one_.append(other_one)
                                    other_two_.append(other_two)
                                    drop_set.append(drop)
                                    caf_set.append(caf)
                                    connected_set.append(connected)
                                    break

                                if f and b != str(f) and f != 'Date UTC A':
                                    # print('f est la:  '+f)

                                    date.append(f)
                                    b = str(f)

                                    if var_ajout > 0:
                                        k = k + 1
                                        b = str(f)
                                        one_.append(one)
                                        two_.append(two)
                                        three_.append(three)
                                        four_.append(four)
                                        five_.append(five)
                                        six_.append(six)
                                        seven_.append(seven)
                                        eight_.append(eight)
                                        other_one_.append(other_one)
                                        other_two_.append(other_two)
                                        drop_set.append(drop)
                                        caf_set.append(caf)
                                        connected_set.append(connected)
                                        one = 0.0
                                        two = 0.0
                                        three = 0.0
                                        four = 0.0
                                        five = 0.0
                                        six = 0.0
                                        seven = 0.0
                                        eight = 0.0
                                        other_one = 0.0
                                        other_two = 0.0
                                        drop = 0.0
                                        caf = 0.0
                                        l = l + 1
                                    var_ajout = var_ajout + 1
                                    # Graphes independants
                                    if (row[161] == ''):  # IOS
                                        if row[209] == 'Connected':
                                            connected = connected + 1
                                            connected_cumul = connected_cumul + 1
                                            z = True
                                            continue
                                        if row[209] == 'CAF':
                                            caf = caf + 1
                                            caf_cumul = caf_cumul + 1
                                            one = one + 1
                                            one_cumul = one_cumul + 1
                                            z = True
                                            continue
                                        if str(row[209]) == 'Success':
                                            other_one = other_one + 1
                                            other_one_cumul = other_one_cumul + 1
                                            z = True
                                            continue
                                        if str(row[209]) == 'Not connected':
                                            other_two = other_two + 1
                                            other_two_cumul = other_two_cumul + 1
                                            z = True
                                            continue
                                        if str(row[209]) == 'Drop':
                                            drop = drop + 1
                                            drop_cumul = drop_cumul + 1
                                            continue




                                    else:
                                        if (a[len(row[161]) - 1] == '1'):
                                            if row[209] == 'CAF':
                                                caf = caf + 1
                                                caf_cumul = caf_cumul + 1
                                                one = one + 1
                                                one_cumul = one_cumul + 1
                                                z = True
                                                continue
                                            else:
                                                one = one + 1
                                                one_cumul = one_cumul + 1
                                                drop = drop + 1
                                                drop_cumul = drop_cumul + 1
                                                continue
                                        if (a[len(row[161]) - 1] == '2'):
                                            two = two + 1
                                            two_cumul = two_cumul + 1
                                            drop = drop + 1
                                            drop_cumul = drop_cumul + 1
                                            z = True
                                            continue
                                        if (a[len(row[161]) - 1] == '3'):
                                            three = three + 1
                                            three_cumul = three_cumul + 1
                                            drop_cumul = drop_cumul + 1
                                            z = True
                                            continue
                                        if (a[len(row[161]) - 1] == '4'):
                                            four = four + 1
                                            four_cumul = four_cumul + 1
                                            drop = drop + 1
                                            drop_cumul = drop_cumul + 1
                                            z = True
                                            continue
                                        if (a[len(row[161]) - 1] == '5'):
                                            five = five + 1
                                            five_cumul = five_cumul + 1
                                            caf = caf + 1
                                            caf_cumul = caf_cumul + 1
                                            z = True
                                            continue
                                        if (a[len(row[161]) - 1] == '6'):
                                            six = six + 1
                                            six_cumul = six_cumul + 1
                                            drop = drop + 1
                                            drop_cumul = drop_cumul + 1
                                            z = True
                                            continue
                                        if (a[len(row[161]) - 1] == '7'):
                                            seven = seven + 1
                                            seven_cumul = seven_cumul + 1
                                            drop = drop + 1
                                            drop_cumul = drop_cumul + 1
                                            z = True
                                            continue
                                        if (a[len(row[161]) - 1] == '8'):
                                            eight = eight + 1
                                            eight_cumul = eight_cumul + 1
                                            drop = drop + 1
                                            drop_cumul = drop_cumul + 1
                                            z = True
                                            continue
                                        if str(row[209]) == 'Success':
                                            other_one = other_one + 1
                                            other_one_cumul = other_one_cumul + 1
                                            z = True
                                            continue
                                        if str(row[209]) == 'Not connected':
                                            other_two = other_two + 1
                                            other_two_cumul = other_two_cumul + 1
                                            z = True
                                            continue


                                else:
                                    if (row[161] == ''):  # IOS
                                        if row[209] == 'Connected':
                                            connected = connected + 1
                                            connected_cumul = connected_cumul + 1
                                            z = True
                                            continue
                                        if row[209] == 'CAF':
                                            caf = caf + 1
                                            caf_cumul = caf_cumul + 1
                                            one = one + 1
                                            one_cumul = one_cumul + 1
                                            z = True
                                            continue
                                        if str(row[209]) == 'Success':
                                            other_one = other_one + 1
                                            other_one_cumul = other_one_cumul + 1
                                            z = True
                                            continue
                                        if str(row[209]) == 'Not connected':
                                            other_two = other_two + 1
                                            other_two_cumul = other_two_cumul + 1
                                            z = True
                                            continue
                                        if str(row[209]) == 'Drop':
                                            drop = drop + 1
                                            drop_cumul = drop_cumul + 1
                                            continue
                                    else:

                                        if (a[len(row[161]) - 1] == '1'):
                                            if row[209] == 'CAF':
                                                caf = caf + 1
                                                caf_cumul = caf_cumul + 1
                                                continue
                                            else:
                                                one = one + 1
                                                one_cumul = one_cumul + 1
                                                drop = drop + 1
                                                drop_cumul = drop_cumul + 1
                                                z = True
                                                continue
                                        if (a[len(row[161]) - 1] == '2'):
                                            two = two + 1
                                            two_cumul = two_cumul + 1
                                            drop = drop + 1
                                            drop_cumul = drop_cumul + 1
                                            z = True
                                            continue
                                        if (a[len(row[161]) - 1] == '3'):
                                            three = three + 1
                                            three_cumul = three_cumul + 1
                                            drop = drop + 1
                                            drop_cumul = drop_cumul + 1
                                            z = True
                                            continue
                                        if (a[len(row[161]) - 1] == '4'):
                                            four = four + 1
                                            four_cumul = four_cumul + 1
                                            drop = drop + 1
                                            drop_cumul = drop_cumul + 1
                                            z = True
                                            continue
                                        if (a[len(row[161]) - 1] == '5'):
                                            five = five + 1
                                            five_cumul = five_cumul + 1
                                            caf = caf + 1
                                            caf_cumul = caf_cumul + 1
                                            z = True
                                            continue
                                        if (a[len(row[161]) - 1] == '6'):
                                            six = six + 1
                                            six_cumul = six_cumul + 1
                                            drop = drop + 1
                                            drop_cumul = drop_cumul + 1
                                            z = True
                                            continue
                                        if (a[len(row[161]) - 1] == '7'):
                                            seven = seven + 1
                                            seven_cumul = seven_cumul + 1
                                            drop = drop + 1
                                            drop_cumul = drop_cumul + 1
                                            z = True
                                            continue
                                        if (a[len(row[161]) - 1] == '8'):
                                            eight = eight + 1
                                            eight_cumul = eight_cumul + 1
                                            drop = drop + 1
                                            drop_cumul = drop_cumul + 1
                                            z = True
                                            continue
                                        if str(row[209]) == 'Success':
                                            other_one = other_one + 1
                                            other_one_cumul = other_one_cumul + 1
                                            drop = drop + 1
                                            z = True
                                            continue
                                            # print(other_one)
                                        if str(row[209]) == 'Not connected':
                                            other_two = other_two + 1
                                            other_two_cumul = other_two_cumul + 1
                                            z = True
                                            continue

                            caf_cumul = caf_cumul
                            connected_cumul = connected_cumul
                            one_cumul_ = one_cumul
                            two_cumul_ = two_cumul
                            three_cumul_ = three_cumul
                            four_cumul_ = four_cumul
                            five_cumul_ = five_cumul
                            six_cumul_ = six_cumul
                            seven_cumul_ = seven_cumul
                            eight_cumul_ = eight_cumul
                            other_one_cumul_ = other_one_cumul
                            other_two_cumul_ = other_two_cumul
                            drop_cumul = drop_cumul

                            # print(date)

                            return one_, two_, three_, four_, five_, six_, seven_, eight_, other_one_, other_two_, date, one_cumul_, two_cumul_, three_cumul_, four_cumul_, five_cumul_, six_cumul_, seven_cumul_, eight_cumul_, other_one_cumul_, other_two_cumul_, drop_set, drop_cumul, caf_cumul, caf_set, connected_set, connected_cumul

                        csv_opner_result = re.compile(r".*'(.*:.*)'\, .*", re.IGNORECASE)
                        fichier_voix = file
                        f = csv_opner_result.search(str(fichier_voix))
                        reader = f.group(1)


                        def causes_codes(fichier_voix, val1, val2, val3, tech, val5, departement):

                            fichier_voix = fichier_voix
                            date = []
                            csvfile = open(fichier_voix, 'r')
                            # reader = csv.reader(csvfile, delimiter=';')
                            # reader = csv.reader(csvfile, delimiter=';')
                            reader = csv.reader(csvfile)

                            #csv_opner_result = re.compile(r".*'(.*:.*)'\, .*", re.IGNORECASE)
                            #f = csv_opner_result.search(str(file))

                            # fichier = open(f.group(1), 'r')
                            # print(f.group(1))
                            # reader = csv.reader(fichier, delimiter=';')
                            #reader = f.group(1)

                            ci_lac_eci_tac = []

                            # FICHIER G2R
                            csv_opner_result_g2r = re.compile(r".*'(.*:.*\/).*\.csv'\, .*", re.IGNORECASE)
                            fichier_g2r = csv_opner_result_g2r.search(str(csvfile))
                            fichier_g2r = str(fichier_g2r.group(1)) + 'g2r.csv'
                            fichier_g2r = open(fichier_g2r, 'r')
                            fichier_g2r_reader = csv.reader(fichier_g2r, delimiter=';')
                            # print('ON EST DANS LA DATA '+departement)
                            departement_code_postal = {'1': 'Ain', '2': 'Aisne', '3': 'Allier',
                                                       '4': 'Alpes_de_Haute-Provence', '5': 'Hautes-Alpes',
                                                       '6': 'Alpes-Maritimes', '7': 'Ardeche', '8': 'Ardennes',
                                                       '9': 'Ariege', '10': 'Aube', '11': 'Aude', '12': 'Aveyron',
                                                       '13': 'Bouches_du_Rhone', '14': 'Calvados', '15': 'Cantal',
                                                       '16': 'Charente', '17': 'Charente_Maritime', '18': 'Cher',
                                                       '19': 'Correze', '21': 'Cote_dOr', '22': 'Cotes_dArmor',
                                                       '23': 'Creuse', '24': 'Dordogne', '25': 'Doubs', '26': 'Drome',
                                                       '27': 'Eure', '28': 'Eure-et-Loir', '29': 'Finistere',
                                                       '30': 'Gard',
                                                       '31': 'Haute-Garonne', '32': 'Gers', '33': 'Gironde',
                                                       '34': 'Herault', '35': 'Ille-et-Vilaine', '36': 'Indre',
                                                       '37': 'Indre-et-Loire', '38': 'Isere', '39': 'Jura',
                                                       '40': 'Landes',
                                                       '41': 'Loir-et-Cher', '42': 'Loire', '43': 'Haute-Loire',
                                                       '44': 'Loire-Atlantique', '45': 'Loiret', '46': 'Lot',
                                                       '47': 'Lot-et-Garonne', '48': 'Lozere', '49': 'Maine-et-Loire',
                                                       '50': 'Manche', '51': 'Marne', '52': 'Haute-Marne',
                                                       '53': 'Mayenne',
                                                       '54': 'Meurthe-et-Moselle', '55': 'Meuse', '56': 'Morbihan',
                                                       '57': 'Moselle', '58': 'Nievre', '59': 'Nord', '60': 'Oise',
                                                       '61': 'Orne', '62': 'Pas-de-Calais', '63': 'Puy-de-Dome',
                                                       '64': 'Pyrenees-Atlantiques', '65': 'Hautes-Pyrenees',
                                                       '66': 'Pyrenees-Orientales', '67': 'Bas-Rhin', '68': 'Haut-Rhin',
                                                       '69': 'Rhone', '70': 'Haute-Saone', '71': 'Saone-et-Loire',
                                                       '72': 'Sarthe', '73': 'Savoie', '74': 'Haute-Savoie',
                                                       '75': 'Paris',
                                                       '76': 'Seine-Maritime', '77': 'Seine-et-Marne', '78': 'Yvelines',
                                                       '79': 'Deux-Sevres', '80': 'Somme', '81': 'Tarn',
                                                       '82': 'Tarn-et-Garonne', '83': 'Var', '84': 'Vaucluse',
                                                       '85': 'Vendee', '86': 'Vienne', '87': 'Haute-Vienne',
                                                       '88': 'Vosges',
                                                       '89': 'Yonne', '90': 'Territoire-de-Belfort', '91': 'Essonne',
                                                       '92': 'Hauts-de-Seine', '93': 'Seine-St-Denis',
                                                       '94': 'Val-de-Marne',
                                                       '95': 'Val-dOise', '2A': 'Corse_du_Sud', '2B': 'Haute-Corse'}

                            g2r_code_postal = ''
                            departement_eci_tac_ci_lac = ''
                            fichier_ci_lac_decriture = open("Departement_CI_Lac_eCI_Tac.txt", "w")

                            # fichier_ci_lac_decriture.write()
                            fichier_ci_lac_decriture.write(
                                "\n______________________________________________________________________________________________")
                            fichier_ci_lac_decriture.write(
                                "\n\n\n         VOICI LA LISTE DES DEPARTEMENT ET LEUR CORRESPONDANCE EN CI-LAC/eCI-TAC \n\n\n")
                            fichier_ci_lac_decriture.write(
                                "______________________________________________________________________________________________\n\n\n")

                            file.close()
                            ci_lac_eci_tac_intermediaire = []
                            ci_lac_eci_tac_intermediaire_var = ''
                            for row in fichier_g2r_reader:
                                ci = row[21]
                                lac = row[22]
                                num_g2r = row[18]
                                region = row[34]
                                eci = row[38]
                                tac = row[40]

                                if eci:
                                    if len(num_g2r) == 5:
                                        g2r_code_postal = num_g2r[:1]
                                        if g2r_code_postal in departement_code_postal:
                                            departement_eci_tac_ci_lac = departement_code_postal[
                                                                             g2r_code_postal] + ' ' + eci + '-' + tac
                                            ci_lac_eci_tac.append(departement_eci_tac_ci_lac)
                                            fichier_ci_lac_decriture.write('\n\n')
                                            fichier_ci_lac_decriture.write(departement_eci_tac_ci_lac)
                                            if str(departement_code_postal[g2r_code_postal]) in str(departement):
                                                ci_lac_eci_tac_intermediaire.append(
                                                    departement_code_postal[g2r_code_postal] + ' ' + eci + '-' + tac)

                                    if len(num_g2r) == 6:
                                        g2r_code_postal = num_g2r[:2]
                                        if g2r_code_postal in departement_code_postal:
                                            departement_eci_tac_ci_lac = departement_code_postal[
                                                                             g2r_code_postal] + ' ' + eci + '-' + tac
                                            ci_lac_eci_tac.append(departement_eci_tac_ci_lac)
                                            fichier_ci_lac_decriture.write('\n\n')
                                            fichier_ci_lac_decriture.write(departement_eci_tac_ci_lac)

                                            if str(departement_code_postal[g2r_code_postal]) in str(departement):
                                                ci_lac_eci_tac_intermediaire.append(
                                                    departement_code_postal[g2r_code_postal] + ' ' + eci + '-' + tac)

                                else:
                                    if ci:
                                        if len(num_g2r) == 5:
                                            g2r_code_postal = num_g2r[:1]

                                            if g2r_code_postal in departement_code_postal:
                                                departement_eci_tac_ci_lac = departement_code_postal[
                                                                                 g2r_code_postal] + ' ' + ci + '-' + lac
                                                ci_lac_eci_tac.append(departement_eci_tac_ci_lac)
                                                fichier_ci_lac_decriture.write('\n\n')
                                                fichier_ci_lac_decriture.write(departement_eci_tac_ci_lac)
                                                if str(departement_code_postal[g2r_code_postal]) in str(departement):
                                                    ci_lac_eci_tac_intermediaire.append(departement_code_postal[
                                                                                            g2r_code_postal] + ' ' + eci + '-' + tac)

                                        if len(num_g2r) == 6:
                                            g2r_code_postal = num_g2r[:2]
                                            if g2r_code_postal in departement_code_postal:
                                                departement_eci_tac_ci_lac = departement_code_postal[
                                                                                 g2r_code_postal] + ' ' + ci + '-' + lac
                                                ci_lac_eci_tac.append(departement_eci_tac_ci_lac)
                                                fichier_ci_lac_decriture.write('\n\n')
                                                fichier_ci_lac_decriture.write(departement_eci_tac_ci_lac)
                                                # print(departement_code_postal[g2r_code_postal] +' ET VOICI TON DPT:  ' +departement)
                                                # print(departement_code_postal[g2r_code_postal]+' et ton dpt: '+departement)
                                                # if (departement_code_postal[g2r_code_postal]=='Paris'):
                                                # print(departement_code_postal[g2r_code_postal])
                                                # if (departement_code_postal[g2r_code_postal]==' Paris'):
                                                # print(departement_code_postal[g2r_code_postal]+' *')
                                                # if (departement_code_postal[g2r_code_postal]=='Paris '):
                                                # print(departement_code_postal[g2r_code_postal]+' **')
                                                # if (departement_code_postal[g2r_code_postal]==' Paris '):
                                                # print(departement_code_postal[g2r_code_postal]+' * *')
                                                # if (departement_code_postal[g2r_code_postal] in 'Paris'):
                                                # print(departement_code_postal[g2r_code_postal]+'   IN  ')
                                                # print(str(departement_code_postal[g2r_code_postal] in departement)+'  -->  '+departement_code_postal[g2r_code_postal]+' IN '+departement)
                                                if departement_code_postal[g2r_code_postal] in departement:
                                                    ci_lac_eci_tac_intermediaire_var = departement_code_postal[
                                                                                           g2r_code_postal] + ' ' + eci + '-' + tac
                                                    ci_lac_eci_tac_intermediaire.append(
                                                        ci_lac_eci_tac_intermediaire_var)

                                                    # print(departement)

                                                    # for elem in ci_lac_eci_tac:
                                                    # fichier_ci_lac_decriture.write('\n\n')
                                                    # fichier_ci_lac_decriture.write(elem)
                            fichier_ci_lac_decriture.close()

                            import datetime
                            # format_date_generale = "%Y-%m-%d"
                            date_debut = datetime.datetime.strptime(val1, "%Y-%m-%d")
                            date_fin = datetime.datetime.strptime(val2, "%Y-%m-%d")


                            # CAUSES CODES
                            one = 0.0  # COVERAGE LOST
                            two = 0.0  # Multi-RAB testing -> potential CORE issue
                            three = 0.0  # Low coverage -> potential radio issue
                            four = 0.0  # User behaviour
                            five = 0.0  # Call Attempt Failure notified by OS -> radio limitation
                            six = 0.0  # 4G calls without 2G-3G fallback
                            seven = 0.0  # Estimated time to qualify call as CAF
                            eight = 0.0  # Force 2G for unknown bearer calls
                            succes = 0.0  # SUCCES DE L APPEL -> ETAT PROPRE A ANDROID
                            notconnected = 0.0  # ANNULATION PAR L APPELANT  -> CONSIDERE COMME SUCCES
                            caf = 0.0  # ECHEC DE L APPEL
                            connected = 0.0  # SUCCES DE L APPEL (APPEL EMIS) -> ETAT PROPRE A APPLE -> PAS TRES PRECIS
                            drop = 0.0  # COUPURE -> VERIFIE DANS LE CAS DE TERMINAL APPLE

                            # LES CUMULATIFS EN LISTE
                            one_cumule_liste = []  # COVERAGE LOST
                            two_cumule_liste = []  # Multi-RAB testing -> potential CORE issue
                            three_cumule_liste = []  # Low coverage -> potential radio issue
                            four_cumule_liste = []  # User behaviour
                            five_cumule_liste = []  # Call Attempt Failure notified by OS -> radio limitation
                            six_cumule_liste = []  # 4G calls without 2G-3G fallback
                            seven_cumule_liste = []  # Estimated time to qualify call as CAF
                            eight_cumule_liste = []  # Force 2G for unknown bearer calls
                            succes_cumule_liste = []  # SUCCES DE L APPEL -> ETAT PROPRE A ANDROID
                            notconnected_cumule_liste = []  # ANNULATION PAR L APPELANT  -> CONSIDERE COMME SUCCES
                            caf_cumule_liste = []  # ECHEC DE L APPEL
                            connected_cumule_liste = []  # SUCCES DE L APPEL (APPEL EMIS) -> ETAT PROPRE A APPLE -> PAS TRES PRECIS
                            drop_cumule_liste = []  # COUPURE -> VERIFIE DANS LE CAS DE TERMINAL APPLE
                            nb_cause_code_cumule_liste = []  # LE TOTAL DES CAUSES CODES

                            # LES CUMULATIFS EN LISTE DE TAUX
                            one_cumule_liste_taux = []  # COVERAGE LOST
                            two_cumule_liste_taux = []  # Multi-RAB testing -> potential CORE issue
                            three_cumule_liste_taux = []  # Low coverage -> potential radio issue
                            four_cumule_liste_taux = []  # User behaviour
                            five_cumule_liste_taux = []  # Call Attempt Failure notified by OS -> radio limitation
                            six_cumule_liste_taux = []  # 4G calls without 2G-3G fallback
                            seven_cumule_liste_taux = []  # Estimated time to qualify call as CAF
                            eight_cumule_liste_taux = []  # Force 2G for unknown bearer calls
                            succes_cumule_liste_taux = []  # SUCCES DE L APPEL -> ETAT PROPRE A ANDROID
                            notconnected_cumule_liste_taux = []  # ANNULATION PAR L APPELANT  -> CONSIDERE COMME SUCCES
                            caf_cumule_liste_taux = []  # ECHEC DE L APPEL
                            connected_cumule_liste_taux = []  # SUCCES DE L APPEL (APPEL EMIS) -> ETAT PROPRE A APPLE -> PAS TRES PRECIS
                            drop_cumule_liste_taux = []  # COUPURE -> VERIFIE DANS LE CAS DE TERMINAL APPLE
                            nb_cause_code_cumule_liste_taux = []  # LE TOTAL DES CAUSES CODES

                            # LES CUMULATIFS EN VARIABLES
                            one_cumule = 0.0  # COVERAGE LOST
                            two_cumule = 0.0  # Multi-RAB testing -> potential CORE issue
                            three_cumule = 0.0  # Low coverage -> potential radio issue
                            four_cumule = 0.0  # User behaviour
                            five_cumule = 0.0  # Call Attempt Failure notified by OS -> radio limitation
                            six_cumule = 0.0  # 4G calls without 2G-3G fallback
                            seven_cumule = 0.0  # Estimated time to qualify call as CAF
                            eight_cumule = 0.0  # Force 2G for unknown bearer calls
                            succes_cumule = 0.0  # SUCCES DE L APPEL -> ETAT PROPRE A ANDROID
                            notconnected_cumule = 0.0  # ANNULATION PAR L APPELANT  -> CONSIDERE COMME SUCCES
                            caf_cumule = 0.0  # ECHEC DE L APPEL
                            connected_cumule = 0.0  # SUCCES DE L APPEL (APPEL EMIS) -> ETAT PROPRE A APPLE -> PAS TRES PRECIS
                            drop_cumule = 0.0  # COUPURE -> VERIFIE DANS LE CAS DE TERMINAL APPLE
                            nb_cause_code_cumule = 0.0  # LE TOTAL DES CAUSES CODES

                            # Nombre total
                            nb_cause_code = 0.0  # LE TOTAL DES CAUSES CODES

                            b = ''
                            deja_boucle = 0.0
                            for row in reader:
                                dqaid_row = row[0]
                                f = row[1][0:10]
                                ci_voix = row[42]
                                lac_voix = row[43]
                                row_volte = row[59]
                                cs = row[204]
                                tecc = row[215]
                                a = row[167]  # CAUSE CODE
                                if f == 'date_utc_a':
                                    continue
                                datef = datetime.datetime.strptime(f, "%Y-%m-%d")
                                if datef > date_fin:
                                    continue

                                if datef < date_debut:
                                    # print('JE SUIS RENTRE ET LA DATE EST: '+str(b))
                                    # AJOUT DES CUMULATIFS DANS LEURS LISTES RESPECTIVES
                                    one_cumule_liste.append(one_cumule)
                                    # print(one_cumule_liste)
                                    # print("\n")
                                    two_cumule_liste.append(two_cumule)
                                    three_cumule_liste.append(three_cumule)
                                    four_cumule_liste.append(four_cumule)
                                    five_cumule_liste.append(five_cumule)
                                    six_cumule_liste.append(six_cumule)
                                    seven_cumule_liste.append(seven_cumule)
                                    eight_cumule_liste.append(eight_cumule)
                                    succes_cumule_liste.append(succes_cumule)
                                    notconnected_cumule_liste.append(notconnected)
                                    caf_cumule_liste.append(caf_cumule)
                                    connected_cumule_liste.append(connected_cumule)
                                    drop_cumule_liste.append(drop_cumule)
                                    nb_cause_code_cumule_liste.append(nb_cause_code_cumule)

                                    # CALCULES DES TAUX PAR JOUR
                                    if nb_cause_code_cumule>0:
                                        one_cumule_liste_taux.append(one_cumule * 100 / nb_cause_code_cumule)
                                        two_cumule_liste_taux.append(two_cumule * 100 / nb_cause_code_cumule)
                                        three_cumule_liste_taux.append(three_cumule * 100 / nb_cause_code_cumule)
                                        four_cumule_liste_taux.append(four_cumule * 100 / nb_cause_code_cumule)
                                        five_cumule_liste_taux.append(five_cumule * 100 / nb_cause_code_cumule)
                                        six_cumule_liste_taux.append(six_cumule * 100 / nb_cause_code_cumule)
                                        seven_cumule_liste_taux.append(seven_cumule * 100 / nb_cause_code_cumule)
                                        eight_cumule_liste_taux.append(eight_cumule * 100 / nb_cause_code_cumule)
                                        succes_cumule_liste_taux.append(succes_cumule * 100 / nb_cause_code_cumule)
                                        notconnected_cumule_liste_taux.append(notconnected_cumule * 100 / nb_cause_code_cumule)
                                        caf_cumule_liste_taux.append(caf_cumule * 100 / nb_cause_code_cumule)
                                        connected_cumule_liste_taux.append(connected_cumule * 100 / nb_cause_code_cumule)
                                        drop_cumule_liste_taux.append(drop_cumule * 100 / nb_cause_code_cumule)
                                    else:
                                        one_cumule_liste_taux.append(0.0)
                                        two_cumule_liste_taux.append(0.0)
                                        three_cumule_liste_taux.append(0.0)
                                        four_cumule_liste_taux.append(0.0)
                                        five_cumule_liste_taux.append(0.0)
                                        six_cumule_liste_taux.append(0.0)
                                        seven_cumule_liste_taux.append(0.0)
                                        eight_cumule_liste_taux.append(0.0)
                                        succes_cumule_liste_taux.append(0.0)
                                        notconnected_cumule_liste_taux.append(0.0)
                                        caf_cumule_liste_taux.append(0.0)
                                        connected_cumule_liste_taux.append(0.0)
                                        drop_cumule_liste_taux.append(0.0)
                                    # nb_cause_code_cumule_liste_taux.append(one_cumule*100/nb_cause_code_cumule)

                                    break

                                row[221] = '_'.join(row[221].split(" "))

                                if (departement + ' ' + ci_voix + '-' + lac_voix) not in ci_lac_eci_tac_intermediaire:
                                    continue
                                if (str(row[213]) != 'SFR' and row[213] != 'N/A'):
                                    continue
                                if str(row[221]) in val3 and row[220] in val5 and tecc in tech:

                                    if b != str(f):
                                        date.append(str(f))
                                        b = str(f)

                                        if deja_boucle > 0:

                                            # print('JE SUIS RENTRE ET LA DATE EST: '+str(b))
                                            # AJOUT DES CUMULATIFS DANS LEURS LISTES RESPECTIVES
                                            one_cumule_liste.append(one_cumule)
                                            # print(one_cumule_liste)
                                            # print("\n")
                                            two_cumule_liste.append(two_cumule)
                                            three_cumule_liste.append(three_cumule)
                                            four_cumule_liste.append(four_cumule)
                                            five_cumule_liste.append(five_cumule)
                                            six_cumule_liste.append(six_cumule)
                                            seven_cumule_liste.append(seven_cumule)
                                            eight_cumule_liste.append(eight_cumule)
                                            succes_cumule_liste.append(succes_cumule)
                                            notconnected_cumule_liste.append(notconnected)
                                            caf_cumule_liste.append(caf_cumule)
                                            connected_cumule_liste.append(connected_cumule)
                                            drop_cumule_liste.append(drop_cumule)
                                            nb_cause_code_cumule_liste.append(nb_cause_code_cumule)

                                            # CALCULES DES TAUX PAR JOUR
                                            one_cumule_liste_taux.append(one_cumule * 100 / nb_cause_code_cumule)
                                            two_cumule_liste_taux.append(two_cumule * 100 / nb_cause_code_cumule)
                                            three_cumule_liste_taux.append(three_cumule * 100 / nb_cause_code_cumule)
                                            four_cumule_liste_taux.append(four_cumule * 100 / nb_cause_code_cumule)
                                            five_cumule_liste_taux.append(five_cumule * 100 / nb_cause_code_cumule)
                                            six_cumule_liste_taux.append(six_cumule * 100 / nb_cause_code_cumule)
                                            seven_cumule_liste_taux.append(seven_cumule * 100 / nb_cause_code_cumule)
                                            eight_cumule_liste_taux.append(eight_cumule * 100 / nb_cause_code_cumule)
                                            succes_cumule_liste_taux.append(succes_cumule * 100 / nb_cause_code_cumule)
                                            notconnected_cumule_liste_taux.append(
                                                notconnected_cumule * 100 / nb_cause_code_cumule)
                                            caf_cumule_liste_taux.append(caf_cumule * 100 / nb_cause_code_cumule)
                                            connected_cumule_liste_taux.append(
                                                connected_cumule * 100 / nb_cause_code_cumule)
                                            drop_cumule_liste_taux.append(drop_cumule * 100 / nb_cause_code_cumule)
                                            # nb_cause_code_cumule_liste_taux.append(one_cumule*100/nb_cause_code_cumule)

                                            # REINITIALISATION DES VARIABLES CUMULS
                                            one_cumule = 0.0  # COVERAGE LOST
                                            two_cumule = 0.0  # Multi-RAB testing -> potential CORE issue
                                            three_cumule = 0.0  # Low coverage -> potential radio issue
                                            four_cumule = 0.0  # User behaviour
                                            five_cumule = 0.0  # Call Attempt Failure notified by OS -> radio limitation
                                            six_cumule = 0.0  # 4G calls without 2G-3G fallback
                                            seven_cumule = 0.0  # Estimated time to qualify call as CAF
                                            eight_cumule = 0.0  # Force 2G for unknown bearer calls
                                            succes_cumule = 0.0  # SUCCES DE L APPEL -> ETAT PROPRE A ANDROID
                                            notconnected_cumule = 0.0  # ANNULATION PAR L APPELANT  -> CONSIDERE COMME SUCCES
                                            caf_cumule = 0.0  # ECHEC DE L APPEL
                                            connected_cumule = 0.0  # SUCCES DE L APPEL (APPEL EMIS) -> ETAT PROPRE A APPLE -> PAS TRES PRECIS
                                            drop_cumule = 0.0  # COUPURE -> VERIFIE DANS LE CAS DE TERMINAL APPLE
                                            nb_cause_code_cumule = 0.0  # LE TOTAL DES CAUSES CODES


                                        # if var_ajout > 0:
                                        # a faire plus tard

                                    deja_boucle = deja_boucle + 1

                                if (str(row[213]) != 'SFR' and row[213] != 'N/A'):
                                    continue

                                # LES ETATS

                                if (row[167] == ''):  # IOS
                                    nb_cause_code = nb_cause_code + 1
                                    nb_cause_code_cumule = nb_cause_code_cumule + 1
                                    if row[218] == 'Connected':
                                        connected = connected + 1
                                        connected_cumule = connected_cumule + 1
                                    if row[218] == 'CAF':
                                        caf = caf + 1
                                        caf_cumule = caf_cumule + 1
                                    if str(row[218]) == 'Success':
                                        succes = succes + 1
                                        succes_cumule = succes_cumule + 1
                                    if str(row[218]) == 'Not connected':
                                        notconnected = notconnected + 1
                                        notconnected_cumule = notconnected_cumule + 1
                                    if str(row[218]) == 'Drop':
                                        drop = drop + 1
                                        drop_cumule = drop_cumule + 1
                                else:  # ANDROID
                                    nb_cause_code = nb_cause_code + 1
                                    nb_cause_code_cumule = nb_cause_code_cumule + 1
                                    if (a[len(row[167]) - 1] == '1'):
                                        one = one + 1
                                        one_cumule = one_cumule + 1
                                    if (a[len(row[167]) - 1] == '2'):
                                        two = two + 1
                                        two_cumule = two_cumule + 1
                                    if (a[len(row[167]) - 1] == '3'):
                                        three = three + 1
                                        three_cumule = three_cumule + 1
                                    if (a[len(row[167]) - 1] == '4'):
                                        four = four + 1
                                        four_cumule = four_cumule + 1
                                    if (a[len(row[167]) - 1] == '5'):
                                        five = five + 1
                                        five_cumule = five_cumule + 1
                                    if (a[len(row[167]) - 1] == '6'):
                                        six = six + 1
                                        six_cumule = six_cumule + 1
                                    if (a[len(row[167]) - 1] == '7'):
                                        seven = seven + 1
                                        seven_cumule = seven_cumule + 1
                                    if (a[len(row[167]) - 1] == '8'):
                                        eight = eight + 1
                                        eight_cumule = eight_cumule + 1
                                    if str(row[218]) == 'Success':
                                        succes = succes + 1
                                        succes_cumule = succes_cumule + 1
                                    if str(row[218]) == 'Not connected':
                                        notconnected = notconnected + 1
                                        notconnected_cumule = notconnected_cumule + 1

                            """"

                            if nb_cause_code == 0:
                                one = 0.0  # COVERAGE LOST
                                two = 0.0  # Multi-RAB testing -> potential CORE issue
                                three = 0.0  # Low coverage -> potential radio issue
                                four = 0.0  # User behaviour
                                five = 0.0  # Call Attempt Failure notified by OS -> radio limitation
                                six = 0.0  # 4G calls without 2G-3G fallback
                                seven = 0.0  # Estimated time to qualify call as CAF
                                eight = 0.0  # Force 2G for unknown bearer calls
                                succes = 0.0  # SUCCES DE L APPEL -> ETAT PROPRE A ANDROID
                                notconnected = 0.0  # ANNULATION PAR L APPELANT  -> CONSIDERE COMME SUCCES
                                caf = 0.0  # ECHEC DE L APPEL
                                connected = 0.0  # SUCCES DE L APPEL (APPEL EMIS) -> ETAT PROPRE A APPLE -> PAS TRES PRECIS
                                drop = 0.0
                            else:
                                one = (one * 100.0) / nb_cause_code  # COVERAGE LOST
                                two = (two * 100.0) / nb_cause_code  # Multi-RAB testing -> potential CORE issue
                                three = (three * 100.0) / nb_cause_code  # Low coverage -> potential radio issue
                                four = (four * 100.0) / nb_cause_code  # User behaviour
                                five = (five * 100.0) / nb_cause_code  # Call Attempt Failure notified by OS -> radio limitation
                                six = (six * 100.0) / nb_cause_code  # 4G calls without 2G-3G fallback
                                seven = (seven * 100.0) / nb_cause_code  # Estimated time to qualify call as CAF
                                eight = (eight * 100.0) / nb_cause_code  # Force 2G for unknown bearer calls
                                succes = (succes * 100.0) / nb_cause_code  # SUCCES DE L APPEL -> ETAT PROPRE A ANDROID
                                notconnected = (
                                               notconnected * 100.0) / nb_cause_code  # ANNULATION PAR L APPELANT  -> CONSIDERE COMME SUCCES
                                caf = (caf * 100.0) / nb_cause_code  # ECHEC DE L APPEL
                                connected = (
                                            connected * 100.0) / nb_cause_code  # SUCCES DE L APPEL (APPEL EMIS) -> ETAT PROPRE A APPLE -> PAS TRES PRECIS
                                drop = (drop * 100.0) / nb_cause_code

                            """

                            if datef >= date_debut:
                                # print('JE SUIS RENTRE ET LA DATE EST: '+str(b))
                                # AJOUT DES CUMULATIFS DANS LEURS LISTES RESPECTIVES
                                one_cumule_liste.append(one_cumule)
                                # print(one_cumule_liste)
                                # print("\n")
                                two_cumule_liste.append(two_cumule)
                                three_cumule_liste.append(three_cumule)
                                four_cumule_liste.append(four_cumule)
                                five_cumule_liste.append(five_cumule)
                                six_cumule_liste.append(six_cumule)
                                seven_cumule_liste.append(seven_cumule)
                                eight_cumule_liste.append(eight_cumule)
                                succes_cumule_liste.append(succes_cumule)
                                notconnected_cumule_liste.append(notconnected)
                                caf_cumule_liste.append(caf_cumule)
                                connected_cumule_liste.append(connected_cumule)
                                drop_cumule_liste.append(drop_cumule)
                                nb_cause_code_cumule_liste.append(nb_cause_code_cumule)

                                # CALCULES DES TAUX PAR JOUR
                                if nb_cause_code_cumule > 0:
                                    one_cumule_liste_taux.append(one_cumule * 100 / nb_cause_code_cumule)
                                    two_cumule_liste_taux.append(two_cumule * 100 / nb_cause_code_cumule)
                                    three_cumule_liste_taux.append(three_cumule * 100 / nb_cause_code_cumule)
                                    four_cumule_liste_taux.append(four_cumule * 100 / nb_cause_code_cumule)
                                    five_cumule_liste_taux.append(five_cumule * 100 / nb_cause_code_cumule)
                                    six_cumule_liste_taux.append(six_cumule * 100 / nb_cause_code_cumule)
                                    seven_cumule_liste_taux.append(seven_cumule * 100 / nb_cause_code_cumule)
                                    eight_cumule_liste_taux.append(eight_cumule * 100 / nb_cause_code_cumule)
                                    succes_cumule_liste_taux.append(succes_cumule * 100 / nb_cause_code_cumule)
                                    notconnected_cumule_liste_taux.append(
                                        notconnected_cumule * 100 / nb_cause_code_cumule)
                                    caf_cumule_liste_taux.append(caf_cumule * 100 / nb_cause_code_cumule)
                                    connected_cumule_liste_taux.append(connected_cumule * 100 / nb_cause_code_cumule)
                                    drop_cumule_liste_taux.append(drop_cumule * 100 / nb_cause_code_cumule)
                                else:
                                    one_cumule_liste_taux.append(0.0)
                                    two_cumule_liste_taux.append(0.0)
                                    three_cumule_liste_taux.append(0.0)
                                    four_cumule_liste_taux.append(0.0)
                                    five_cumule_liste_taux.append(0.0)
                                    six_cumule_liste_taux.append(0.0)
                                    seven_cumule_liste_taux.append(0.0)
                                    eight_cumule_liste_taux.append(0.0)
                                    succes_cumule_liste_taux.append(0.0)
                                    notconnected_cumule_liste_taux.append(0.0)
                                    caf_cumule_liste_taux.append(0.0)
                                    connected_cumule_liste_taux.append(0.0)
                                    drop_cumule_liste_taux.append(0.0)




                            return one_cumule_liste, two_cumule_liste, three_cumule_liste, four_cumule_liste, five_cumule_liste, six_cumule_liste, seven_cumule_liste, eight_cumule_liste, succes_cumule_liste, notconnected_cumule_liste, caf_cumule_liste, connected_cumule_liste, drop_cumule_liste, nb_cause_code_cumule_liste, date, one, two, three, four, five, six, seven, eight, succes, notconnected, caf, connected, drop, nb_cause_code

                        def exec_causes_codes_par_date(fichier_voix, val1, val2, val3, tech, val5, departement):
                            one_cumul_exe = []
                            two_cumul_exe = []
                            three_cumul_exe = []
                            four_cumul_exe = []
                            five_cumul_exe = []
                            six_cumul_exe = []
                            seven_cumul_exe = []
                            eight_cumul_exe = []
                            succes_cumul_exe = []
                            notconnected_cumul = []
                            caf_cumul_exe = []
                            connected_cumul_exe = []
                            drop_cumul_exe = []
                            date_ex = []
                            nb_cause_code_cumul_liste = []
                            # one_cumul_exe = 0.0
                            # two_cumul_exe = 0.0
                            # three_cumul_exe = 0.0
                            # four_cumul_exe = 0.0
                            # five_cumul_exe = 0.0
                            # six_cumul_exe = 0.0
                            # seven_cumul_exe = 0.0
                            # eight_cumul_exe = 0.0
                            # other_one_cumul_exe = 0.0  # Succes comul
                            # other_two_cumul_exe = 0.0  # Not Connected cumul
                            taux_one = 0.0
                            taux_two = 0.0
                            taux_three = 0.0
                            taux_four = 0.0
                            taux_five = 0.0
                            taux_six = 0.0
                            taux_seven = 0.0
                            taux_eight = 0.0
                            taux_succes = 0.0
                            taux_notconnected = 0.0
                            valeur_totale = 0.0
                            drop_total = 0.0
                            caf_cumul_exe = 0.0
                            taux_caf = 0.0
                            connected_set_exe = []
                            connected_cumul_exe = 0.0
                            caf_set_exe = []
                            drop_exe = []
                            legende = []
                            # date=[]
                            # taux_one ,taux_two ,taux_three ,taux_four ,taux_five ,taux_six ,taux_seven ,taux_eight ,taux_succes ,taux_notconnected,taux_caf,taux_connected
                            # date_ex,one_ex, two_ex, three_ex, four_ex, five_ex, six_ex, seven_ex, eight_ex, succ_ex, not_two_ex, date_ex, one_cumul_exe, two_cumul_exe, three_cumul_exe, four_cumul_exe, five_cumul_exe, six_cumul_exe, seven_cumul_exe, eight_cumul_exe, other_one_cumul_exe, other_two_cumul_exe, drop_exe, drop_total, caf_cumul_exe, caf_set_exe,connected_set_exe,connected_cumul_exe= etat_par_date(reader,taille)
                            one_cumul_exe, two_cumul_exe, three_cumul_exe, four_cumul_exe, five_cumul_exe, six_cumul_exe, seven_cumul_exe, eight_cumul_exe, succes_cumul_exe, notconnected_cumul, caf_cumul_exe, connected_cumul_exe, drop_cumul_liste, nb_cause_code_cumul_liste, date_ex, one, two, three, four, five, six, seven, eight, succes, notconnected, caf, connected, drop, nb_cause_code = causes_codes(fichier_voix, val1, val2, val3, tech, val5, departement)
                            # print(taux_one)
                            # print(len(date_ex))
                            # print(len(other_one_ex))
                            # a=1
                            # b=[]
                            # print(one_cumul_exe)
                            # valeur_totale = connected_cumul_exe+one_cumul_exe + two_cumul_exe + three_cumul_exe + four_cumul_exe + five_cumul_exe + six_cumul_exe + seven_cumul_exe + eight_cumul_exe + other_one_cumul_exe + other_two_cumul_exe
                            date_ex.reverse()
                            taux_one = (one * 100.0) / nb_cause_code  # ERROR
                            taux_two = (two * 100.0) / nb_cause_code
                            taux_three = (three * 100.0) / nb_cause_code
                            taux_four = (four * 100.0) / nb_cause_code
                            taux_five = (five * 100.0) / nb_cause_code
                            taux_six = (six * 100.0) / nb_cause_code
                            taux_seven = (seven * 100.0) / nb_cause_code
                            taux_eight = (eight * 100.0) / nb_cause_code
                            taux_succes = (succes * 100.0) / nb_cause_code
                            taux_notconnected = (notconnected * 100.0) / nb_cause_code
                            taux_connected = (connected * 100.0) / nb_cause_code
                            taux_caf = (caf * 100.0) / nb_cause_code
                            taux_drop = (drop * 100.0) / nb_cause_code
                            colors = ['white', 'purple', 'orange', 'lightgray', 'moccasin', 'lime', 'cyan', 'pink',
                                      'green', 'yellow', 'red']
                            legende = [('Coverage lost: ' + str(round(taux_one, 3)) + '%'),
                                       ('Multi-RAB testing: ' + str(round(taux_two, 3)) + '%'),
                                       ('Low coverage: ' + str(round(taux_three, 3)) + '%'),
                                       ('User behaviour: ' + str(round(taux_four, 3)) + '%'),
                                       ('Call Attempt Failure notified by OS: ' + str(round(taux_five, 3)) + '%'),
                                       ('4G calls without 2G-3G fallback: ' + str(round(taux_six, 3)) + '%'),
                                       (
                                       'Estimated time to qualify call as CAF: ' + str(round(taux_seven, 3)) + '%'),
                                       ('Force 2G for unknown bearer calls: ' + str(round(taux_eight, 3)) + '%'),
                                       ('Succes: ' + str(round(taux_succes, 3)) + '%'),
                                       ('Not Connected: ' + str(round(taux_notconnected, 3)) + '%'),
                                       ('CAF: ' + str(round(taux_caf, 3)) + '%'),
                                       ('Connected: ' + str(round(taux_connected, 3)) + '%'),
                                       ('Drop: ' + str(round(taux_drop, 3)) + '%')]
                            # make a square figure and axes
                            # plt.subplot(plt.subplot2grid((3,3), (0,0)))
                            # plt.figure(1, figsize=(6, 6))
                            # ax = plt.axes([0.1, 0.1, 0.8, 0.8])

                            # The slices will be ordered and plotted counter-clockwise.
                            plt.figure(2)
                            labels_abrev = ['CL', 'MRT', 'LC', 'UB', 'COS', '4GcW', 'ET', 'F2G', 'SC', 'NC', 'CAF',
                                            'CT']
                            labels = 'Coverage lost', 'Multi-RAB testing', 'Low coverage', 'User behaviour', 'Call Attempt Failure notified by OS', '4G calls without 2G-3G fallback', 'Estimated time to qualify call as CAF', 'Force 2G for unknown bearer calls', 'Succes', 'Not Connected', 'caf', 'Connected'
                            fracs = [taux_one, taux_two, taux_three, taux_four, taux_five, taux_six, taux_seven,
                                     taux_eight,
                                     taux_succes,
                                     taux_notconnected, taux_caf, taux_connected]
                            # explode=(0, 0.05, 0, 0)
                            # the_grid = GridSpec(1, 1)
                            # plt.subplot(the_grid[0, 0], aspect=1)
                            # plt.subplot(plt.subplot2grid((2, 5), (0, 0)),rowspan=2, colspan=2)
                            ax3 = plt.subplot2grid((5, 5), (0, 0), rowspan=4, colspan=2)  # PLT SUBLOT
                            plt.pie(fracs, shadow=True, startangle=90,
                                    colors=(colors))  # PLT PIE___________________________

                            plt.legend(legende, loc="best", prop={'size': 7})
                            # plt.legend(fracs, loc="best",prop={'size':10})

                            plt.title(
                                'Etat des communication du ' + date_ex[0] + ' Au ' + date_ex[len(date_ex) - 1]+' DPT: '+departement,
                                bbox={'facecolor': '0.8', 'pad': 5})

                            # print(other_one_ex)
                            b = []
                            a = 1  # decallage date sur les graphes
                            # for i in date_ex:
                            # b.append(a)
                            # a = a + 1
                            # date_ex = re.sub('[-.:]', ',', date_ex)
                            # print('date:  '+date_ex[a]+'------------>')
                            # a = 0
                            # c = 1
                            import datetime as dt
                            # Coverage lost
                            plt.subplot(plt.subplot2grid((5, 5), (0, 2)))  # SUBLOT
                            # print("JE SUIS ICI")
                            x = [dt.datetime.strptime(d, '%Y-%m-%d').date() for d in date_ex]
                            y = one_cumul_exe
                            print (x)
                            print(y)
                            plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y/%m/%d'))
                            plt.gca().xaxis.set_major_locator(mdates.DayLocator())
                            markerline, stemlines, baseline = plt.stem(x, y)  # PLT STEM_____________________
                            plt.setp(markerline, 'markerfacecolor', 'black')
                            plt.setp(baseline, 'color', 'yellow', 'linewidth', 2)
                            plt.xlabel('jour')
                            plt.ylabel('Nb Coverage Lost                                  ')
                            plt.grid(True)
                            plt.title('Coverage Los   t')
                            # plt.gcf().autofmt_xdate()
                            plt.xticks(rotation='vertical', fontsize=8)
                            # plt.show()


                            """
                            # Multi-RAB testing
                            x = [dt.datetime.strptime(d, '%Y-%m-%d').date() for d in date_ex]
                            y = two_ex
                            plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y/%m/%d'))
                            plt.gca().xaxis.set_major_locator(mdates.DayLocator())
                            markerline, stemlines, baseline = plt.stem(x, y)
                            plt.setp(markerline, 'markerfacecolor', 'purple')
                            plt.setp(baseline, 'color', 'yellow', 'linewidth', 2)
                            plt.xlabel('jour')
                            plt.ylabel('Nb Multi-RAB testing')
                            plt.grid(True)
                            plt.title('Multi-RAB testing du ' + date_ex[0] + ' au ' + date_ex[len(date_ex) - 1])
                            plt.gcf().autofmt_xdate()
                            plt.show()

                            plt.subplot(plt.subplot2grid((3, 5), (0, 3)))
                            x = [dt.datetime.strptime(d, '%Y-%m-%d').date() for d in date_ex]
                            y = two_ex
                            plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y/%m/%d'))
                            plt.gca().xaxis.set_major_locator(mdates.DayLocator())
                            markerline, stemlines, baseline=plt.stem(x,three_ex)#PLT STEM_____________________
                            plt.setp(markerline, 'markerfacecolor', 'purple')
                            plt.setp(baseline, 'color', 'yellow', 'linewidth', 2)
                            plt.xlabel('jour')
                            plt.ylabel('Nb Multi-RAB testing')
                            plt.grid(True)
                            plt.title('Multi-RAB testing du '+date_ex[0]+' au '+date_ex[len(date_ex)-1])
                            plt.gcf()
                            #plt.show()
                            """

                            # Low Coverage
                            plt.subplot(plt.subplot2grid((5, 5), (0, 3)))  # SUBLOT
                            x = [dt.datetime.strptime(d, '%Y-%m-%d').date() for d in date_ex]
                            y = three_cumul_exe
                            plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y/%m/%d'))
                            plt.gca().xaxis.set_major_locator(mdates.DayLocator())
                            markerline, stemlines, baseline = plt.stem(x, y)  # PLT STEM_______________________
                            plt.setp(markerline, 'markerfacecolor', 'orange')
                            plt.setp(baseline, 'color', 'yellow', 'linewidth', 2)
                            plt.xlabel('jour')
                            plt.ylabel('Nb Low Coverage')
                            plt.grid(True)
                            plt.title('Low Coverage du ')
                            # plt.gcf().autofmt_xdate()
                            plt.xticks(rotation='vertical', fontsize=8)
                            # plt.show()


                            # user behaviour
                            plt.subplot(plt.subplot2grid((5, 5), (0, 4)))  # SUBLOT
                            x = [dt.datetime.strptime(d, '%Y-%m-%d').date() for d in date_ex]
                            y = four_cumul_exe
                            plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y/%m/%d'))
                            plt.gca().xaxis.set_major_locator(mdates.DayLocator())
                            markerline, stemlines, baseline = plt.stem(x, y)
                            plt.setp(markerline, 'markerfacecolor', 'r')
                            plt.setp(baseline, 'color', 'pink', 'linewidth', 2)
                            plt.xlabel('jour')
                            plt.ylabel('user behaviour')
                            plt.grid(True)
                            plt.title('user behaviour')
                            # plt.gcf().autofmt_xdate()
                            plt.xticks(rotation='vertical', fontsize=8)
                            # plt.show()



                            # Call Attempt Failure notified by OS
                            plt.subplot(plt.subplot2grid((5, 5), (2, 2)))  # SUBLOT
                            x = [dt.datetime.strptime(d, '%Y-%m-%d').date() for d in date_ex]
                            y = five_cumul_exe
                            plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y/%m/%d'))
                            plt.gca().xaxis.set_major_locator(mdates.DayLocator())
                            markerline, stemlines, baseline = plt.stem(x, y)  # PLT STEM____________________
                            plt.setp(markerline, 'markerfacecolor', 'chartreuse')
                            plt.setp(baseline, 'color', 'yellow', 'linewidth', 2)
                            plt.xlabel('jour')
                            plt.ylabel('Nb CAF notif by OS')
                            plt.grid(True)
                            plt.title('CAF notif by OS')
                            plt.xticks(rotation='vertical', fontsize=8)
                            # plt.gcf().autofmt_xdate()
                            # plt.show()


                            # 4G Calls without 2G-3G fallback
                            plt.subplot(plt.subplot2grid((5, 5), (2, 3)))  # SUBLOT
                            x = [dt.datetime.strptime(d, '%Y-%m-%d').date() for d in date_ex]
                            y = six_cumul_exe
                            plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y/%m/%d'))
                            plt.gca().xaxis.set_major_locator(mdates.DayLocator())
                            markerline, stemlines, baseline = plt.stem(x, y)
                            plt.setp(markerline, 'markerfacecolor', 'moccasin')
                            plt.setp(baseline, 'color', 'yellow', 'linewidth', 2)
                            plt.xlabel('jour')
                            # plt.ylabel('Nb 4GCalls/2G-3G fallback')
                            plt.grid(True)
                            plt.title('4GCalls/2G-3G fallback')
                            plt.xticks(rotation='vertical', fontsize=8)
                            # plt.gcf().autofmt_xdate()
                            # plt.show()

                            # Estimated time to qualify calls as CAF
                            plt.subplot(plt.subplot2grid((5, 5), (2, 4)))  # SUBLOT
                            x = [dt.datetime.strptime(d, '%Y-%m-%d').date() for d in date_ex]
                            y = seven_cumul_exe
                            plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y/%m/%d'))
                            plt.gca().xaxis.set_major_locator(mdates.DayLocator())
                            markerline, stemlines, baseline = plt.stem(x, y)
                            plt.setp(markerline, 'markerfacecolor', 'lime')
                            plt.setp(baseline, 'color', 'yellow', 'linewidth', 2)
                            plt.xlabel('jour')
                            # plt.ylabel('Nb CAF')
                            plt.grid(True)
                            plt.title('Estim t qualify calls CAF')
                            plt.xticks(rotation='vertical', fontsize=8)
                            # plt.gcf().autofmt_xdate()
                            # plt.show()


                            # Force 2G for unknown bearer calls
                            plt.subplot(plt.subplot2grid((5, 5), (4, 2)))  # SUBLOT
                            x = [dt.datetime.strptime(d, '%Y-%m-%d').date() for d in date_ex]
                            y = eight_cumul_exe
                            plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y/%m/%d'))
                            plt.gca().xaxis.set_major_locator(mdates.DayLocator())
                            markerline, stemlines, baseline = plt.stem(x, y)
                            plt.setp(markerline, 'markerfacecolor', 'cyan')
                            plt.setp(baseline, 'color', 'yellow', 'linewidth', 2)
                            plt.xlabel('jour')
                            plt.ylabel('Nb Force 2G for unknown bearer calls')
                            plt.grid(True)
                            plt.title('Force 2G f unknown bearer c')
                            plt.xticks(rotation='vertical', fontsize=8)
                            # plt.gcf().autofmt_xdate()
                            # plt.show()


                            # Not Connected
                            plt.subplot(plt.subplot2grid((5, 5), (4, 3)))  # SUBLOT
                            x = [dt.datetime.strptime(d, '%Y-%m-%d').date() for d in date_ex]
                            y = notconnected_cumul
                            plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y/%m/%d'))
                            plt.gca().xaxis.set_major_locator(mdates.DayLocator())
                            markerline, stemlines, baseline = plt.stem(x, y)
                            plt.setp(markerline, 'markerfacecolor', 'red')
                            plt.setp(baseline, 'color', 'yellow', 'linewidth', 2)
                            plt.xlabel('jour')
                            plt.ylabel('Not Connected')
                            plt.grid(True)
                            plt.title('Not Connected')
                            plt.xticks(rotation='vertical', fontsize=8)
                            # plt.gcf().autofmt_xdate()
                            # plt.show()
                            """
                            markerline, stemlines, baseline=plt.stem(b,other_two_ex)
                            plt.setp(markerline, 'markerfacecolor', 'brown')
                            plt.setp(baseline, 'color', 'yellow', 'linewidth', 2)
                            plt.xlabel('jour')
                            plt.ylabel('Not Connected')
                            plt.grid(True)
                            plt.title('Not Connected du '+date_ex[0]+' au '+date_ex[len(date_ex)-1])
                            plt.gcf()
                            plt.show()
                            """

                            # caf_cumule_exe = []
                            # connected_cumule_exe = []
                            # drop_cumule_exe = []
                            # succes
                            plt.subplot(plt.subplot2grid((5, 5), (4, 4)))  # SUBLOT
                            x = [dt.datetime.strptime(d, '%Y-%m-%d').date() for d in date_ex]
                            y = succes_cumul_exe
                            plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y/%m/%d'))
                            plt.gca().xaxis.set_major_locator(mdates.DayLocator())
                            markerline, stemlines, baseline = plt.stem(x, y)
                            plt.setp(markerline, 'markerfacecolor', 'green')
                            plt.setp(baseline, 'color', 'yellow', 'linewidth', 2)
                            plt.xlabel('jour')
                            plt.ylabel('Nb Succes')
                            plt.grid(True)
                            plt.title('SUCCES')
                            plt.xticks(rotation='vertical', fontsize=8)
                            # plt.gcf().autofmt_xdate()
                            figManager = plt.get_current_fig_manager()
                            figManager.window.showMaximized()
                            plt.show()

                        taille = 0.0
                        exec_causes_codes_par_date(reader, val1, val2, val3, tech, val5, departement)

                    causes_avec_filtre_dpt(val1, val2, val3, tech, val5, departement, file)

            # __________________________________---Choix date---________________________________________-------___________________________________
            global value1  # DATE DEPART
            value1 = combo.get()
            # print("value 1:  "+value1)

            global value2  # DATE ARRIVEE
            value2 = combo2.get()

            global val5  # OS
            val5 = combo3.get()

            global departement
            departement = combo4.get()
            # print(value1)
            # print(value2)
            # print(val5)
            # print(departement)

            # print("value 3:  " + value3)
            if val5 == 'ALL':
                val5 = ['iOS', 'Android', 'Unknown', '']
            if val5 == 'Android':
                val5 = ['Android']
            if val5 == 'iOS':
                val5 = ['iOS']
            if val5 == 'AUTRES':
                val5 = ['']
            if val5 == 'Unknown':
                val5 = ['Unknown']

            if value1 and value2 and val5 and departement:

                # print("JE SUIS RENTREEEEEEE")
                global csvfile
                # csvfile = ouvrir_fich()
                # csvfile=lefichier.fichier
                # -------------------------------------------------------------------------------DEBUT--------------------------------------------------------------------------------
                # __________________________________--------------************--------------EX FONCTION SELECT-------------------*****************-----------___________________________
                # -------------------------------------------------------------------------------DEBUT--------------------------------------------------------------------------------

                import tkinter as tk
                # try:
                # import Tix as tix  # Python27
                # except ImportError:
                # import tkinter.tix as tix  # Python31+

                # choix1.geometry("+50+150")
                # choix.geometry("500x600+20+50")
                s = ttk.Style()
                global frame2
                techno_ = []
                techno_.append('ALL')
                techno_.append('2G')
                techno_.append('3G')
                techno_.append('4G')
                techno_.append('WIFI')
                techno_.append('INCONNU')

                # choix.mainloop()
                # Label(ttk.Frame, text="SCENARIO                    TECHNO").pack(side='top')
                # SCENARIO
                s.configure('My.TFrame', background='black', label='SFR', Scrollbar=True)
                frame = ttk.Frame(choix, padding=(70, 70, 160, 160), style='My.TFrame')
                frame.grid(column=4, row=15, sticky=(N, S, E, W))

                # Label(choix, text="    SCENARIOS", font=("Helvetica", 15, "bold"), fg='white', bg='black').pack()
                # Label(choix, text="            TECHNO", font=("Helvetica", 15, "bold"), fg='white', bg='black').pack()
                # labelframe.pack(fill="both", expand="yes")

                # TECNO
                frame2 = ttk.Frame(choix, padding=(70, 70, 160, 160), style='My.TFrame')
                frame2.grid(column=5, row=15, sticky=(N, S, E, W))

                # BOUTON RECHERCHE
                frame4 = ttk.Frame(choix, padding=(183, 0, 0, 0), style='My.TFrame')
                frame4.grid(column=4, row=14, sticky=(N, S, E, W))

                # RECHERCHE
                frame3 = ttk.Frame(choix, padding=(70, 10, 0, 0), style='My.TFrame')
                frame3.grid(column=4, row=13, sticky=(N, S, E, W))

                # frame.config(bg='black')

                # s1 = Scrollbar(frame)
                # l1 = Tk.Listbox(f1)

                # choix = Tk()
                # print(str(csvfile))


                # csvfile = ouvrir_fich()
                # csv_opner_result = re.compile(r".*u'(D:.*)'\, .*", re.IGNORECASE)
                # f = csv_opner_result.search(str(csvfile))

                # reader = f.group(1)
                # print(reader)

                # csvfile = open(reader, 'r')
                # print(csvfile)
                # reader = csv.reader(csvfile, delimiter=';')
                # reader = csv.reader(csvfile)

                # date_test = re.compile(r".*([0-9][0-9][0-9][0-9]\-[0-9][0-9]\-[0-9][0-9]) .*", re.IGNORECASE)
                # scenario_test = re.compile(r".*('Scenario Label \[campaign\_label\]').*", re.IGNORECASE)

                b = ''
                z = False
                l = 0
                g = 0
                k = 0
                d = ''
                tec = ''
                # scenario = []
                # techno_ = []
                # date = []
                k = []
                # RECUPERATION DATE ET SCENARIO


                scenario = list(scenario)
                # print(scenario)
                # print(len(scenario))
                # b = str(f.group(1)) #RECUPERATION DE LA DATE
                # scrollbar = Scrollbar(choix)


                date.reverse()
                for item in scenario:
                    scenario[scenario.index(item)] = '_'.join(item.split(" "))

                makeitastring = ' '.join(map(str, scenario))
                # print(scenario)
                # print(scenario)
                # print(len(scenario))

                makeitastring = (makeitastring)
                # print(makeitastring)
                # scrollbar2 = Scrollbar(frame, orient=VERTICAL)
                # scrollbar2.grid(column=2, row=2, sticky='EW')

                # _____-************************-__________________________________________________________________________________________________________________________________
                # SELECTION DES SCENARIOS

                # LES SCENARIOS
                global valores
                valores = StringVar()
                valores1 = tuple(scenario)
                valores.set(valores1)
                # print(valores)
                # print(valores1)

                # LA TECNO
                global valores2
                valores2 = StringVar()
                valores3 = tuple(techno_)
                valores2.set(valores3)

                # SCENARIO
                lstbox = Listbox(frame, listvariable=valores, selectmode=MULTIPLE, width=30, height=10,
                                 fg='OrangeRed2', bg='black')
                lstbox.grid(column=0, row=3, columnspan=2)
                # vbar = Scrollbar(lstbox, orient=VERTICAL)
                # lstbox.config(yscrollcommand=vbar.set)
                # vbar.config(command=lstbox.yview)

                # lstbox.pack(side=LEFT, fill=BOTH, expand=1)
                # lstbox.grid(column=0, row=3)
                # vbar.grid(column=0, sticky=N+S)
                # scrollbar.config(command=lstbox.yview)
                # scrollbar.pack(side=RIGHT, fill=Y)

                # RECHERCHE
                v = StringVar()
                e = Entry(frame3, textvariable=v)
                e.grid(column=0, row=3)
                # e.grid_bbox(0, 3,0,2)
                e.pack()
                e.focus_set()

                # v.set("a default value")
                lstbox2 = Listbox(frame2, listvariable=valores2, selectmode=MULTIPLE, width=30, height=10, fg='red',
                                  bg='black')
                lstbox2.grid(column=0, row=3, columnspan=2)

                # ___________________________________________________HEREEEEEE##################################################################**********
                def callback(frame, frame2, scenario, techno_, lstbox):

                    text = v.get()
                    v.set(text)
                    # print(text)
                    # frame.destroy()
                    # frame2.destroy()

                    import tkinter as tk
                    # try:
                    # import Tix as tix  # Python27
                    # except ImportError:
                    # import tkinter.tix as tix  # Python31+

                    # choix1.geometry("+50+150")
                    # choix.geometry("500x600+20+50")
                    s = ttk.Style()

                    # SCENARIO
                    s.configure('My.TFrame', background='black', label='SFR')
                    frame = ttk.Frame(choix, padding=(70, 70, 160, 160), style='My.TFrame')
                    frame.grid(column=4, row=15, sticky=(N, S, E, W))

                    # TECNO
                    frame2 = ttk.Frame(choix, padding=(70, 70, 160, 160), style='My.TFrame')
                    frame2.grid(column=5, row=15, sticky=(N, S, E, W))

                    # LES SCENARIOS
                    global valores
                    valores = StringVar()
                    valores1 = tuple(scenario)
                    valores.set(valores1)

                    # LA TECNO
                    global valores2
                    valores2 = StringVar()
                    valores3 = tuple(techno_)
                    valores2.set(valores3)
                    # print(text.lower())
                    # print(text.upper())
                    for elementes in scenario:
                        # if elementes in text or text in elementes or elementes in text.lower() or text.lower() in elementes or elementes in text.upper() or text.upper():
                        if text in elementes or text.lower() in elementes or text.upper() in elementes:
                            # print(elementes)
                            lstbox.insert(0, elementes)

                    # SCENARIO
                    lstbox = Listbox(frame, listvariable=valores, selectmode=MULTIPLE, width=30, height=10,
                                     fg='green',
                                     bg='black')
                    lstbox.grid(column=0, row=3, columnspan=2)
                    lstbox2 = Listbox(frame2, listvariable=valores2, selectmode=MULTIPLE, width=30, height=10,
                                      fg='red',
                                      bg='black')
                    lstbox2.grid(column=0, row=3, columnspan=2)
                    lstbox.update()





                    # print(v)

                # b = Button(choix, text="get", width=10, command=callback)
                # b.pack()

                btn3 = ttk.Button(frame4, text='Rechercher',
                                  command=lambda: callback(frame, frame2, scenario, techno_, lstbox))
                btn3.grid(column=2, row=2)

                # lstbox3 = Listbox(frame3, listvariable=valores, selectmode=MULTIPLE, width=30, height=1, fg='grey',bg='white')
                # lstbox3.grid(column=0, row=3)

                # namelbl = ttk.Label(lstbox, text="SCENARIO")
                # name = ttk.Entry(frame)
                # TECNO


                def choix_techno(value1, value2, value3, val5, csvfile):
                    btn8 = ttk.Button(frame2, text='ok',
                                      command=lambda: select_with_tech(value1, value2, value3, val5, csvfile))
                    btn8.grid(column=0, row=4)

                # lstbox = Listbox(frame, listvariable=valores, selectmode=MULTIPLE, width=20, height=10, yscrollcommand=scrollbar2.set)  # LISTBOX
                # scrollbar2.config(command=mapLBox.yview)
                # lstbox.grid(column=2, row=2, sticky='EW')
                # lstbox.grid(column=0, row=0, columnspan=2)

                # print(makeitastring)
                # print(valores.get())

                """
                def select():
                    global reslist
                    global seleccion
                    reslist = list()
                    seleccion = lstbox.curselection()  # PRENDRE EN COMPTE LA SELECTION
                    for i in seleccion:
                        entrada = lstbox.get(i)
                        reslist.append(entrada)
                    #for val in reslist:
                        #print(val)

                    def clear():
                        del reslist[:]
                        lstbox.select_clear(0, END)  # DESELECTIONNER CE QUI A ETE SELECTIONNE

                    btn2 = ttk.Button(frame, text='Annuler', command=clear)
                    btn2.grid(column=1, row=1)

                    return reslist
                """

                def detruire():
                    frame.destroy()
                    frame2.destroy()
                    frame3.destroy()
                    frame4.destroy()
                    root.destroy()
                    choix.geometry("300x345+20+50")

                # btn = ttk.Button(frame, text="Valider", command=exec_voix(event))
                # btn.grid(column=0, row=1)
                # frame.bind('<ButtonRelease-1>', exec_voix)

                # def valider(value1, value2, value3, tech, val5, csvfile):


                def clear2():
                    del value3[:]
                    lstbox2.select_clear(0, END)  # DESELECTIONNER CE QUI A ETE SELECTIONNE
                    # btn3 = ttk.Button(frame, text='ok', command=lambda: select(value1, value2, csvfile))
                    btn6 = ttk.Button(frame2, text='Cancel', command=lambda: clear2())
                    btn6.grid(column=0, row=4)
                    # btn3.grid(column=0, row=1)

                def select_with_tech(value1, value2, value3, val5, csvfile):
                    value1 = value1
                    value2 = value2
                    csvfile = csvfile
                    # print("JE SUIS ICI")

                    # lobal tech
                    global seleccion2
                    tech = list()
                    seleccion2 = lstbox2.curselection()  # PRENDRE EN COMPTE LA SELECTION
                    for i in seleccion2:
                        entrada2 = lstbox2.get(i)
                        tech.append(entrada2)
                        # for val in value3:
                        # print(val)
                        # print(entrada2)
                    # print(tech)
                    btn6 = ttk.Button(frame2, text='Cancel', command=lambda: clear2())
                    btn6.grid(column=1, row=4)
                    btn7 = ttk.Button(frame2, text='Valider',
                                      command=lambda: lancer(value1, value2, value3, tech, val5, departement,
                                                             csvfile))
                    btn7.grid(column=0, row=4)

                def select(value1, value2, val5, csvfile):
                    value1 = value1
                    value2 = value2
                    csvfile = csvfile

                    global value3
                    global seleccion
                    value3 = list()
                    seleccion = lstbox.curselection()  # PRENDRE EN COMPTE LA SELECTION
                    for i in seleccion:
                        entrada = lstbox.get(i)
                        value3.append(entrada)
                        # for val in value3:
                        # print(val)
                        # print(value3)
                    # print(value3)
                    if 'all' in value3:
                        value3 = scenario

                    btn5 = ttk.Button(frame, text='Valider',
                                      command=lambda: choix_techno(value1, value2, value3, val5, csvfile))
                    btn5.grid(column=0, row=4)
                    # btn3 = ttk.Button(frame, text='ok', command=lambda: select(value1, value2, val5, csvfile))
                    # btn3.grid(column=0, row=4)

                def select2(value1, value2, val5, csvfile):
                    value1 = value1
                    value2 = value2
                    csvfile = csvfile

                    # global value3
                    # global seleccion
                    # value3 = list()
                    # seleccion = lstbox.curselection()  # PRENDRE EN COMPTE LA SELECTION
                    # btn3 = ttk.Button(frame, text='Valider', command=lambda: lancer2(value1, value2,val5, csvfile))
                    # btn3.grid(column=1, row=2)

                def clear():

                    del value3[:]
                    lstbox.select_clear(0, END)  # DESELECTIONNER CE QUI A ETE SELECTIONNE
                    btn3 = ttk.Button(frame, text='ok', command=lambda: select(value1, value2, val5, csvfile))
                    btn3.grid(column=0, row=4)

                def clear_custom():
                    # del value3[:]
                    lstbox.select_clear(0, END)  # DESELECTIONNER CE QUI A ETE SELECTIONNE
                    btn3 = ttk.Button(frame, text='ok', command=lambda: select(value1, value2, val5, csvfile))
                    btn3.grid(column=0, row=4)

                # print(value3)
                # btn3 = ttk.Button(frame, text='Valider', command=lambda : lancer(value1,value2,value3,csvfile))
                btn3 = ttk.Button(frame, text='ok', command=lambda: select(value1, value2, val5, csvfile))
                btn3.grid(column=0, row=4)
                # btn4 = ttk.Button(frame, text='Default', command=lambda: select2(value1, value2,val5, csvfile))
                # btn4.grid(column=1, row=)
                btn2 = ttk.Button(frame, text='Cancel', command=clear_custom)
                btn2.grid(column=1, row=4)
                ttk.Style().configure('green/black.TLabel', relief="flat", foreground='black', background='red')
                btnn = ttk.Button(frame, text=" --> Menu Principal ", command=detruire, style='green/black.TLabel')
                # btnn.configure(bg="red")
                btnn.grid(column=0, row=6, sticky=(N, S, E, W))

                ttk.Style().configure('yellow/black.TLabel', relief="flat", foreground='white', background='black')
                btnn = ttk.Button(frame, text="CHOIX SCENARIO", style='yellow/black.TLabel')
                # btnn.configure(bg="red")
                btnn.grid(column=0, row=0, sticky=(N, S, E, W))

                btnn = ttk.Button(frame2, text="CHOIX TECHNO", style='yellow/black.TLabel')
                # btnn.configure(bg="red")
                btnn.grid(column=0, row=0, sticky=(N, S, E, W))

                choix.mainloop()

                # FIN DE SELECTION DES SCENARIOS
                # ______-*******************************-________________________________________________________________________________________________________________________________

                # ------------------------------------------------------------------------------------FIN------------------------------------------------------------------------------------

                # ------------------------------------------------------------------------------------FIN------------------------------------------------------------------------------------

        date = []
        etat = []

        date_cumul = 0

        z = 0
        a = []
        b = 0

        # reader = csv.reader(lefichier.fichier, delimiter=';')
        reader = csv.reader(lefichier.fichier)

        date_test = re.compile(r".*([0-9][0-9][0-9][0-9]\-[0-9][0-9]\-[0-9][0-9]) .*", re.IGNORECASE)
        scenario_test = re.compile(r".*('Scenario Label \[campaign\_label\]').*", re.IGNORECASE)

        b = ''
        z = False
        l = 0
        g = 0
        k = 0
        d = ''
        scenario = []
        scenario.append('all')
        os = dict()

        # RECUPERATION OS


        key = "ALL"
        os.setdefault(key, [])

        # os.setdefault(key, [])

        # os['Belkacem'] = 'KAID'
        # RECUPERATION DATE ET SCENARIO
        for row in reader:
            # f = date_test.search(row[1])
            f = row[1][0:10]
            a = row[161]
            o = row[220]
            if f in 'date_utc_agent' or 'date_utc_agent' in f:
                variable = (f)
                # print(int(val1[-2:]) - 2)
                continue

            # RECUPERATION DATE
            # if f and b != str(f.group(1)):

            if b != f and f not in date:
                # date.append(f.group(1))
                date.append(f)
                b = f
                # b = str(f.group(1))

            # RECUPERATION SCENARIOS
            k = scenario_test.search(row[221])
            d = row[221]
            if d == 'campaign_label':
                continue
            if d not in scenario:
                scenario.append(str(d))

            # RECUPERATION OS
            if o:
                if o not in os:
                    os[key].append(o)
                    os[o] = o
                    # os['Belkacem'].append(o)
        android_ios = 'Android & ios'
        os[android_ios] = ['Android', 'iOS']
        for k in os.keys():
            try:
                if len(os[k]) < 1:
                    del os[k]
            except:
                pass

        date.reverse()

        # print(scenario)
        # print(date)
        # sorted(os, key=operator.itemgetter("ALL"))


        def defocus(event):
            event.widget.master.focus_set()

            # try:
            # import Tix as tix  # Python27
            # except ImportError:
            # import tkinter.tix as tix  # Python31+

        """
        def selected(event):
            global value1
            value1 = combo.entry.get()
            print(value1)

        def selected2(event):
            global value2
            value2 = combo2.entry.get()
            print(value2)
        """

        # import Tkinter as Tk
        root = Tk()
        #root.attributes('-alpha', 0.8)
        # choix1 = Tk()
        # choix1.title("Multiple Choice Listbox")
        # choix1 = tix.Tk()
        root.config(bg='black')

        # use width x height + x_offset + y_offset (no spaces!)
        Label(root, text="SFR", font=("Helvetica", 20, "bold"), fg='red', bg='black').pack()
        Label(root, text="                  SELECTION OS                   ", font=("Helvetica", 10, "bold"),fg='white', bg='black').pack()
        Label(root,text="   DATE DEBUT                                                                                                     DATE FIN           ",font=("Helvetica", 10, "bold"), fg='white', bg='black').pack()
        root.geometry("%dx%d+%d+%d" % (640, 200, 738, 150))
        root.title("Interval")

        # COMBO 1_______________________
        combo = ttk.Combobox(root, values=date)
        # combo.config(bg='white')
        # Label(combo, text="start", font=("Helvetica", 10, "bold"), fg='red', bg='black').pack(side='left')
        combo.pack(side='left', padx=10, pady=10)
        # date=date.reverse()
        # for item in date:
        # combo.slistbox.listbox.insert('end', item)

        # COMBO 2________________________
        combo2 = ttk.Combobox(root, values=date)
        # Label(combo2, text="end", font=("Helvetica", 10, "bold"), fg='red', bg='black').pack(side='right')
        combo2.pack(side='right', padx=10, pady=10)
        # date = date.reverse()
        # for item2 in date:
        # combo2.slistbox.listbox.insert('end', item2)
        # left mouse click on a list item to display selection

        os_remaked = ['ALL', 'Android & ios', 'Android', 'iOS', 'Unknown']
        # COMBO 3________________________
        # print(os)
        combo3 = ttk.Combobox(root, values=os_remaked)
        # Label(combo3, text="OS", font=("Helvetica", 10, "bold"), fg='red', bg='black').pack(side='top')
        combo3.pack(side='top', padx=10, pady=10)
        # date = date.reverse()
        # for item3 in os:
        # combo3.slistbox.listbox.insert('end', item3)
        # left mouse click on a list item to display selection
        Label(root, text="                    DEPARTEMENT                   ", font=("Helvetica", 10, "bold"),
              fg='white', bg='black').pack()
        departement_list = ['TOUT DPTs', 'Ain', 'Aisne', 'Allier', 'Alpes_de_Haute-Provence', 'Hautes-Alpes',
                            'Alpes-Maritimes', 'Ardeche', 'Ardennes', 'Ariege', 'Aube', 'Aude', 'Aveyron',
                            'Bouches_du_Rhone', 'Calvados', 'Cantal', 'Charente', 'Charente_Maritime', 'Cher',
                            'Correze', 'Cote_dOr', 'Cotes_dArmor', 'Creuse', 'Dordogne', 'Doubs', 'Drome', 'Eure',
                            'Eure-et-Loir', 'Finistere', 'Gard', 'Haute-Garonne', 'Gers', 'Gironde', 'Herault',
                            'Ille-et-Vilaine', 'Indre', 'Indre-et-Loire', 'Isere', 'Jura', 'Landes', 'Loir-et-Cher',
                            'Loire', 'Haute-Loire', 'Loire-Atlantique', 'Loiret', 'Lot', 'Lot-et-Garonne', 'Lozere',
                            'Maine-et-Loire', 'Manche', 'Marne', 'Haute-Marne', 'Mayenne', 'Meurthe-et-Moselle',
                            'Meuse', 'Morbihan', 'Moselle', 'Nievre', 'Nord', 'Oise', 'Orne', 'Pas-de-Calais',
                            'Puy-de-Dome', 'Pyrenees-Atlantiques', 'Hautes-Pyrenees', 'Pyrenees-Orientales',
                            'Bas-Rhin',
                            'Haut-Rhin', 'Rhone', 'Haute-Saone', 'Saone-et-Loire', 'Sarthe', 'Savoie',
                            'Haute-Savoie',
                            'Paris', 'Seine-Maritime', 'Seine-et-Marne', 'Yvelines', 'Deux-Sevres', 'Somme', 'Tarn',
                            'Tarn-et-Garonne', 'Var', 'Vaucluse', 'Vendee', 'Vienne', 'Haute-Vienne', 'Vosges',
                            'Yonne',
                            'Territoire-de-Belfort', 'Essonne', 'Hauts-de-Seine', 'Seine-St-Denis', 'Val-de-Marne',
                            'Val-dOise', 'Corse_du_Sud', 'Haute-Corse']
        # COMBO 4________________________
        # print(os)
        combo4 = ttk.Combobox(root, values=departement_list)
        # Label(combo3, text="OS", font=("Helvetica", 10, "bold"), fg='red', bg='black').pack(side='top')
        combo4.pack(side='bottom', padx=10, pady=10)

        # for item4 in departement_list:
        # combo4.slistbox.listbox.insert('end', item4)

        combo.bind('<<ComboboxSelected>>', lambda event: exec_voix(event, scenario))
        combo2.bind('<<ComboboxSelected>>', lambda event: exec_voix(event, scenario))
        combo3.bind('<<ComboboxSelected>>', lambda event: exec_voix(event, scenario))
        combo4.bind('<<ComboboxSelected>>', lambda event: exec_voix(event, scenario))
        # choix_scenario(csvfile)



        root.mainloop()

        """
        fenetre = Tk()
        fenetre.geometry("300x345+20+50")
        fenetre.title("FENETRE DE CHOIX")
        fenetre.config(bg='black')
        fenetre.geometry()

        Label(fenetre, text="").pack()
        Label(fenetre, text="").pack()
        Label(fenetre, text="SFR", font=("Helvetica", 20, "bold"), fg='red', bg='black').pack()
        Label(fenetre, text="").pack()
        b5 = Button(fenetre, text="     VOIX   ", width=15, height=1, relief=GROOVE, command=voix, fg='white',
                    bg='red').pack()
        b6 = Button(fenetre, text="       QUITTER         ", width=15, height=1, relief=GROOVE, command=quitter_prog,
                    fg='white', bg='red').pack()
        Label(choix, text="").pack()
        label = Label(fenetre, text="SFR PERF", fg='white', bg='black').pack()
        Label(fenetre, text="").pack()
        # photo = open(file="logo-3.jpg")
        # Label= Label(fenetre,image="logo-3.jpg").pack() # keep a reference!
        choix.mainloop()
        """

    # INTERFACE GRAPHIQUE
    fenetre.geometry("300x345+20+50")
    fenetre.title("FENETRE DE CHOIX")
    fenetre.config(bg='black')
    fenetre.geometry()

    Label(fenetre, text="").pack()
    Label(fenetre, text="").pack()
    Label(fenetre, text="SFR", font=("Helvetica", 20, "bold"), fg='red', bg='black').pack()
    Label(fenetre, text="").pack()

    b1 = Button(fenetre, text="     DISPLAY ERRORS    ", width=19, height=1, relief=GROOVE, command=check_error,fg='white', bg='red').pack()
    b2 = Button(fenetre, text="     CAUSES CODES    ", width=19, height=1, relief=GROOVE, command=les_causes_codes,fg='white', bg='red').pack()
    b4 = Button(fenetre, text="     GENERAL STATES   ", width=19, height=1, relief=GROOVE, command=incom_outgo_etats, fg='white',bg='red').pack()
    #b7 = Button(fenetre, text="     CHECK BY DATE SS    ", width=19, height=1, relief=GROOVE, command=regroupement2,fg='white', bg='red').pack()
    #b8 = Button(fenetre, text="     CHECK BY DATE SS CAM    ", width=19, height=1, relief=GROOVE, command=regroupement3,fg='white', bg='red').pack()
    #b8 = Button(fenetre, text="     CHECK BY DATE SS AD    ", width=19, height=1, relief=GROOVE, command=regroupement4,fg='white', bg='red').pack()
    #b3 = Button(fenetre, text="     SUCCESS RATIO    ", width=19, height=1, relief=GROOVE, command=success_ratio,fg='white', bg='red').pack()

    #b5 = Button(fenetre, text="    TAUX VOIX INCOMING   ", width=19, height=1, relief=GROOVE, command=taux_incoming,fg='white', bg='red').pack()
    #b5 = Button(fenetre, text="    TAUX VOIX OUTGOING   ", width=19, height=1, relief=GROOVE, command=taux_outgoing,fg='white', bg='red').pack()
    b6 = Button(fenetre, text="       QUITTER         ", width=19, height=1, relief=GROOVE, command=quitter_prog,fg='white', bg='red').pack()
    Label(fenetre, text="").pack()
    label = Label(fenetre, text="SFR PERF", fg='white', bg='black').pack()
    Label(fenetre, text="").pack()
    # photo = open(file="logo-3.jpg")
    # Label= Label(fenetre,image="logo-3.jpg").pack() # keep a reference!
    fenetre.mainloop()

def data():

    choix.geometry("700x360+20+50")




    class lefichier():
        global csvfile
        csvfile = ouvrir_fich()
        fichier=csvfile
        #print(a) #OUVERTURE FICHIER UNE SEULE FOIS
    #print(str(lefichier.fichier))
    # ___________________________**********************DEBUT********************************____________________________#
    # ------------------------------------------------------------------------------------------------------------------#

    # ------------------------------------------------------------------------------------------------------------------#
    # ___________________________**********************FIN********************************____________________________#



    def exec_voix(scenario,event):
        #print(lefichier.fichier)


        def lancer(val1,val2,val3,tech, val5,departement,file):
            #print(tech)
            tout=['2G','EDGE','GPRS','3G','UMTS','Dual Carrier','HSUPA','HSPA','HSPA+','HSDPA','4G','LTE','LTE-A','WIFI','N/A','UNKNOWN','GSM (2G-3G-4G)']
            LA2G=['2G','EDGE','GPRS']
            LA3G=['3G','UMTS','Dual Carrier','HSUPA','HSPA','HSPA+','HSDPA']
            LA4G=['4G','LTE','LTE-A']
            LAWIFI=['WIFI']
            LINCONNU=['N/A','UNKNOWN']


            if '2G' in tech:
                for elem2 in LA2G:
                    tech.append(elem2)
            if '3G' in tech:
                for elem3 in LA3G:
                    tech.append(elem3)
            if '4G' in tech:
                for elem4 in LA4G:
                    tech.append(elem4)
            if 'WIFI' in tech:
                for elem5 in LAWIFI:
                    tech.append(elem5)
            if 'INCONNU' in tech:
                for elem6 in LINCONNU:
                    tech.append(elem6)
            if 'ALL' in tech:
                for elem in tout:
                    tech.append(elem)

            #print('JE T AFFICHE TECH')
            #print(tech)
            #'TOUT DPTs'
            print("________________PLEASE WAIT____________________")
            if departement in'TOUT DPTs':
                def sans_dpt_filtre(val1, val2, val3, tech, val5, departement, file):
                    if val1 and val2:
                        plt.suptitle('TAUX DES TECHNOS EN DATA Du ' + val1 + ' Au' + val2 ,fontsize=18, bbox={'facecolor': 'white', 'pad': 5})
                        #plt.suptitle('DASHBOARD KPI DATA TOUT DEPARTEMENTS', fontsize=18, bbox={'facecolor': 'white', 'pad': 5})
                        #plt.figure(1).patch.set_facecolor('white')
                        #figure_data, axes = plt.subplots(figsize=(40, 40))
                        #import datetime as dt
                        csv_opner_result = re.compile(r".*'(.*:.*)'\, .*", re.IGNORECASE)
                        csv_opner_result_general = re.compile(r".*'(.*:.*\/).*\.csv'\, .*", re.IGNORECASE)
                        f = csv_opner_result.search(str(file))
                        f2 = csv_opner_result_general.search(str(file))

                        # fichier = open(f.group(1), 'r')
                        # print(f.group(1))
                        # reader = csv.reader(fichier, delimiter=';')
                        reader = f.group(1)
                        reader2 = f2.group(1)

                        # READER 1 CONCERNE LE FICHIER HTTP
                        # READER2 CONCERNE LE FICHIER GENERALISTE POUR WEB ET COMPANIE

                        # WEB FILE
                        reader_web = reader2 + "WEB.csv"

                        # VIDEO FILE
                        reader_video = reader2 + "VIDEO.csv"

                        # USAGE FILE
                        reader_usage = reader2 + "APPLICATION.csv"







                        # HTTP
                        def technos(fichier, val1, val2, val3, val4, val5, tech):
                            #import datetime
                            #print("\n JE SUIS DANS HTTP \n")
                            import datetime
                            format_date_generale = "%Y-%m-%d"
                            date_debut = datetime.datetime.strptime(val1, format_date_generale)
                            date_fin = datetime.datetime.strptime(val2, format_date_generale)

                            global dictionnaire_techno
                            global nombre_total_tecno
                            global dictionnaire_techno_simplifie
                            dictionnaire_techno=dict()
                            dictionnaire_techno_simplifie=dict()
                            nombre_total_tecno=0.0

                            # global fichier


                            fichier = fichier

                            nb = 0.0
                            nb_set = []
                            date_http = []
                            csvfile = open(fichier, 'r')
                            # print(csvfile)
                            reader = csv.reader(csvfile)

                            b = ''
                            var_ajout = 0.0
                            row_check = 0.0
                            for row in reader:
                                row_check = row_check + 1
                                # print(row_check)
                                f = row[1][0:10]
                                latence = row[175]
                                tecc = row[235]
                                debit = row[171]
                                ci_http = row[42]
                                lac_http = row[43]
                                if f == 'date_utc_a':
                                    continue
                                datef = datetime.datetime.strptime(f, "%Y-%m-%d")
                                if datef > date_fin:
                                    continue

                                if datef < date_debut:
                                    break


                                row[241] = '_'.join(row[241].split(" "))

                                # print("HELLO")

                                if str(row[233]) != 'SFR':
                                    if str(row[240]=='iOS') or str(row[240]=='Unknown'):
                                        if not(row[233]):
                                            continue
                                        if str(row[233]) != 'N/A':
                                            continue
                                if  str(row[241]) in val3 and row[240] in val5 and tecc in tech:
                                    if tecc not in dictionnaire_techno:
                                        dictionnaire_techno[tecc]=1
                                        nombre_total_tecno = nombre_total_tecno + 1
                                        if tecc=='HSUPA' or tecc=='HSPA' or tecc=='UMTS' or tecc=='HSDPA' or tecc=='HSPA+' or tecc=='Dual Carrier' or tecc=='3G':
                                            dictionnaire_techno_simplifie['3G']=1
                                        if tecc=='LTE-A' or tecc=='LTE' or tecc=='4G' or tecc=='4G+' or tecc=='4G++':
                                            dictionnaire_techno_simplifie['4G']=1
                                        if tecc=='GPRS' or tecc=='2G' :
                                            dictionnaire_techno_simplifie['2G']=1
                                        if tecc=='UNKNOWN' or tecc=='N/A' :
                                            dictionnaire_techno_simplifie['AUTRE']=1
                                        if tecc == 'WIFI' or tecc == 'WIRELESS LAN':
                                            dictionnaire_techno_simplifie['WIFI'] =  1


                                    else:
                                        dictionnaire_techno[tecc] = float(dictionnaire_techno[tecc]) + 1
                                        nombre_total_tecno = nombre_total_tecno + 1
                                        if tecc=='HSUPA' or tecc=='HSPA' or tecc=='UMTS' or tecc=='HSDPA' or tecc=='HSPA+' or tecc=='Dual Carrier' or tecc=='3G':
                                            dictionnaire_techno_simplifie['3G']=float(dictionnaire_techno_simplifie['3G'])+1

                                        if tecc=='LTE-A' or tecc=='LTE' or tecc=='4G':
                                            #print("JE SUIS LAAAAAAAA")
                                            dictionnaire_techno_simplifie['4G']=float(dictionnaire_techno_simplifie['4G'])+1

                                        if tecc=='GPRS' or tecc=='2G' or tecc=='EDGE' :
                                            dictionnaire_techno_simplifie['2G']=float(dictionnaire_techno_simplifie['2G'])+1

                                        if tecc=='UNKNOWN' or tecc=='N/A' :
                                            dictionnaire_techno_simplifie['AUTRE']=float(dictionnaire_techno_simplifie['AUTRE'])+1

                                        if tecc=='WIFI' or tecc=='WIRELESS LAN' :
                                            dictionnaire_techno_simplifie['WIFI']=float(dictionnaire_techno_simplifie['WIFI'])+1

                                        #dictionnaire_techno[tecc]=float(dictionnaire_techno[tecc])+1
                                        #nombre_total_tecno = nombre_total_tecno + 1

                            print(dictionnaire_techno)
                            print(dictionnaire_techno_simplifie)
                            print(nombre_total_tecno)
                            global taux_technos
                            global taux_technos_simplifie
                            taux_technos=dict()
                            taux_technos_simplifie=dict()
                            for key, value in dictionnaire_techno.iteritems():
                                taux_technos[key]=value*100.0/nombre_total_tecno

                            for key, value in dictionnaire_techno_simplifie.iteritems():
                                taux_technos_simplifie[key]=value*100.0/nombre_total_tecno



                            from matplotlib import cm
                            import numpy as np


                            #__________Technos globaiux_____
                            legende=[]
                            fracs=[]
                            for key, value in taux_technos_simplifie.iteritems():
                                legende.append(key+' '+str(round(value,2))+' %')
                                fracs.append(value)

                            from matplotlib import cm
                            import numpy as np
                            a = np.random.random(40)
                            cs = cm.Set1(np.arange(40) / 40.)
                            plt.subplot2grid((4, 4), (0, 0),rowspan=2)  # SUBLOT
                            plt.pie(fracs, shadow=True, startangle=90,colors=cs)  # PLT PIE___________________________

                            plt.legend(legende, loc='center left', bbox_to_anchor=(1, 0.5)).get_frame().set_alpha(0.5)
                            # plt.legend(fracs, loc="best",prop={'size':10})

                            plt.title(' TAUX UTILISATION TECHNOS (Global) ',bbox={'facecolor': '0.8', 'pad': 5},)

                            #______________________________technos  detailles_________________________________
                            legende2 = []
                            fracs2 = []
                            for key, value in taux_technos.iteritems():
                                legende2.append(key + ' ' + str(round(value,2)) + ' %')
                                fracs2.append(value)

                            from matplotlib import cm
                            import numpy as np
                            a = np.random.random(40)
                            cs = cm.Set1(np.arange(40) / 40.)

                            plt.subplot2grid((4, 4), (0, 2),rowspan=2)  # SUBLOT
                            plt.pie(fracs2, shadow=True, startangle=90, colors=cs)  # PLT PIE___________________________

                            plt.legend(legende2, loc='center left', bbox_to_anchor=(1, 0.5)).get_frame().set_alpha(0.5)
                            # plt.legend(fracs, loc="best",prop={'size':10})

                            plt.title(' TAUX UTILISATION TECHNOS (detaille) ',bbox={'facecolor': '0.8', 'pad': 5}, )

                            figManager = plt.get_current_fig_manager()
                            figManager.window.showMaximized()
                            plt.show()








                            # ________________________________________________--___**_FIN MATPLOTLIB _**___--___________________________________________________



                        val4=0
                        if __name__ == '__main__':

                            technos(reader, val1, val2, val3, val4, val5, tech)



                sans_dpt_filtre(val1, val2, val3, tech, val5, departement, file)
            else:
                def data_avec_dpt_filtre(val1, val2, val3, tech, val5, departement, file):
                    if val1 and val2:
                        plt.suptitle('TAUX DES TECHNOS EN DATA Du '+val1+' Au'+ val2+' Dept: '+departement, fontsize=18, bbox={'facecolor': 'white', 'pad': 5})
                        #plt.suptitle('DASHBOARD KPI DATA TOUT DEPARTEMENTS', fontsize=18, bbox={'facecolor': 'white', 'pad': 5})
                        #plt.figure(1).patch.set_facecolor('white')
                        #figure_data, axes = plt.subplots(figsize=(40, 40))
                        #import datetime as dt
                        csv_opner_result = re.compile(r".*'(.*:.*)'\, .*", re.IGNORECASE)
                        csv_opner_result_general = re.compile(r".*'(.*:.*\/).*\.csv'\, .*", re.IGNORECASE)
                        f = csv_opner_result.search(str(file))
                        f2 = csv_opner_result_general.search(str(file))

                        # fichier = open(f.group(1), 'r')
                        # print(f.group(1))
                        # reader = csv.reader(fichier, delimiter=';')
                        reader = f.group(1)
                        reader2 = f2.group(1)

                        # READER 1 CONCERNE LE FICHIER HTTP
                        # READER2 CONCERNE LE FICHIER GENERALISTE POUR WEB ET COMPANIE

                        # WEB FILE
                        reader_web = reader2 + "WEB.csv"

                        # VIDEO FILE
                        reader_video = reader2 + "VIDEO.csv"

                        # USAGE FILE
                        reader_usage = reader2 + "APPLICATION.csv"







                        # TECHNOS
                        def technos(fichier, val1, val2, val3, val4, val5, tech,departement):
                            #import datetime
                            #print("\n JE SUIS DANS TECHNOS \n")

                            fichier = fichier

                            nb = 0.0
                            nb_set = []
                            date_http = []
                            csvfile = open(fichier, 'r')
                            # print(csvfile)
                            reader = csv.reader(csvfile)

                            ci_lac_eci_tac = []

                            # FICHIER G2R
                            csv_opner_result_g2r = re.compile(r".*'(.*:.*\/).*\.csv'\, .*", re.IGNORECASE)
                            fichier_g2r = csv_opner_result_g2r.search(str(csvfile))
                            fichier_g2r = str(fichier_g2r.group(1)) + 'g2r.csv'
                            fichier_g2r = open(fichier_g2r, 'r')
                            fichier_g2r_reader = csv.reader(fichier_g2r, delimiter=';')
                            # print('ON EST DANS LA DATA '+departement)
                            departement_code_postal = {'1': 'Ain', '2': 'Aisne', '3': 'Allier',
                                                       '4': 'Alpes_de_Haute-Provence', '5': 'Hautes-Alpes',
                                                       '6': 'Alpes-Maritimes', '7': 'Ardeche', '8': 'Ardennes',
                                                       '9': 'Ariege', '10': 'Aube', '11': 'Aude', '12': 'Aveyron',
                                                       '13': 'Bouches_du_Rhone', '14': 'Calvados', '15': 'Cantal',
                                                       '16': 'Charente', '17': 'Charente_Maritime', '18': 'Cher',
                                                       '19': 'Correze', '21': 'Cote_dOr', '22': 'Cotes_dArmor',
                                                       '23': 'Creuse', '24': 'Dordogne', '25': 'Doubs', '26': 'Drome',
                                                       '27': 'Eure', '28': 'Eure-et-Loir', '29': 'Finistere',
                                                       '30': 'Gard',
                                                       '31': 'Haute-Garonne', '32': 'Gers', '33': 'Gironde',
                                                       '34': 'Herault', '35': 'Ille-et-Vilaine', '36': 'Indre',
                                                       '37': 'Indre-et-Loire', '38': 'Isere', '39': 'Jura',
                                                       '40': 'Landes',
                                                       '41': 'Loir-et-Cher', '42': 'Loire', '43': 'Haute-Loire',
                                                       '44': 'Loire-Atlantique', '45': 'Loiret', '46': 'Lot',
                                                       '47': 'Lot-et-Garonne', '48': 'Lozere', '49': 'Maine-et-Loire',
                                                       '50': 'Manche', '51': 'Marne', '52': 'Haute-Marne',
                                                       '53': 'Mayenne',
                                                       '54': 'Meurthe-et-Moselle', '55': 'Meuse', '56': 'Morbihan',
                                                       '57': 'Moselle', '58': 'Nievre', '59': 'Nord', '60': 'Oise',
                                                       '61': 'Orne', '62': 'Pas-de-Calais', '63': 'Puy-de-Dome',
                                                       '64': 'Pyrenees-Atlantiques', '65': 'Hautes-Pyrenees',
                                                       '66': 'Pyrenees-Orientales', '67': 'Bas-Rhin', '68': 'Haut-Rhin',
                                                       '69': 'Rhone', '70': 'Haute-Saone', '71': 'Saone-et-Loire',
                                                       '72': 'Sarthe', '73': 'Savoie', '74': 'Haute-Savoie',
                                                       '75': 'Paris',
                                                       '76': 'Seine-Maritime', '77': 'Seine-et-Marne', '78': 'Yvelines',
                                                       '79': 'Deux-Sevres', '80': 'Somme', '81': 'Tarn',
                                                       '82': 'Tarn-et-Garonne', '83': 'Var', '84': 'Vaucluse',
                                                       '85': 'Vendee', '86': 'Vienne', '87': 'Haute-Vienne',
                                                       '88': 'Vosges',
                                                       '89': 'Yonne', '90': 'Territoire-de-Belfort', '91': 'Essonne',
                                                       '92': 'Hauts-de-Seine', '93': 'Seine-St-Denis',
                                                       '94': 'Val-de-Marne',
                                                       '95': 'Val-dOise', '2A': 'Corse_du_Sud', '2B': 'Haute-Corse'}

                            g2r_code_postal = ''
                            departement_eci_tac_ci_lac = ''
                            fichier_ci_lac_decriture = open("Departement_CI_Lac_eCI_Tac"+str(departement)+".txt", "w")

                            # fichier_ci_lac_decriture.write()
                            fichier_ci_lac_decriture.write(
                                "\n______________________________________________________________________________________________")
                            fichier_ci_lac_decriture.write(
                                "\n\n\n         VOICI LA LISTE DES DEPARTEMENT ET LEUR CORRESPONDANCE EN CI-LAC/eCI-TAC \n\n\n")
                            fichier_ci_lac_decriture.write(
                                "______________________________________________________________________________________________\n\n\n")

                            file.close()
                            ci_lac_eci_tac_intermediaire = []
                            ci_lac_eci_tac_intermediaire_var = ''
                            for row in fichier_g2r_reader:
                                ci = row[21]
                                lac = row[22]
                                num_g2r = row[18]
                                region = row[34]
                                eci = row[38]
                                tac = row[40]

                                if eci:
                                    if len(num_g2r) == 5:
                                        g2r_code_postal = num_g2r[:1]
                                        if g2r_code_postal in departement_code_postal:
                                            departement_eci_tac_ci_lac = departement_code_postal[
                                                                             g2r_code_postal] + ' ' + eci + '-' + tac
                                            ci_lac_eci_tac.append(departement_eci_tac_ci_lac)
                                            fichier_ci_lac_decriture.write('\n\n')
                                            fichier_ci_lac_decriture.write(departement_eci_tac_ci_lac)
                                            if str(departement_code_postal[g2r_code_postal]) in str(departement):
                                                ci_lac_eci_tac_intermediaire.append(
                                                    departement_code_postal[g2r_code_postal] + ' ' + eci + '-' + tac)

                                    if len(num_g2r) == 6:
                                        g2r_code_postal = num_g2r[:2]
                                        if g2r_code_postal in departement_code_postal:
                                            departement_eci_tac_ci_lac = departement_code_postal[
                                                                             g2r_code_postal] + ' ' + eci + '-' + tac
                                            ci_lac_eci_tac.append(departement_eci_tac_ci_lac)
                                            fichier_ci_lac_decriture.write('\n\n')
                                            fichier_ci_lac_decriture.write(departement_eci_tac_ci_lac)

                                            if str(departement_code_postal[g2r_code_postal]) in str(departement):
                                                ci_lac_eci_tac_intermediaire.append(
                                                    departement_code_postal[g2r_code_postal] + ' ' + eci + '-' + tac)

                                else:
                                    if ci:
                                        if len(num_g2r) == 5:
                                            g2r_code_postal = num_g2r[:1]

                                            if g2r_code_postal in departement_code_postal:
                                                departement_eci_tac_ci_lac = departement_code_postal[
                                                                                 g2r_code_postal] + ' ' + ci + '-' + lac
                                                ci_lac_eci_tac.append(departement_eci_tac_ci_lac)
                                                fichier_ci_lac_decriture.write('\n\n')
                                                fichier_ci_lac_decriture.write(departement_eci_tac_ci_lac)
                                                if str(departement_code_postal[g2r_code_postal]) in str(departement):
                                                    ci_lac_eci_tac_intermediaire.append(departement_code_postal[
                                                                                            g2r_code_postal] + ' ' + eci + '-' + tac)

                                        if len(num_g2r) == 6:
                                            g2r_code_postal = num_g2r[:2]
                                            if g2r_code_postal in departement_code_postal:
                                                departement_eci_tac_ci_lac = departement_code_postal[
                                                                                 g2r_code_postal] + ' ' + ci + '-' + lac
                                                ci_lac_eci_tac.append(departement_eci_tac_ci_lac)
                                                fichier_ci_lac_decriture.write('\n\n')
                                                fichier_ci_lac_decriture.write(departement_eci_tac_ci_lac)
                                                # print(departement_code_postal[g2r_code_postal] +' ET VOICI TON DPT:  ' +departement)
                                                # print(departement_code_postal[g2r_code_postal]+' et ton dpt: '+departement)
                                                # if (departement_code_postal[g2r_code_postal]=='Paris'):
                                                # print(departement_code_postal[g2r_code_postal])
                                                # if (departement_code_postal[g2r_code_postal]==' Paris'):
                                                # print(departement_code_postal[g2r_code_postal]+' *')
                                                # if (departement_code_postal[g2r_code_postal]=='Paris '):
                                                # print(departement_code_postal[g2r_code_postal]+' **')
                                                # if (departement_code_postal[g2r_code_postal]==' Paris '):
                                                # print(departement_code_postal[g2r_code_postal]+' * *')
                                                # if (departement_code_postal[g2r_code_postal] in 'Paris'):
                                                # print(departement_code_postal[g2r_code_postal]+'   IN  ')
                                                # print(str(departement_code_postal[g2r_code_postal] in departement)+'  -->  '+departement_code_postal[g2r_code_postal]+' IN '+departement)
                                                if departement_code_postal[g2r_code_postal] in departement:
                                                    ci_lac_eci_tac_intermediaire_var = departement_code_postal[
                                                                                           g2r_code_postal] + ' ' + eci + '-' + tac
                                                    ci_lac_eci_tac_intermediaire.append(
                                                        ci_lac_eci_tac_intermediaire_var)

                                                    # print(departement)

                                                    # for elem in ci_lac_eci_tac:
                                                    # fichier_ci_lac_decriture.write('\n\n')
                                                    # fichier_ci_lac_decriture.write(elem)
                            fichier_ci_lac_decriture.close()

                            import datetime
                            format_date_generale = "%Y-%m-%d"
                            date_debut = datetime.datetime.strptime(val1, format_date_generale)
                            date_fin = datetime.datetime.strptime(val2, format_date_generale)

                            global dictionnaire_techno
                            global nombre_total_tecno
                            global dictionnaire_techno_simplifie
                            dictionnaire_techno=dict()
                            dictionnaire_techno_simplifie=dict()
                            nombre_total_tecno=0.0

                            # global fichier




                            b = ''
                            var_ajout = 0.0
                            row_check = 0.0
                            for row in reader:
                                row_check = row_check + 1
                                # print(row_check)
                                f = row[1][0:10]
                                latence = row[175]
                                tecc = row[235]
                                debit = row[171]
                                ci_http = row[42]
                                lac_http = row[43]
                                if f == 'date_utc_a':
                                    continue
                                datef = datetime.datetime.strptime(f, "%Y-%m-%d")
                                if datef > date_fin:
                                    continue

                                if datef < date_debut:
                                    break


                                row[241] = '_'.join(row[241].split(" "))

                                # print("HELLO")

                                if (departement + ' ' + ci_http + '-' + lac_http) not in ci_lac_eci_tac_intermediaire:
                                    continue

                                if str(row[233]) != 'SFR':
                                    if str(row[240]=='iOS') or str(row[240]=='Unknown'):
                                        if not(row[233]):
                                            continue
                                        if str(row[233]) != 'N/A':
                                            continue
                                if  str(row[241]) in val3 and row[240] in val5 and tecc in tech:
                                    if tecc not in dictionnaire_techno:
                                        dictionnaire_techno[tecc]=1
                                        nombre_total_tecno = nombre_total_tecno + 1
                                        if tecc=='HSUPA' or tecc=='HSPA' or tecc=='UMTS' or tecc=='HSDPA' or tecc=='HSPA+' or tecc=='Dual Carrier' or tecc=='3G':
                                            dictionnaire_techno_simplifie['3G']=1
                                        if tecc=='LTE-A' or tecc=='LTE' or tecc=='4G' or tecc=='4G+' or tecc=='4G++':
                                            dictionnaire_techno_simplifie['4G']=1
                                        if tecc=='GPRS' or tecc=='2G' :
                                            dictionnaire_techno_simplifie['2G']=1
                                        if tecc=='UNKNOWN' or tecc=='N/A' :
                                            dictionnaire_techno_simplifie['AUTRE']=1
                                        if tecc == 'WIFI' or tecc == 'WIRELESS LAN':
                                            dictionnaire_techno_simplifie['WIFI'] =  1


                                    else:
                                        dictionnaire_techno[tecc] = float(dictionnaire_techno[tecc]) + 1
                                        nombre_total_tecno = nombre_total_tecno + 1
                                        if tecc=='HSUPA' or tecc=='HSPA' or tecc=='UMTS' or tecc=='HSDPA' or tecc=='HSPA+' or tecc=='Dual Carrier' or tecc=='3G':
                                            dictionnaire_techno_simplifie['3G']=float(dictionnaire_techno_simplifie['3G'])+1

                                        if tecc=='LTE-A' or tecc=='LTE' or tecc=='4G':
                                            #print("JE SUIS LAAAAAAAA")
                                            dictionnaire_techno_simplifie['4G']=float(dictionnaire_techno_simplifie['4G'])+1

                                        if tecc=='GPRS' or tecc=='2G' or tecc=='EDGE' :
                                            dictionnaire_techno_simplifie['2G']=float(dictionnaire_techno_simplifie['2G'])+1

                                        if tecc=='UNKNOWN' or tecc=='N/A' :
                                            dictionnaire_techno_simplifie['AUTRE']=float(dictionnaire_techno_simplifie['AUTRE'])+1

                                        if tecc=='WIFI' or tecc=='WIRELESS LAN' :
                                            dictionnaire_techno_simplifie['WIFI']=float(dictionnaire_techno_simplifie['WIFI'])+1

                                        #dictionnaire_techno[tecc]=float(dictionnaire_techno[tecc])+1
                                        #nombre_total_tecno = nombre_total_tecno + 1

                            print(dictionnaire_techno)
                            print(dictionnaire_techno_simplifie)
                            print(nombre_total_tecno)
                            global taux_technos
                            global taux_technos_simplifie
                            taux_technos=dict()
                            taux_technos_simplifie=dict()
                            for key, value in dictionnaire_techno.iteritems():
                                taux_technos[key]=value*100.0/nombre_total_tecno

                            for key, value in dictionnaire_techno_simplifie.iteritems():
                                taux_technos_simplifie[key]=value*100.0/nombre_total_tecno



                            from matplotlib import cm
                            import numpy as np


                            #__________Technos globaiux_____
                            legende=[]
                            fracs=[]
                            for key, value in taux_technos_simplifie.iteritems():
                                legende.append(key+' '+str(round(value,2))+' %')
                                fracs.append(value)

                            from matplotlib import cm
                            import numpy as np
                            a = np.random.random(40)
                            cs = cm.Set1(np.arange(40) / 40.)
                            plt.subplot2grid((4, 4), (0, 0),rowspan=2)  # SUBLOT
                            plt.pie(fracs, shadow=True, startangle=90,colors=cs)  # PLT PIE___________________________

                            plt.legend(legende, loc='center left', bbox_to_anchor=(1, 0.5)).get_frame().set_alpha(0.5)
                            # plt.legend(fracs, loc="best",prop={'size':10})

                            plt.title(' TAUX UTILISATION TECHNOS (Global) ',bbox={'facecolor': '0.8', 'pad': 5},)

                            #______________________________technos  detailles_________________________________
                            legende2 = []
                            fracs2 = []
                            for key, value in taux_technos.iteritems():
                                legende2.append(key + ' ' + str(round(value,2)) + ' %')
                                fracs2.append(value)

                            from matplotlib import cm
                            import numpy as np
                            a = np.random.random(40)
                            cs = cm.Set1(np.arange(40) / 40.)

                            plt.subplot2grid((4, 4), (0, 2),rowspan=2)  # SUBLOT
                            plt.pie(fracs2, shadow=True, startangle=90, colors=cs)  # PLT PIE___________________________

                            plt.legend(legende2, loc='center left', bbox_to_anchor=(1, 0.5)).get_frame().set_alpha(0.5)
                            # plt.legend(fracs, loc="best",prop={'size':10})

                            plt.title( 'TAUX UTILISATION TECHNOS (detaille) ',bbox={'facecolor': '0.8', 'pad': 5}, )

                            figManager = plt.get_current_fig_manager()
                            figManager.window.showMaximized()
                            plt.show()








                            # ________________________________________________--___**_FIN MATPLOTLIB _**___--___________________________________________________



                        val4=0
                        if __name__ == '__main__':

                            technos(reader, val1, val2, val3, val4, val5, tech,departement)

                data_avec_dpt_filtre(val1, val2, val3, tech, val5, departement, file)


        #__________________________________---Choix date---________________________________________-------___________________________________
        global value1 # DATE DEPART
        value1 = combo.get()
        #print("value 1:  "+value1)

        global value2 #DATE ARRIVEE
        value2 = combo2.get()

        global val5  # OS
        val5 = combo3.get()

        global departement
        departement=combo4.get()
        #print(departement)
        #print("value 3:  " + value3)
        if val5=='ALL':
            val5=['iOS','Android','Unknown','']
        if val5=='Android':
            val5=['Android']
        if val5=='iOS':
            val5=['iOS']
        if val5=='AUTRES':
            val5=['']
        if val5=='Unknown':
            val5=['Unknown']

        if value1 and value2 and val5 and departement:

            global csvfile
            #csvfile = ouvrir_fich()
            #csvfile=lefichier.fichier
            # -------------------------------------------------------------------------------DEBUT--------------------------------------------------------------------------------
            #__________________________________--------------************--------------EX FONCTION SELECT-------------------*****************-----------___________________________
            # -------------------------------------------------------------------------------DEBUT--------------------------------------------------------------------------------

            import tkinter as tk
            #try:
                #import Tix as tix  # Python27
            #except ImportError:
                #import tkinter.tix as tix  # Python31+

            # choix1.geometry("+50+150")
            #choix.geometry("500x600+20+50")
            s = ttk.Style()
            global frame2

            #choix.mainloop()
            #Label(ttk.Frame, text="SCENARIO                    TECHNO").pack(side='top')
            #SCENARIO
            s.configure('My.TFrame', background='white', label='SFR',Scrollbar=True)
            frame = ttk.Frame(choix, padding=(70, 70, 160, 160), style='My.TFrame')
            frame.grid(column=4, row=15, sticky=(N, S, E, W))


            #Label(choix, text="    SCENARIOS", font=("Helvetica", 15, "bold"), fg='white', bg='black').pack()
            #Label(choix, text="            TECHNO", font=("Helvetica", 15, "bold"), fg='white', bg='black').pack()
            #labelframe.pack(fill="both", expand="yes")

            #TECNO
            frame2 = ttk.Frame(choix, padding=(70, 70, 160, 160), style='My.TFrame')
            frame2.grid(column=5, row=15, sticky=(N, S, E, W))

            #BOUTON RECHERCHE
            frame4 = ttk.Frame(choix, padding=(183, 0, 0, 0), style='My.TFrame')
            frame4.grid(column=4, row=14, sticky=(N, S, E, W))

            #RECHERCHE
            frame3 = ttk.Frame(choix, padding=(70, 10, 0, 0), style='My.TFrame')
            frame3.grid(column=4, row=13, sticky=(N, S, E, W))

            # frame.config(bg='black')

            #s1 = Scrollbar(frame)
            # l1 = Tk.Listbox(f1)

            # choix = Tk()
            # print(str(csvfile))

            # csvfile = ouvrir_fich()
            #csv_opner_result = re.compile(r".*u'(D:.*)'\, .*", re.IGNORECASE)
            #f = csv_opner_result.search(str(csvfile))

            #reader = f.group(1)
            # print(reader)

            #csvfile = open(reader, 'r')
            # print(csvfile)
            #reader = csv.reader(csvfile, delimiter=';')

            #date_test = re.compile(r".*([0-9][0-9][0-9][0-9]\-[0-9][0-9]\-[0-9][0-9]) .*", re.IGNORECASE)
            #scenario_test = re.compile(r".*('Scenario Label \[campaign\_label\]').*", re.IGNORECASE)

            b = ''
            z = False
            l = 0
            g = 0
            k = 0
            d = ''
            tec=''

            techno_ = []
            date = []
            k = []
            # RECUPERATION DATE ET SCENARIO

            techno_.append('ALL')
            techno_.append('2G')
            techno_.append('3G')
            techno_.append('4G')
            techno_.append('WIFI')
            techno_.append('INCONNU')
            #print(scenario)
            scenario=list(scenario)
            #print(scenario)
            #print(len(scenario))
                    # b = str(f.group(1)) #RECUPERATION DE LA DATE
            # scrollbar = Scrollbar(choix)


            #date.reverse()



            makeitastring = ' '.join(map(str, scenario))
            # print(scenario)
            #print(scenario)
            #print(len(scenario))

            makeitastring = (makeitastring)
            # print(makeitastring)
            # scrollbar2 = Scrollbar(frame, orient=VERTICAL)
            # scrollbar2.grid(column=2, row=2, sticky='EW')

    # _____-************************-__________________________________________________________________________________________________________________________________
            #SELECTION DES SCENARIOS

            #LES SCENARIOS
            global valores
            valores = StringVar()
            valores1 = tuple(scenario)
            valores.set(valores1)
            #print(valores)
            #print(valores1)

            #LA TECNO
            global valores2
            valores2 = StringVar()
            valores3 = tuple(techno_)
            valores2.set(valores3)

            #SCENARIO
            lstbox = Listbox(frame, listvariable=valores, selectmode=MULTIPLE, width=30, height=10, fg='OrangeRed2',bg='white')
            lstbox.grid(column=0, row=3, columnspan=2)
            #vbar = Scrollbar(lstbox, orient=VERTICAL)
            #lstbox.config(yscrollcommand=vbar.set)
            #vbar.config(command=lstbox.yview)

            #lstbox.pack(side=LEFT, fill=BOTH, expand=1)
            #lstbox.grid(column=0, row=3)
            #vbar.grid(column=0, sticky=N+S)
            #scrollbar.config(command=lstbox.yview)
            #scrollbar.pack(side=RIGHT, fill=Y)

            #RECHERCHE
            v = StringVar()
            e = Entry(frame3,textvariable=v)
            e.grid(column=0, row=3)
            #e.grid_bbox(0, 3,0,2)
            e.pack()
            e.focus_set()

            #v.set("a default value")
            lstbox2 = Listbox(frame2, listvariable=valores2, selectmode=MULTIPLE, width=30, height=10, fg='red',bg='white')
            lstbox2.grid(column=0, row=3, columnspan=2)

            #___________________________________________________HEREEEEEE##################################################################**********
            def callback(frame, frame2,scenario,techno_,lstbox):
                text = v.get()
                v.set(text)
                #print(text)
                #frame.destroy()
                #frame2.destroy()

                import tkinter as tk
                #try:
                    #import Tix as tix  # Python27
                #except ImportError:
                    #import tkinter.tix as tix  # Python31+

                # choix1.geometry("+50+150")
                # choix.geometry("500x600+20+50")
                s = ttk.Style()


                # SCENARIO
                s.configure('My.TFrame', background='white', label='SFR')
                frame = ttk.Frame(choix, padding=(70, 70, 160, 160), style='My.TFrame')
                frame.grid(column=4, row=15, sticky=(N, S, E, W))

                # TECNO
                frame2 = ttk.Frame(choix, padding=(70, 70, 160, 160), style='My.TFrame')
                frame2.grid(column=5, row=15, sticky=(N, S, E, W))

                # LES SCENARIOS
                global valores
                valores = StringVar()
                valores1 = tuple(scenario)
                valores.set(valores1)

                # LA TECNO
                global valores2
                valores2 = StringVar()
                valores3 = tuple(techno_)
                valores2.set(valores3)
                #print(lstbox)
                for elementes in scenario:
                    if text in elementes or text.lower() in elementes or text.upper() in elementes:
                        lstbox.insert(0,elementes)

                # SCENARIO
                lstbox = Listbox(frame, listvariable=valores, selectmode=MULTIPLE, width=30, height=10, fg='green',
                                 bg='white')
                lstbox.grid(column=0, row=3, columnspan=2)
                lstbox2 = Listbox(frame2, listvariable=valores2, selectmode=MULTIPLE, width=30, height=10, fg='red',
                                  bg='white')
                lstbox2.grid(column=0, row=3, columnspan=2)
                lstbox.update()





                #print(v)
            #b = Button(choix, text="get", width=10, command=callback)
            #b.pack()

            btn3 = ttk.Button(frame4, text='Rechercher',command=lambda: callback(frame,frame2,scenario,techno_,lstbox))
            btn3.grid(column=2, row=2)
            #lstbox3 = Listbox(frame3, listvariable=valores, selectmode=MULTIPLE, width=30, height=1, fg='grey',bg='white')
            #lstbox3.grid(column=0, row=3)

            #namelbl = ttk.Label(lstbox, text="SCENARIO")
            #name = ttk.Entry(frame)
            #TECNO


            def choix_techno(value1, value2, value3,val5,departement, csvfile):
                btn8 = ttk.Button(frame2, text='ok',command=lambda: select_with_tech(value1, value2, value3, val5,departement, csvfile))
                btn8.grid(column=0, row=4)

            # lstbox = Listbox(frame, listvariable=valores, selectmode=MULTIPLE, width=20, height=10, yscrollcommand=scrollbar2.set)  # LISTBOX
            # scrollbar2.config(command=mapLBox.yview)
            # lstbox.grid(column=2, row=2, sticky='EW')
            # lstbox.grid(column=0, row=0, columnspan=2)

            # print(makeitastring)
            # print(valores.get())

            """
            def select():
                global reslist
                global seleccion
                reslist = list()
                seleccion = lstbox.curselection()  # PRENDRE EN COMPTE LA SELECTION
                for i in seleccion:
                    entrada = lstbox.get(i)
                    reslist.append(entrada)
                #for val in reslist:
                    #print(val)

                def clear():
                    del reslist[:]
                    lstbox.select_clear(0, END)  # DESELECTIONNER CE QUI A ETE SELECTIONNE

                btn2 = ttk.Button(frame, text='Annuler', command=clear)
                btn2.grid(column=1, row=1)

                return reslist
            """

            def detruire():
                frame.destroy()
                frame2.destroy()
                frame3.destroy()
                frame4.destroy()
                root.destroy()
                choix.geometry("300x345+20+50")

            # btn = ttk.Button(frame, text="Valider", command=exec_voix(event))
            # btn.grid(column=0, row=1)
            # frame.bind('<ButtonRelease-1>', exec_voix)

            #def valider(value1, value2, value3, tech, val5, csvfile):


            def clear2():
                del value3[:]
                lstbox2.select_clear(0, END)  # DESELECTIONNER CE QUI A ETE SELECTIONNE
                #btn3 = ttk.Button(frame, text='ok', command=lambda: select(value1, value2, csvfile))
                btn6 = ttk.Button(frame2, text='Cancel', command=lambda: clear2())
                btn6.grid(column=0, row=4)
                #btn3.grid(column=0, row=1)

            def select_with_tech(value1, value2, value3, val5,departement, csvfile):
                value1=value1
                value2=value2
                csvfile=csvfile
                #print("JE SUIS ICI")

                #lobal tech
                global seleccion2
                tech = list()
                seleccion2 = lstbox2.curselection()  # PRENDRE EN COMPTE LA SELECTION
                for i in seleccion2:
                    entrada2 = lstbox2.get(i)
                    tech.append(entrada2)
                    #for val in value3:
                        #print(val)
                    #print(entrada2)
                #print(tech)
                btn6 = ttk.Button(frame2, text='Cancel', command=lambda: clear2())
                btn6.grid(column=1, row=4)
                btn7 = ttk.Button(frame2, text='Valider',command=lambda: lancer(value1, value2, value3, tech, val5,departement, csvfile))
                btn7.grid(column=0, row=4)





            def select(value1,value2,val5,departement,csvfile):
                value1=value1
                value2=value2
                csvfile=csvfile

                global value3
                global seleccion
                value3 = list()
                seleccion = lstbox.curselection()  # PRENDRE EN COMPTE LA SELECTION
                for i in seleccion:
                    entrada = lstbox.get(i)
                    value3.append(entrada)
                    #for val in value3:
                        #print(val)
                    #print(value3)
                #print(value3)
                if 'ALL' in value3:
                    value3=scenario

                btn5 = ttk.Button(frame, text='Valider', command=lambda: choix_techno(value1, value2, value3,val5,departement, csvfile))
                btn5.grid(column=0, row=4)
                #btn3 = ttk.Button(frame, text='ok', command=lambda: select(value1, value2, val5, csvfile))
                #btn3.grid(column=0, row=4)


            def select2(value1,value2,val5,csvfile):
                value1=value1
                value2=value2
                csvfile=csvfile

                #global value3
                #global seleccion
                #value3 = list()
                #seleccion = lstbox.curselection()  # PRENDRE EN COMPTE LA SELECTION
                #btn3 = ttk.Button(frame, text='Valider', command=lambda: lancer2(value1, value2,val5, csvfile))
                #btn3.grid(column=1, row=2)

            def clear():

                del value3[:]
                lstbox.select_clear(0, END)  # DESELECTIONNER CE QUI A ETE SELECTIONNE
                btn3 = ttk.Button(frame, text='ok', command=lambda: select(value1,value2,val5,csvfile))
                btn3.grid(column=0, row=4)

            def clear_custom():
                #del value3[:]
                lstbox.select_clear(0, END)  # DESELECTIONNER CE QUI A ETE SELECTIONNE
                btn3 = ttk.Button(frame, text='ok', command=lambda: select(value1, value2, val5, csvfile))
                btn3.grid(column=0, row=4)

            #print(value3)
            #btn3 = ttk.Button(frame, text='Valider', command=lambda : lancer(value1,value2,value3,csvfile))
            btn3 = ttk.Button(frame, text='ok', command=lambda: select(value1,value2,val5,departement,csvfile))
            btn3.grid(column=0, row=4)
            #btn4 = ttk.Button(frame, text='Default', command=lambda: select2(value1, value2,val5, csvfile))
            #btn4.grid(column=1, row=)
            btn2 = ttk.Button(frame, text='Cancel', command=clear_custom)
            btn2.grid(column=1, row=4)
            ttk.Style().configure('green/black.TLabel', relief="flat", foreground='white', background='red')
            btnn = ttk.Button(frame, text=" --> Menu Principal ", command=detruire, style='green/black.TLabel')
            # btnn.configure(bg="red")
            btnn.grid(column=0, row=6, sticky=(N, S, E, W))

            ttk.Style().configure('yellow/black.TLabel', relief="flat", foreground='black', background='white')
            btnn = ttk.Button(frame, text="CHOIX SCENARIO", style='yellow/black.TLabel')
            # btnn.configure(bg="red")
            btnn.grid(column=0, row=0, sticky=(N, S, E, W))

            btnn = ttk.Button(frame2, text="CHOIX TECHNO", style='yellow/black.TLabel')
            # btnn.configure(bg="red")
            btnn.grid(column=0, row=0, sticky=(N, S, E, W))


            choix.mainloop()

            #FIN DE SELECTION DES SCENARIOS
    #______-*******************************-________________________________________________________________________________________________________________________________

        #------------------------------------------------------------------------------------FIN------------------------------------------------------------------------------------

        #------------------------------------------------------------------------------------FIN------------------------------------------------------------------------------------


    date = []
    etat = []

    date_cumul = 0

    z = 0
    a = []
    b = 0



    reader = csv.reader(lefichier.fichier)



    date_test = re.compile(r".*([0-9][0-9][0-9][0-9]\-[0-9][0-9]\-[0-9][0-9]) .*", re.IGNORECASE)
    scenario_test = re.compile(r".*('Scenario Label \[campaign\_label\]').*"
                           , re.IGNORECASE)

    b = ''

    scenario=[]
    os=dict()

    #RECUPERATION OS


    key = "ALL"
    os.setdefault(key, [])

    #os.setdefault(key, [])

    #os['Belkacem'] = 'KAID'
    #RECUPERATION DATE ET SCENARIO
    scenario.append('ALL')
    for row in reader:
        #f = date_test.search(row[1])
        f = row[1][0:10]
        #print(f)
        a = row[161]
        o=row[240]
        if f in 'date_utc_agent' or 'date_utc_agent' in f:
            variable = (f)
            # print(int(val1[-2:]) - 2)
            continue

        # RECUPERATION DATE
        #if f and b != str(f.group(1)):

        if b != f and f not in date:

            #date.append(f.group(1))
            date.append(f)
            b=f
            #b = str(f.group(1))

        # RECUPERATION SCENARIOS
        k = scenario_test.search(row[221])
        d = row[241]
        if d=='campaign_label':
            continue
        if d not in scenario:
            scenario.append(str(d))

        #RECUPERATION OS
        if o:
            if o not in os:
                os[key].append(o)
                os[o]=o
                #os['Belkacem'].append(o)
    android_ios='Android & ios'
    os[android_ios]=['Android','iOS']
    for k in os.keys():
        try:
            if len(os[k]) < 1:
                del os[k]
        except:
            pass


    date.reverse()
    #print(scenario)
    #print(date)
    #sorted(os, key=operator.itemgetter("ALL"))


    def defocus(event):
        event.widget.master.focus_set()

    import Tix as tix

    #import tkinter.tix as tix
    #try:
        #import Tix as tix  # Python27
    #except ImportError:
        #import tkinter.tix as tix  # Python31+



    #import Tkinter as Tk
    root = Tk()
    root.attributes('-alpha', 0.8)
    # choix1 = Tk()
    # choix1.title("Multiple Choice Listbox")
    # choix1 = tix.Tk()
    root.config(bg='white')

    # use width x height + x_offset + y_offset (no spaces!)
    Label(root, text="SFR", font=("Helvetica", 20, "bold"), fg='red', bg='white').pack()
    Label(root, text="                  SELECTION OS                   ", font=("Helvetica", 10, "bold"), fg='black',bg='white').pack()
    Label(root,text="   DATE DEBUT                                                                                                     DATE FIN           ",font=("Helvetica", 10, "bold"), fg='black', bg='white').pack()

    root.geometry("%dx%d+%d+%d" % (640, 200, 738, 150))
    root.title("Interval")

    #print(os)
    os_remaked=['ALL','Android & ios','Android','iOS','Unknown']
    # COMBO 1_______________________
    combo = ttk.Combobox(root, values=date)
    #combo.config(bg='white')
    #Label(combo, text="start", font=("Helvetica", 10, "bold"), fg='red', bg='black').pack(side='left')
    combo.pack(side='left', padx=10, pady=10)
    #date=date.reverse()
    #for item in date:
        #combo.insert('end', item)

    # COMBO 2________________________
    combo2 = ttk.Combobox(root, values=date)
    #Label(combo2, text="end", font=("Helvetica", 10, "bold"), fg='red', bg='black').pack(side='right')
    combo2.pack(side='right', padx=10, pady=10)
    #date = date.reverse()
    #for item2 in date:
        #combo2.insert('end', item2)
    # left mouse click on a list item to display selection

    # COMBO 3________________________
    #print(os)
    combo3 = ttk.Combobox(root,values=os_remaked)
    #Label(combo3, text="OS", font=("Helvetica", 10, "bold"), fg='red', bg='black').pack(side='top')
    combo3.pack(side='top', padx=10, pady=10)
    # date = date.reverse()
    #for item3 in os:
        #combo3.insert('end', item3)
        # left mouse click on a list item to display selection

    #Label(root, text=" ", font=("Helvetica", 10, "bold"), fg='black',bg='white').pack()
    #region1 = Label(root, text="                    REGION                   ", font=("Helvetica", 10, "bold"),fg='black', bg='white').pack()
    # COMBO 4________________________
    # print(os)
    departement_list = ['TOUT DPTs', 'Ain', 'Aisne', 'Allier', 'Alpes_de_Haute-Provence', 'Hautes-Alpes',
                        'Alpes-Maritimes', 'Ardeche', 'Ardennes', 'Ariege', 'Aube', 'Aude', 'Aveyron',
                        'Bouches_du_Rhone', 'Calvados', 'Cantal', 'Charente', 'Charente_Maritime', 'Cher', 'Correze',
                        'Cote_dOr', 'Cotes_dArmor', 'Creuse', 'Dordogne', 'Doubs', 'Drome', 'Eure', 'Eure-et-Loir',
                        'Finistere', 'Gard', 'Haute-Garonne', 'Gers', 'Gironde', 'Herault', 'Ille-et-Vilaine', 'Indre',
                        'Indre-et-Loire', 'Isere', 'Jura', 'Landes', 'Loir-et-Cher', 'Loire', 'Haute-Loire',
                        'Loire-Atlantique', 'Loiret', 'Lot', 'Lot-et-Garonne', 'Lozere', 'Maine-et-Loire', 'Manche',
                        'Marne', 'Haute-Marne', 'Mayenne', 'Meurthe-et-Moselle', 'Meuse', 'Morbihan', 'Moselle',
                        'Nievre', 'Nord', 'Oise', 'Orne', 'Pas-de-Calais', 'Puy-de-Dome', 'Pyrenees-Atlantiques',
                        'Hautes-Pyrenees', 'Pyrenees-Orientales', 'Bas-Rhin', 'Haut-Rhin', 'Rhone', 'Haute-Saone',
                        'Saone-et-Loire', 'Sarthe', 'Savoie', 'Haute-Savoie', 'Paris', 'Seine-Maritime',
                        'Seine-et-Marne', 'Yvelines', 'Deux-Sevres', 'Somme', 'Tarn', 'Tarn-et-Garonne', 'Var',
                        'Vaucluse', 'Vendee', 'Vienne', 'Haute-Vienne', 'Vosges', 'Yonne', 'Territoire-de-Belfort',
                        'Essonne', 'Hauts-de-Seine', 'Seine-St-Denis', 'Val-de-Marne', 'Val-dOise', 'Corse_du_Sud',
                        'Haute-Corse']

    Label(root, text="                    DEPARTEMENT                   ", font=("Helvetica", 10, "bold"), fg='black',bg='white').pack()

    combo4 = ttk.Combobox(root,values=departement_list)
    #label_region=ttk.Label(root,text='Departement')
    #label_region.pack(side=TOP, fill=X, expand=1)
    #label_region=ttk.Label('Departement')
    #label_region.pack(side='bottom')
    # Label(combo3, text="OS", font=("Helvetica", 10, "bold"), fg='red', bg='black').pack(side='top')
    combo4.pack(side='bottom', padx=10, pady=10)

    index4=1
    #for item4 in departement_list:
        #print(index4)
    #combo4.insert('end',departement_list)
        #index4=index4+1
        # left mouse click on a list item to display selection


    for item in scenario:
        scenario[scenario.index(item)] = '_'.join(item.split(" "))


    combo.bind('<<ComboboxSelected>>', lambda event: exec_voix(scenario,event))
    combo2.bind('<<ComboboxSelected>>', lambda event: exec_voix(scenario,event))
    combo3.bind('<<ComboboxSelected>>', lambda event: exec_voix(scenario,event))
    combo4.bind('<<ComboboxSelected>>', lambda event: exec_voix(scenario, event))
    #choix_scenario(csvfile)



    root.mainloop()



    """
    fenetre = Tk()
    fenetre.geometry("300x345+20+50")
    fenetre.title("FENETRE DE CHOIX")
    fenetre.config(bg='black')
    fenetre.geometry()

    Label(fenetre, text="").pack()
    Label(fenetre, text="").pack()
    Label(fenetre, text="SFR", font=("Helvetica", 20, "bold"), fg='red', bg='black').pack()
    Label(fenetre, text="").pack()
    b5 = Button(fenetre, text="     VOIX   ", width=15, height=1, relief=GROOVE, command=voix, fg='white',
                bg='red').pack()
    b6 = Button(fenetre, text="       QUITTER         ", width=15, height=1, relief=GROOVE, command=quitter_prog,
                fg='white', bg='red').pack()
    Label(choix, text="").pack()
    label = Label(fenetre, text="SFR PERF", fg='white', bg='black').pack()
    Label(fenetre, text="").pack()
    # photo = open(file="logo-3.jpg")
    # Label= Label(fenetre,image="logo-3.jpg").pack() # keep a reference!
    choix.mainloop()
    """

def ticket_profil():
    date = []
    etat = []
    csvfile = ouvrir_fich()
    # print(csvfile)
    csv_opner_result = re.compile(r".*u'(.*:.*)'\, .*"
                                  , re.IGNORECASE)

    # for i in csvfile:
    f = csv_opner_result.search(str(csvfile))

    # print(f.group(1))


    z = 0
    a = []
    b = 0
    fichier = open(f.group(1), 'r')
    reader = csv.reader(csvfile, delimiter=';')

    date_test = re.compile(r".*([0-9][0-9][0-9][0-9]\-[0-9][0-9]\-[0-9][0-9]) .*"
                           , re.IGNORECASE)

    dqaid = []
    a = 0
    b = 0

    fichier = open(f.group(1), 'r')
    reader = csv.reader(fichier, delimiter=';')
    date_exe = []
    umts = 0.0
    na = 0.0
    lte = 0.0
    edge = 0.0
    gprs = 0.0
    hspa = 0.0
    hspa_p = 0.0
    hspda = 0
    # dual_carrier=0
    trois_g = 0.0
    autre = 0.0

    fichier = open(f.group(1), 'r')
    reader = csv.reader(fichier, delimiter=';')

    date_test = re.compile(r".*([0-9][0-9][0-9][0-9]\-[0-9][0-9]\-[0-9][0-9]) .*"
                           , re.IGNORECASE)

    b = ''

    t = 0
    a = 0
    list_dqaid = []
    dqaid = []
    var = 0
    var2 = 0
    nb_profile_jour = []
    for row in reader:
        f = date_test.search(row[1])

        if f and b != str(f.group(1)):
            # if t>0:
            date_exe.append(f.group(1))
            nb_profile_jour.append(a)
            b = str(f.group(1))
            a = 0
            t = t + 1
            # if var2 >0:
            list_dqaid.append(dqaid)
            # list_dqaid.append('----------')
            # dqaid.remove()
            del dqaid
            dqaid = []

        key = row[0]
        if key not in dqaid:
            if var == 0:
                # print(a)
                # dqaid.append(key+'----')
                # dqaid.append(key)
                var = var + 1
                continue

            dqaid.append(key)
        a = a + 1
        # var2=var2+1

    # date_exe=date_exe.reverse()


    date_exe.reverse()
    # nb_profile_jour.reverse()
    # list_dqaid.reverse()
    # print(date_exe)
    # print(nb_profile_jour)
    # print(list_dqaid)


    x = [dt.datetime.strptime(d, '%Y-%m-%d').date() for d in date_exe]
    y = nb_profile_jour
    # plt.subplot(221)
    plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y/%m/%d'))
    plt.gca().xaxis.set_major_locator(mdates.DayLocator())
    plt.bar(x, y, label='Nb DQAID %', color='brown')
    plt.xlabel('Jour')
    plt.ylabel('Nb Users')
    plt.grid(True)
    plt.title('Nb Users ' + date_exe[0] + ' au ' + date_exe[len(date_exe) - 1])
    plt.legend()
    plt.gcf().autofmt_xdate()
    # plt.show()

    import matplotlib.pyplot as plt2

    plt.show()

    var = 0
    import Tkinter as tk
    def cbc(id, tex):
        return lambda: callback(id, tex)

    def callback(id, tex):
        id = id + 1
        tex.delete('1.0', END)
        s = list_dqaid[id]
        tex.insert(tk.END, s)
        tex.see(tk.END)  # Scroll if necessary

    a = 0
    # vision=Tk()
    top = tk.Tk()

    tex = tk.Text(master=top)
    tex.pack(side=tk.RIGHT)
    bop = tk.Toplevel
    bop = Frame()
    bop.pack(side=tk.LEFT)
    # scrollbar=tk.Scrollbar(top).pack(side=RIGHT, fill=Y)


    for k in date_exe:
        # if a==16:
        # top = tk.Tk()
        # top.wm_geometry("200x150+100+50")
        tv = format(k)
        b = tk.Button(top, text=tv, command=cbc(var, tex))
        var = var + 1
        a = a + 1
        b.pack()

    tk.Button(top, text='Exit', command=top.destroy).pack()
    # scrollbar = tk.Scrollbar(top).pack(side=LEFT)
    # scrollbar.config(command=top.yview)
    top.mainloop()

#FONCTION DE CALCULES DES TAUX DE KPIS VOIX ET DE GENERATION DE TABLEAU DE BORD
def dashboard_voix():

    choix.geometry("700x360+20+50")

    plt.suptitle('DASHBOARD KPIs VOIX',fontsize=18,bbox={'facecolor': 'white', 'pad': 5})

    class lefichier():
        global csvfile
        csvfile = ouvrir_fich()
        fichier=csvfile
        #print(a) #OUVERTURE FICHIER UNE SEULE FOIS
    #print(str(lefichier.fichier))
    # ___________________________**********************DEBUT********************************____________________________#
    # ------------------------------------------------------------------------------------------------------------------#

    # ------------------------------------------------------------------------------------------------------------------#
    # ___________________________**********************FIN********************************____________________________#



    def exec_voix(event,scenario):
        #print(lefichier.fichier)


        def lancer(val1,val2,val3,tech, val5,departement,file):
            tout = ['2G', 'EDGE', 'GPRS', '3G', 'UMTS', 'Dual Carrier', 'HSUPA', 'HSPA', 'HSPA+', 'HSDPA', '4G', 'LTE','LTE-A', 'WIFI', 'N/A', 'UNKNOWN', 'GSM (2G-3G-4G)']
            LA2G = ['2G', 'EDGE', 'GPRS']
            LA3G = ['3G', 'UMTS', 'Dual Carrier', 'HSUPA', 'HSPA', 'HSPA+', 'HSDPA']
            LA4G = ['4G', 'LTE', 'LTE-A']
            LAWIFI = ['WIFI']
            LINCONNU = ['N/A', 'UNKNOWN']

            #print(departement)
            if '2G' in tech:
                for elem2 in LA2G:
                    tech.append(elem2)
            if '3G' in tech:
                for elem3 in LA3G:
                    tech.append(elem3)
            if '4G' in tech:
                for elem4 in LA4G:
                    tech.append(elem4)
            if 'WIFI' in tech:
                for elem5 in LAWIFI:
                    tech.append(elem5)
            if 'INCONNU' in tech:
                for elem6 in LINCONNU:
                    tech.append(elem6)
            if 'ALL' in tech:
                for elem in tout:
                    tech.append(elem)
            print("________________PLEASE WAIT____________________")
            if departement in 'TOUT DPTs':
                def sans_dpt_filter_voix(val1,val2,val3,tech, val5,departement,file):
                    if val1 and val2 :
                        plt.suptitle('DASHBOARD KPI VOIX TOUT DEPARTEMENTS')
                        figure_voix=plt.figure(1)
                        figure_voix.patch.set_facecolor('white')

                        import datetime as dt
                        #print(val1)
                        #print(val2)
                        #print(val3)
                        #print(tech)
                        #print(val5)


                        #choix_scenario()
                        #print(value1)
                        #print(value2)

                        #file = ouvrir_fich()
                        #global  value2
                        #global  value1
                        #value2 = combo2.entry.get()
                        #print(value1)
                        #print(value2)

                        csv_opner_result = re.compile(r".*'(.*:.*)'\, .*", re.IGNORECASE)
                        csv_opner_result_reseau = re.compile(r".*'(.*agora10.*\.csv).*", re.IGNORECASE)
                        if csv_opner_result.search(str(file)):
                            f = csv_opner_result.search(str(file))
                        else:
                            f=csv_opner_result_reseau.search(str(file))

                        # fichier = open(f.group(1), 'r')
                        # print(f.group(1))
                        # reader = csv.reader(fichier, delimiter=';')
                        reader = f.group(1)



                        # voix


                        def voix(fichier_voix, val1, val2, val3, val4, val5, tech):
                            # print(val3)
                            # print('Tu es dans la fonction Succes et tu as VAL1: '+val1)
                            # print('Tu es dans la fonction Succes et tu as VAL2: '+val2)
                            import datetime
                            #format_date_generale = "%Y-%m-%d"
                            date_debut = datetime.datetime.strptime(val1, "%Y-%m-%d")
                            date_fin = datetime.datetime.strptime(val2,"%Y-%m-%d")

                            fichier_voix = fichier_voix
                            date = []
                            csvfile = open(fichier_voix, 'r')
                            # reader = csv.reader(csvfile, delimiter=';')
                            #reader = csv.reader(csvfile, delimiter=';')
                            reader = csv.reader(csvfile)

                            #VERIFICATEUR D UNE NOUVELLE JOURNEE ATTEINTE
                            b = ''
                            #Variable d ajout aux ensemble apres ajout de la date
                            var_ajout = 0.0

                            # VARIABLES DES ETATS
                            nb_succes_voix_set = []
                            taux_succes_voix_set = []
                            taux_succes_voix = 0.0
                            nb_succes_voix = 0.0
                            nb_etat = 0.0

                            nb_failure_voix_set = []
                            taux_failure_voix_set = []
                            taux_failure_voix = 0.0
                            nb_failure_voix = 0.0

                            nb_drop_voix_set = []
                            taux_drop_voix_set = []
                            taux_drop_voix = 0.0
                            nb_drop_voix = 0.0

                            nb_csfb_voix_set = []
                            taux_csfb_voix_set = []
                            taux_csfb_voix = 0.0
                            nb_csfb_voix = 0.0
                            nb_etat_csfb = 0.0


                            #etats incoming outgoing
                            succes_incoming = 0.0
                            drop_incoming=0.0
                            failure_incoming=0.0
                            nb_etat_incoming=0.0
                            succes_outgoing = 0.0
                            drop_outgoing = 0.0
                            failure_outgoing = 0.0
                            nb_etat_outgoing = 0.0

                            #CAUSES CODES
                            one = 0.0 #COVERAGE LOST
                            two = 0.0 #Multi-RAB testing -> potential CORE issue
                            three = 0.0 #Low coverage -> potential radio issue
                            four = 0.0 #User behaviour
                            five = 0.0 #Call Attempt Failure notified by OS -> radio limitation
                            six = 0.0 #4G calls without 2G-3G fallback
                            seven = 0.0 #Estimated time to qualify call as CAF
                            eight = 0.0 #Force 2G for unknown bearer calls
                            succes = 0.0 #SUCCES DE L APPEL -> ETAT PROPRE A ANDROID
                            notconnected = 0.0 #ANNULATION PAR L APPELANT  -> CONSIDERE COMME SUCCES
                            caf = 0.0 #ECHEC DE L APPEL
                            connected=0.0 #SUCCES DE L APPEL (APPEL EMIS) -> ETAT PROPRE A APPLE -> PAS TRES PRECIS
                            drop=0.0 #COUPURE -> VERIFIE DANS LE CAS DE TERMINAL APPLE
                            nb_cause_code=0.0 #LE TOTAL DES CAUSES CODES

                            #PARC MOBBILE
                            mobile={}
                            taux_mobile={}
                            parc_mobile_total=0.0
                            nombre_mobile_inf_3pourcent=0.0
                            camemberts_mobile=[]
                            legende_mobile=[]

                            #TECNO
                            tecno_totale=0.0
                            deux_g=0.0
                            trois_g=0.0
                            quatre_g=0.0
                            autre_tecno=0.0

                            #NOMBRE CLIENTS ACTIFS
                            list_dqaid=[]
                            dqaid_par_jour=[]
                            nombre_dqaid_var=0.0

                            #FICHIER CONTENANT DQAID PAR JOURS
                            dqaid_file = open("dqaid.txt", "w")
                            dqaid_file.write("\n\n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n")
                            dqaid_file.write("-------------------------------------------------------------------------------------------------")
                            dqaid_file.write("           LISTE DES DQAID PAR JOURS           ")
                            dqaid_file.write("--------------------------------------------------------------------------------------------------")
                            dqaid_file.write("\n\n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n")

                            # VARIABLES VoLTE
                            nb_volte_voix_set = []
                            taux_volte_voix_set = []
                            taux_volte_voix = 0.0
                            nb_volte_voix = 0.0
                            nb_etat_volte = 0.0
                            fichier=open('roche.txt','w')
                            date_secondaire='0'

                            # TEST FIN FICHIER
                            row_check = 0.0

                            for row in reader:
                                dqaid_row=row[0]
                                f = row[1][0:10]
                                row_volte=row[59]
                                cs = row[204]
                                tecc = row[215]
                                a = row[167]#CAUSE CODE
                                model_terminal=row[210]
                                if f == 'date_utc_a':
                                    continue
                                datef = datetime.datetime.strptime(f, "%Y-%m-%d")
                                if datef > date_fin:
                                    continue

                                if datef < date_debut:
                                    dqaid_par_jour.append(nombre_dqaid_var)
                                    dqaid_file.write(
                                        "\n\n _____________________________________________________________________________________\n\n")
                                    dqaid_file.write("LE " + date_secondaire + "  LES " + str(
                                        nombre_dqaid_var) + " DQAID " + " QUI ONT ENVOYE DES DONNEES SONT: \n\n\n")
                                    ecrivain = 0.0
                                    for element in list_dqaid:
                                        ecrivain = ecrivain + 1
                                        dqaid_file.write(element + '   ')
                                        if ecrivain == 5:
                                            dqaid_file.write('\n')
                                            ecrivain = 0.0
                                    dqaid_file.write(
                                        "\n\n _____________________________________________________________________________________\n\n")
                                    list_dqaid = []
                                    nombre_dqaid_var = 0.0

                                    if nb_etat == 0.0:
                                        taux_succes_voix_set.append(0.0)
                                        nb_succes_voix_set.append(0.0)

                                        taux_failure_voix_set.append(0.0)
                                        nb_failure_voix_set.append(0.0)

                                        taux_drop_voix_set.append(0.0)
                                        nb_drop_voix_set.append(0.0)
                                    else:
                                        taux_succes_voix = (nb_succes_voix * 100 / nb_etat)
                                        taux_succes_voix_set.append(taux_succes_voix)
                                        nb_succes_voix_set.append(nb_succes_voix)
                                        taux_failure_voix = (nb_failure_voix * 100 / nb_etat)
                                        taux_failure_voix_set.append(taux_failure_voix)
                                        nb_failure_voix_set.append(nb_failure_voix)
                                        taux_drop_voix = (nb_drop_voix * 100 / nb_etat)
                                        taux_drop_voix_set.append(taux_drop_voix)
                                        nb_drop_voix_set.append(nb_drop_voix)
                                    taux_drop_voix = 0.0
                                    nb_drop_voix = 0.0
                                    taux_failure_voix = 0.0
                                    nb_failure_voix = 0.0
                                    taux_succes_voix = 0.0
                                    nb_succes_voix = 0.0
                                    nb_etat = 0.0
                                    if nb_etat_csfb == 0.0:
                                        nb_csfb_voix_set.append(0.0)
                                        taux_csfb_voix_set.append(0.0)
                                        taux_csfb_voix = 0.0
                                        nb_csfb_voix = 0.0
                                        nb_etat_csfb = 0.0
                                    else:
                                        taux_csfb_voix = (nb_csfb_voix * 100.0 / nb_etat_csfb)
                                        nb_csfb_voix_set.append(nb_csfb_voix)
                                        taux_csfb_voix_set.append(taux_csfb_voix)
                                        taux_csfb_voix = 0.0
                                        nb_csfb_voix = 0.0
                                        nb_etat_csfb = 0.0
                                    # VoLTE
                                    if nb_etat_volte > 0:
                                        taux_volte_voix = (nb_volte_voix * 100.0) / nb_etat_volte
                                        taux_volte_voix_set.append(taux_volte_voix)
                                        nb_volte_voix_set.append(nb_volte_voix)
                                        nb_volte_voix = 0.0
                                        nb_etat_volte = 0.0
                                    else:
                                        taux_volte_voix_set.append(0.0)
                                        nb_volte_voix_set.append(0.0)
                                        nb_volte_voix = 0.0
                                        nb_etat_volte = 0.0
                                    break

                                row[221] = '_'.join(row[221].split(" "))

                                fichier.write(row[221]+'  -->  '+row[213]+' \n')
                                if (str(row[213]) != 'SFR' and row[213]!= 'N/A'):
                                    continue
                                if str(row[221]) in val3 and row[220] in val5 and tecc in tech:

                                    #print('on ma trouve')
                                    variable = val2
                                    date_secondaire = b
                                    if b != str(f):
                                        date.append(str(f))
                                        b = str(f)
                                        if var_ajout > 0:
                                            dqaid_par_jour.append(nombre_dqaid_var)
                                            dqaid_file.write("\n\n _____________________________________________________________________________________\n\n")
                                            dqaid_file.write("LE "+ date_secondaire + "  LES "+ str(nombre_dqaid_var) + " DQAID " + " QUI ONT ENVOYE DES DONNEES SONT: \n\n\n")
                                            ecrivain=0.0
                                            for element in list_dqaid:
                                                ecrivain=ecrivain+1
                                                dqaid_file.write(element + '   ')
                                                if ecrivain ==5:
                                                    dqaid_file.write('\n')
                                                    ecrivain=0.0
                                            dqaid_file.write("\n\n _____________________________________________________________________________________\n\n")
                                            list_dqaid = []
                                            nombre_dqaid_var = 0.0

                                            if nb_etat == 0.0:
                                                taux_succes_voix_set.append(0.0)
                                                nb_succes_voix_set.append(0.0)

                                                taux_failure_voix_set.append(0.0)
                                                nb_failure_voix_set.append(0.0)

                                                taux_drop_voix_set.append(0.0)
                                                nb_drop_voix_set.append(0.0)
                                            else:
                                                taux_succes_voix = (nb_succes_voix * 100 / nb_etat)
                                                taux_succes_voix_set.append(taux_succes_voix)
                                                nb_succes_voix_set.append(nb_succes_voix)
                                                taux_failure_voix = (nb_failure_voix * 100 / nb_etat)
                                                taux_failure_voix_set.append(taux_failure_voix)
                                                nb_failure_voix_set.append(nb_failure_voix)
                                                taux_drop_voix = (nb_drop_voix * 100 / nb_etat)
                                                taux_drop_voix_set.append(taux_drop_voix)
                                                nb_drop_voix_set.append(nb_drop_voix)
                                            taux_drop_voix = 0.0
                                            nb_drop_voix = 0.0
                                            taux_failure_voix = 0.0
                                            nb_failure_voix = 0.0
                                            taux_succes_voix = 0.0
                                            nb_succes_voix = 0.0
                                            nb_etat = 0.0
                                            if nb_etat_csfb == 0.0:
                                                nb_csfb_voix_set.append(0.0)
                                                taux_csfb_voix_set.append(0.0)
                                                taux_csfb_voix = 0.0
                                                nb_csfb_voix = 0.0
                                                nb_etat_csfb = 0.0
                                            else:
                                                taux_csfb_voix = (nb_csfb_voix * 100.0 / nb_etat_csfb)
                                                nb_csfb_voix_set.append(nb_csfb_voix)
                                                taux_csfb_voix_set.append(taux_csfb_voix)
                                                taux_csfb_voix = 0.0
                                                nb_csfb_voix = 0.0
                                                nb_etat_csfb = 0.0
                                            #VoLTE
                                            if nb_etat_volte>0:
                                                taux_volte_voix = (nb_volte_voix*100.0)/nb_etat_volte
                                                taux_volte_voix_set.append(taux_volte_voix)
                                                nb_volte_voix_set.append(nb_volte_voix)
                                                nb_volte_voix = 0.0
                                                nb_etat_volte = 0.0
                                            else:
                                                taux_volte_voix_set.append(0.0)
                                                nb_volte_voix_set.append(0.0)
                                                nb_volte_voix = 0.0
                                                nb_etat_volte = 0.0


                                    var_ajout = var_ajout + 1

                                    #UTILISATEURS ACTIFS PAR JOURS
                                    if dqaid_row not in list_dqaid:
                                        nombre_dqaid_var=nombre_dqaid_var+1
                                        list_dqaid.append(dqaid_row)



                                    #PARC MOBILE
                                    if model_terminal and model_terminal!='' and model_terminal!=' ':
                                        parc_mobile_total=parc_mobile_total+1
                                        if model_terminal not in mobile: #SI C EST LA PREMIERE FOIS QUE JE TROUVE CE MODERLE JE L AJOUTE A MON DICTIONNAIRE EN LE COMPTANT COMME PREMIER
                                            mobile[model_terminal]=1
                                        else: #SINON J INCREMENTE L EXISTANCE DU TERMINAL
                                            mobile[model_terminal]=mobile[model_terminal]+1

                                    #TECNO
                                    if tecc=='2G':
                                        tecno_totale=tecno_totale+1
                                        deux_g=deux_g+1
                                    if tecc=='3G':
                                        tecno_totale=tecno_totale+1
                                        trois_g=trois_g+1
                                    if tecc=='4G':
                                        tecno_totale=tecno_totale+1
                                        quatre_g=quatre_g+1
                                    if tecc=='UNKNOWN':
                                        tecno_totale=tecno_totale+1
                                        autre_tecno=autre_tecno+1



                                    # LES ETATS
                                    if str(row[218]) == 'Success' or str(row[218]) == 'Canceled' or str(row[218]) == 'Not connected' or str(row[218]) == 'Connected':
                                        nb_succes_voix = nb_succes_voix + 1
                                        nb_etat = nb_etat + 1

                                        # SUCCES VOLTE
                                        if row_volte:
                                            if row_volte == 'ims_11' or row_volte == 'ims.vel.site_11':
                                                # nb_volte_voix_set = []
                                                # taux_volte_voix_set = []
                                                # taux_volte_voix = 0.0
                                                nb_volte_voix = nb_volte_voix + 1
                                                nb_etat_volte = nb_etat_volte + 1

                                        if cs :
                                            if cs != 'NULL':
                                                if float(cs)>0 :
                                                    nb_csfb_voix = nb_csfb_voix + 1
                                                    nb_etat_csfb = nb_etat_csfb + 1
                                        # INCOMING OUTGOING
                                        if str(row[219]) == 'Incoming':
                                            succes_incoming=succes_incoming+1
                                            nb_etat_incoming=nb_etat_incoming+1
                                        if str(row[219]) == 'Outgoing':
                                            succes_outgoing = succes_outgoing + 1
                                            nb_etat_outgoing = nb_etat_outgoing + 1


                                    if str(row[218]) == 'Failure' or str(row[218]) == 'CAF':
                                        nb_failure_voix = nb_failure_voix + 1
                                        nb_etat = nb_etat + 1

                                        #VoLTE
                                        if row_volte:
                                            if row_volte == 'ims_11' or row_volte == 'ims.vel.site_11':
                                                nb_etat_volte = nb_etat_volte + 1

                                        if cs:
                                            nb_etat_csfb = nb_etat_csfb + 1
                                        # INCOMING OUTGOING
                                        if str(row[219]) == 'Incoming':
                                            failure_incoming = failure_incoming + 1
                                            nb_etat_incoming = nb_etat_incoming + 1
                                        if str(row[219]) == 'Outgoing':
                                            failure_outgoing = failure_outgoing + 1
                                            nb_etat_outgoing = nb_etat_outgoing + 1

                                    if str(row[218]) == 'Drop':
                                        nb_drop_voix = nb_drop_voix + 1
                                        nb_etat = nb_etat + 1

                                        # VoLTE
                                        if row_volte:
                                            if row_volte == 'ims_11' or row_volte == 'ims.vel.site_11':
                                                nb_etat_volte = nb_etat_volte + 1

                                        if cs:
                                            nb_etat_csfb = nb_etat_csfb + 1
                                        # INCOMING OUTGOING
                                        if str(row[219]) == 'Incoming':
                                            drop_incoming=drop_incoming+1
                                            nb_etat_incoming=nb_etat_incoming+1
                                        if str(row[219]) == 'Outgoing':
                                            drop_outgoing = drop_outgoing + 1
                                            nb_etat_outgoing = nb_etat_outgoing + 1

                                    else:
                                        if str(row[218]) != 'N/A' and str(row[218]) != '' and str(row[218]) != ' 'and str(row[218]) != 'Success' and str(row[218]) != 'Not connected' and str(row[218]) != 'Connected' and str(row[218]) != 'Failure' and str(row[218]) != 'CAF' and str(row[218]) != 'Drop':
                                            nb_etat = nb_etat + 1
                                            var_ajout = var_ajout + 1

                                            # VoLTE
                                            if row_volte:
                                                if row_volte == 'ims_11' or row_volte == 'ims.vel.site_11':
                                                    nb_etat_volte = nb_etat_volte + 1

                                            if cs:
                                                nb_etat_csfb = nb_etat_csfb + 1
                                            # INCOMING OUTGOING
                                            if str(row[219]) == 'Incoming':
                                                nb_etat_incoming = nb_etat_incoming + 1
                                            if str(row[219]) == 'Outgoing':
                                                nb_etat_outgoing = nb_etat_outgoing + 1

                                    if (row[167] == ''):  # IOS
                                        nb_cause_code = nb_cause_code + 1
                                        if row[218] == 'Connected':
                                            connected = connected + 1
                                        if row[218] == 'CAF':
                                            caf = caf + 1
                                        if str(row[218]) == 'Success':
                                            succes = succes + 1
                                        if str(row[218]) == 'Not connected':
                                            notconnected = notconnected + 1
                                        if str(row[218]) == 'Drop':
                                            drop = drop + 1
                                    else:  # ANDROID
                                        nb_cause_code = nb_cause_code + 1
                                        if (a[len(row[167]) - 1] == '1'):
                                            one = one + 1
                                        if (a[len(row[167]) - 1] == '2'):
                                            two = two + 1
                                        if (a[len(row[167]) - 1] == '3'):
                                            three = three + 1
                                        if (a[len(row[167]) - 1] == '4'):
                                            four = four + 1
                                        if (a[len(row[167]) - 1] == '5'):
                                            five = five + 1
                                        if (a[len(row[167]) - 1] == '6'):
                                            six = six + 1
                                        if (a[len(row[167]) - 1] == '7'):
                                            seven = seven + 1
                                        if (a[len(row[167]) - 1] == '8'):
                                            eight = eight + 1
                                        if str(row[218]) == 'Success':
                                            succes = succes + 1
                                        if str(row[218]) == 'Not connected':
                                            notconnected = notconnected + 1



                            if datef >= date_debut:
                                dqaid_par_jour.append(nombre_dqaid_var)
                                dqaid_file.write("\n\n _____________________________________________________________________________________\n\n")
                                dqaid_file.write("LE " + date_secondaire + "  LES " + str(nombre_dqaid_var) + " DQAID " + " QUI ONT ENVOYE DES DONNEES SONT: \n\n\n")
                                ecrivain = 0.0
                                for element in list_dqaid:
                                    ecrivain = ecrivain + 1
                                    dqaid_file.write(element + '   ')
                                    if ecrivain == 5:
                                        dqaid_file.write('\n')
                                        ecrivain = 0.0
                                dqaid_file.write("\n\n _____________________________________________________________________________________\n\n")
                                list_dqaid = []
                                nombre_dqaid_var = 0.0

                                if nb_etat == 0.0:
                                    taux_succes_voix_set.append(0.0)
                                    nb_succes_voix_set.append(0.0)

                                    taux_failure_voix_set.append(0.0)
                                    nb_failure_voix_set.append(0.0)

                                    taux_drop_voix_set.append(0.0)
                                    nb_drop_voix_set.append(0.0)
                                else:
                                    taux_succes_voix = (nb_succes_voix * 100 / nb_etat)
                                    taux_succes_voix_set.append(taux_succes_voix)
                                    nb_succes_voix_set.append(nb_succes_voix)
                                    taux_failure_voix = (nb_failure_voix * 100 / nb_etat)
                                    taux_failure_voix_set.append(taux_failure_voix)
                                    nb_failure_voix_set.append(nb_failure_voix)
                                    taux_drop_voix = (nb_drop_voix * 100 / nb_etat)
                                    taux_drop_voix_set.append(taux_drop_voix)
                                    nb_drop_voix_set.append(nb_drop_voix)
                                taux_drop_voix = 0.0
                                nb_drop_voix = 0.0
                                taux_failure_voix = 0.0
                                nb_failure_voix = 0.0
                                taux_succes_voix = 0.0
                                nb_succes_voix = 0.0
                                nb_etat = 0.0
                                if nb_etat_csfb == 0.0:
                                    nb_csfb_voix_set.append(0.0)
                                    taux_csfb_voix_set.append(0.0)
                                    taux_csfb_voix = 0.0
                                    nb_csfb_voix = 0.0
                                    nb_etat_csfb = 0.0
                                else:
                                    taux_csfb_voix = (nb_csfb_voix * 100.0 / nb_etat_csfb)
                                    nb_csfb_voix_set.append(nb_csfb_voix)
                                    taux_csfb_voix_set.append(taux_csfb_voix)
                                    taux_csfb_voix = 0.0
                                    nb_csfb_voix = 0.0
                                    nb_etat_csfb = 0.0
                                # VoLTE
                                if nb_etat_volte > 0:
                                    taux_volte_voix = (nb_volte_voix * 100.0) / nb_etat_volte
                                    taux_volte_voix_set.append(taux_volte_voix)
                                    nb_volte_voix_set.append(nb_volte_voix)
                                    nb_volte_voix = 0.0
                                    nb_etat_volte = 0.0
                                else:
                                    taux_volte_voix_set.append(0.0)
                                    nb_volte_voix_set.append(0.0)
                                    nb_volte_voix = 0.0
                                    nb_etat_volte = 0.0
                            if nb_etat_incoming == 0.0:
                                succes_incoming = 0.0
                                drop_incoming = 0.0
                                failure_incoming = 0.0
                                #succes_incoming_set.append(0.0)
                                #drop_incoming_set.append(0.0)
                                #failure_incoming_set.append(0.0)

                            else:
                                succes_incoming = (succes_incoming * 100.0) / nb_etat_incoming
                                drop_incoming = (drop_incoming * 100.0) / nb_etat_incoming
                                failure_incoming = (failure_incoming * 100.0) / nb_etat_incoming
                                #succes_incoming_set.append(succes_incoming)
                                #drop_incoming_set.append(drop_incoming)
                                #failure_incoming_set.append(failure_incoming)

                            if nb_etat_outgoing == 0.0:
                                succes_outgoing = 0.0
                                drop_outgoing = 0.0
                                failure_outgoing = 0.0
                                #succes_outgoing_set.append(0.0)
                                #drop_outgoing_set.append(0.0)
                                #failure_outgoing_set.append(0.0)

                            else:
                                succes_outgoing = (succes_outgoing * 100.0) / nb_etat_outgoing
                                drop_outgoing = (drop_outgoing * 100.0) / nb_etat_outgoing
                                failure_outgoing = (failure_outgoing * 100.0) / nb_etat_outgoing
                                #succes_outgoing_set.append(succes_outgoing)
                                #drop_outgoing_set.append(drop_outgoing)
                                #failure_outgoing_set.append(failure_outgoing)
                            if nb_cause_code==0:
                                one = 0.0  # COVERAGE LOST
                                two = 0.0  # Multi-RAB testing -> potential CORE issue
                                three = 0.0  # Low coverage -> potential radio issue
                                four = 0.0  # User behaviour
                                five = 0.0  # Call Attempt Failure notified by OS -> radio limitation
                                six = 0.0  # 4G calls without 2G-3G fallback
                                seven = 0.0  # Estimated time to qualify call as CAF
                                eight = 0.0  # Force 2G for unknown bearer calls
                                succes = 0.0  # SUCCES DE L APPEL -> ETAT PROPRE A ANDROID
                                notconnected = 0.0  # ANNULATION PAR L APPELANT  -> CONSIDERE COMME SUCCES
                                caf = 0.0  # ECHEC DE L APPEL
                                connected = 0.0  # SUCCES DE L APPEL (APPEL EMIS) -> ETAT PROPRE A APPLE -> PAS TRES PRECIS
                                drop=0.0
                            else:
                                one = (one*100.0)/nb_cause_code # COVERAGE LOST
                                two = (two*100.0)/nb_cause_code  # Multi-RAB testing -> potential CORE issue
                                three = (three*100.0)/nb_cause_code  # Low coverage -> potential radio issue
                                four = (four*100.0)/nb_cause_code  # User behaviour
                                five = (five*100.0)/nb_cause_code  # Call Attempt Failure notified by OS -> radio limitation
                                six = (six*100.0)/nb_cause_code  # 4G calls without 2G-3G fallback
                                seven = (seven*100.0)/nb_cause_code  # Estimated time to qualify call as CAF
                                eight = (eight*100.0)/nb_cause_code  # Force 2G for unknown bearer calls
                                succes = (succes*100.0)/nb_cause_code  # SUCCES DE L APPEL -> ETAT PROPRE A ANDROID
                                notconnected = (notconnected*100.0)/nb_cause_code  # ANNULATION PAR L APPELANT  -> CONSIDERE COMME SUCCES
                                caf = (caf*100.0)/nb_cause_code  # ECHEC DE L APPEL
                                connected = (connected*100.0)/nb_cause_code  # SUCCES DE L APPEL (APPEL EMIS) -> ETAT PROPRE A APPLE -> PAS TRES PRECIS
                                drop=(drop*100.0)/nb_cause_code

                            #CALCUL DES TAUX PARC MOBILE
                            for telephone in mobile:
                                #print('telephone: '+str(telephone))
                                if parc_mobile_total>0:
                                    taux_mobile[telephone] = (mobile[telephone]*100.0)/parc_mobile_total
                                else:
                                    taux_mobile[telephone] = 0.0
                                if taux_mobile[telephone]<=3:#JE CONSIDERE COMME AUTRE TOUT MODEL PRESENT A MOINS DE 3 POUR CENT DANS LE PARC
                                    nombre_mobile_inf_3pourcent = nombre_mobile_inf_3pourcent + taux_mobile[telephone] #CA S APPEL NOMBRE MAIS C EST BIEN UN TAUX
                                else:#SINON J AJOUTE LE TELEPHONE AINSI QUE SON TAUX DE PRESENCE DANS LES ENSEMBLES QUI CONSTRUIRONT LE GRAPHE ET LA LEGENDE
                                    camemberts_mobile.append(taux_mobile[telephone])
                                    legende_mobile.append(str(telephone) + ': ' + str(round(taux_mobile[telephone], 3)) + '%')
                            #MAINTENANT J AJOUTE LES TERMINAUX PRESENTS A MOINS DE 3 POUR CENT DANS NOTRE PARC SFR PERF
                            camemberts_mobile.append(nombre_mobile_inf_3pourcent)
                            legende_mobile.append('Autres: ' + str(round(nombre_mobile_inf_3pourcent, 3)) + '%')
                            #pourcentage = re.compile(r"(.*\: )(.*)(\%)", re.IGNORECASE)
                            #recherche_pourcentage = float(pourcentage.search(str(legende_mobile)))
                            #print(sorted(recherche_pourcentage, key= lambda: pourcentage. ))
                            #print(sorted(legende_mobile, key= legende_mobile[6:]))
                            #hadi_hiya=legende_mobile.sort(key=lambda x: (int(x.split(None, 1)[0]) if x[:1].isdigit() else 999, x))
                            #for tel in legende_mobile:
                                #print(tel[len(tel)-7:len(tel)-1])

                            #CALCUL DES TAUX TECNO
                            if tecno_totale>0: #J EVITE UNE DIVISION PAR 0
                                deux_g = (deux_g*100.0)/tecno_totale
                                trois_g = (trois_g*100.0)/tecno_totale
                                quatre_g = (quatre_g*100.0)/tecno_totale
                                autre_tecno = (autre_tecno*100.0)/tecno_totale
                            else:
                                deux_g = 0.0
                                trois_g = 0.0
                                quatre_g = 0.0
                                autre_tecno = 0.0

                            dqaid_file.close()
                            date.reverse()
                            dqaid_par_jour.reverse()
                            taux_succes_voix_set.reverse()
                            nb_succes_voix_set.reverse()
                            taux_failure_voix_set.reverse()
                            nb_failure_voix_set.reverse()
                            taux_drop_voix_set.reverse()
                            nb_drop_voix_set.reverse()
                            nb_csfb_voix_set.reverse()
                            taux_csfb_voix_set.reverse()
                            taux_volte_voix_set.reverse()
                            nb_volte_voix_set.reverse()
                            #print(dqaid_par_jour)


                            if len(date)>0:

                                # ________________________________________________--___**_ SUCCES_voix _**___--___________________________________________________
                                # _____________________***PARAMS***________________________________________

                                ax1 = plt.subplot2grid((9, 9), (0, 0), colspan=4)
                                plt.xticks(rotation='vertical', fontsize=8)
                                plt.title('SUCCESS RATIO VOIX ' + date[0] + ' au ' + date[len(date) - 1])
                                params = {'legend.fontsize': 10,
                                          'legend.linewidth': 0, }
                                plt.gca().xaxis.set_major_formatter(mdates.DateFormatter("%Y-%m-%d"))
                                plt.gca().xaxis.set_major_locator(mdates.DayLocator())


                                # _____________________***AXE 1***________________________________________


                                x = [datetime.datetime.strptime(d, "%Y-%m-%d").date() for d in date]
                                y = nb_succes_voix_set
                                ax1.bar(x, y, color='seagreen', zorder=1)
                                ax1.set_ylabel('Nb succs', color='seagreen')
                                for tl in ax1.get_yticklabels():
                                    tl.set_color('seagreen')

                                    # _____________________***AXE 2***________________________________________

                                ax2 = ax1.twinx()
                                ax2.yaxis.set_major_formatter(FormatStrFormatter('%.2f'))
                                x = [datetime.datetime.strptime(d, "%Y-%m-%d").date() for d in date]
                                y = taux_succes_voix_set
                                ax2.plot(x, y, color='red', zorder=2)
                                plt.legend(loc='best')
                                ax2.set_xlabel('Jour')
                                ax2.set_ylabel('Taux succes %', color='red')
                                ax2.grid(True)
                                ax2.xaxis_date()
                                for t2 in ax2.get_yticklabels():
                                    t2.set_color('red')
                                #plt.show()
                                    # ________________________________________________--___**_ FIN_SUCCES_voix _**___--___________________________________________________


                                    # ________________________________________________--___**_ FAILURE_voix _**___--___________________________________________________
                                # _____________________***PARAMS***________________________________________

                                ax1 = plt.subplot2grid((9, 9), (0, 5), colspan=4)
                                plt.xticks(rotation='vertical', fontsize=8)
                                plt.title('FAILURE RATIO voix ' + date[0] + ' au ' + date[len(date) - 1])
                                params = {'legend.fontsize': 10,
                                          'legend.linewidth': 0, }
                                plt.gca().xaxis.set_major_formatter(mdates.DateFormatter("%Y-%m-%d"))
                                plt.gca().xaxis.set_major_locator(mdates.DayLocator())

                                # _____________________***AXE 1***________________________________________


                                x = [datetime.datetime.strptime(d, "%Y-%m-%d").date() for d in date]
                                y = nb_failure_voix_set
                                ax1.bar(x, y, color='#b31217', zorder=1)
                                ax1.set_ylabel('Nb echc', color='#b31217')
                                for tl in ax1.get_yticklabels():
                                    tl.set_color('#b31217')

                                # _____________________***AXE 2***________________________________________

                                ax2 = ax1.twinx()
                                ax2.yaxis.set_major_formatter(FormatStrFormatter('%.2f'))
                                x = [datetime.datetime.strptime(d, "%Y-%m-%d").date() for d in date]
                                y = taux_failure_voix_set
                                ax2.plot(x, y, color='green', zorder=2)
                                plt.legend(loc='best')
                                ax2.set_xlabel('Jour')
                                ax2.set_ylabel('Taux Echec %', color='green')
                                ax2.grid(True)
                                ax2.xaxis_date()
                                for t2 in ax2.get_yticklabels():
                                    t2.set_color('green')
                                    # ___________________________________________________________________________________________________
                                    # ________________________________________________--___**_ FIN_failure_voix _**___--___________________________________________________


                                    # ________________________________________________--___**_ DROP_voix _**___--___________________________________________________
                                # _____________________***PARAMS***________________________________________

                                ax1 = plt.subplot2grid((9, 9), (2, 0), colspan=4)
                                plt.xticks(rotation='vertical', fontsize=8)
                                plt.title('DROP RATIO voix ' + date[0] + ' au ' + date[len(date) - 1])
                                params = {'legend.fontsize': 10,
                                          'legend.linewidth': 0, }
                                plt.gca().xaxis.set_major_formatter(mdates.DateFormatter("%Y-%m-%d"))
                                plt.gca().xaxis.set_major_locator(mdates.DayLocator())

                                # _____________________***AXE 1***________________________________________


                                x = [datetime.datetime.strptime(d, "%Y-%m-%d").date() for d in date]
                                y = nb_drop_voix_set
                                ax1.bar(x, y, color='grey', zorder=1)
                                ax1.set_ylabel('Nb coup', color='grey')
                                for tl in ax1.get_yticklabels():
                                    tl.set_color('grey')

                                # _____________________***AXE 2***________________________________________

                                ax2 = ax1.twinx()
                                ax2.yaxis.set_major_formatter(FormatStrFormatter('%.2f'))
                                x = [datetime.datetime.strptime(d, "%Y-%m-%d").date() for d in date]
                                y = taux_drop_voix_set
                                ax2.plot(x, y, color='k', zorder=2)
                                plt.legend(loc='best')
                                ax2.set_xlabel('Jour')
                                ax2.set_ylabel('Taux coup %', color='k')
                                ax2.grid(True)
                                ax2.xaxis_date()
                                for t2 in ax2.get_yticklabels():
                                    t2.set_color('k')
                                    # ___________________________________________________________________________________________________
                                    # ________________________________________________--___**_ FIN_DROP_voix _**___--___________________________________________________

                                # ________________________________________________--___**_ CSFB_voix _**___--___________________________________________________
                                # _____________________***PARAMS***________________________________________

                                ax1 = plt.subplot2grid((9, 9), (2, 5), colspan=4)
                                plt.xticks(rotation='vertical', fontsize=8)
                                plt.title('CSFB RATIO SUCCESS' + date[0] + ' au ' + date[len(date) - 1])
                                params = {'legend.fontsize': 10,
                                          'legend.linewidth': 0, }
                                plt.gca().xaxis.set_major_formatter(mdates.DateFormatter("%Y-%m-%d"))
                                plt.gca().xaxis.set_major_locator(mdates.DayLocator())

                                # _____________________***AXE 1***________________________________________


                                x = [datetime.datetime.strptime(d, "%Y-%m-%d").date() for d in date]
                                y = nb_csfb_voix_set
                                ax1.bar(x, y, color='indigo', zorder=1)
                                ax1.set_ylabel('Nb CSFB', color='indigo')
                                for tl in ax1.get_yticklabels():
                                    tl.set_color('indigo')

                                # _____________________***AXE 2***________________________________________

                                ax2 = ax1.twinx()
                                ax2.yaxis.set_major_formatter(FormatStrFormatter('%.2f'))
                                x = [datetime.datetime.strptime(d, "%Y-%m-%d").date() for d in date]
                                y = taux_csfb_voix_set
                                ax2.plot(x, y, color='plum', zorder=2)
                                plt.legend(loc='best')
                                ax2.set_xlabel('Jour')
                                ax2.set_ylabel('Taux CSFB %', color='plum')
                                ax2.grid(True)
                                ax2.xaxis_date()
                                for t2 in ax2.get_yticklabels():
                                    t2.set_color('plum')

                                    # ___________________________________________________________________________________________________
                                # ________________________________________________--___**_ FIN_CSFB_voix _**___--___________________________________________________


                                    # ________________________________________________--___**_ ETATS_INCOMING_voix _**___--___________________________________________________
                                # _____________________***PARAMS***________________________________________
                                plt.subplot2grid((9, 5), (4, 0), rowspan=3)
                                colors = ['seagreen', 'grey', 'red']
                                legende = [('Succes: ' + str(round(succes_incoming, 3)) + '%'),
                                           ('Coup: ' + str(round(drop_incoming, 3)) + '%'),
                                           ('Echc: ' + str(round(failure_incoming, 3)) + '%')]
                                fracs = [succes_incoming, drop_incoming, failure_incoming]
                                #GRAPHIC
                                plt.pie(fracs, shadow=True, startangle=90, colors=(colors))
                                plt.legend(legende, loc="best", fontsize=10, fancybox=True).get_frame().set_alpha(0.5)
                                plt.title('APPELS ENTRANTS')
                                # ________________________________________________--___**_ FIN_ETATS_INCOMING_voix _**___--___________________________________________________


                                # ________________________________________________--___**_ ETATS_outgoing_voix _**___--___________________________________________________
                                # _____________________***PARAMS***________________________________________
                                plt.subplot2grid((9, 5), (4, 1), rowspan=3)
                                colors = ['seagreen', 'grey', 'red']
                                legende = [('Succes: ' + str(round(succes_outgoing, 3)) + '%'),
                                           ('Coup: ' + str(round(drop_outgoing, 3)) + '%'),
                                           ('Echc: ' + str(round(failure_outgoing, 3)) + '%')]
                                fracs = [succes_outgoing, drop_outgoing, failure_outgoing]
                                # GRAPHIC
                                plt.pie(fracs, shadow=True, startangle=90, colors=(colors))
                                plt.legend(legende, loc="best", fontsize=10, fancybox=True).get_frame().set_alpha(0.5)
                                plt.title('APPELS SORTANTS')
                                # ________________________________________________--___**_ FIN_ETATS_outgoing_voix _**___--___________________________________________________

                                    # ________________________________________________--___**_ CAUSE_CODE_voix _**___--___________________________________________________
                                # _____________________***PARAMS***________________________________________
                                plt.subplot2grid((9, 5), (4, 2), rowspan=3)
                                colors = ['seagreen','grey','red','white', 'purple', 'orange','pink','sienna','black','yellow','aqua','royalblue','springgreen']
                                legende = [('Succes: ' + str(round(succes, 3)) + '%'),
                                           ('Drop: ' + str(round(drop, 3)) + '%'),
                                           ('CAF: ' + str(round(caf, 3)) + '%'),
                                           ('Coverage lost[1]: ' + str(round(one, 3)) + '%'),
                                           ('Multi-RAB testing[2]: ' + str(round(two, 3)) + '%'),
                                           ('Low coverage[3]: ' + str(round(three, 3)) + '%'),
                                           ('User behaviour[4]: ' + str(round(four, 3)) + '%'),
                                           ('Call Attempt Failure notified by OS[5]: ' + str(round(five, 3)) + '%'),
                                           ('4G calls without 2G-3G fallback[6]: ' + str(round(six, 3)) + '%'),
                                           ('Estimated time to qualify call as CAF[7]: ' + str(round(seven, 3)) + '%'),
                                           ('Force 2G for unknown bearer calls[8]: ' + str(round(eight, 3)) + '%'),
                                           ('Not Connected: ' + str(round(notconnected, 3)) + '%'),
                                           ('Connected: ' + str(round(connected, 3)) + '%')
                                           ]
                                fracs = [succes, drop, caf,one, two,three,four,five,six,seven,eight,notconnected,connected]
                                # GRAPHIC
                                plt.pie(fracs, shadow=True, startangle=90, colors=(colors))
                                plt.legend(legende, loc="best", fontsize=10, fancybox=True).get_frame().set_alpha(0.5)
                                plt.title('EATS DES APPELS')
                                    # ________________________________________________--___**_ FIN_CAUSE_CODE_voix _**___--___________________________________________________

                                # ________________________________________________--___**_ PARC_MOBILE_voix _**___--___________________________________________________
                                # _____________________***PARAMS***________________________________________
                                plt.subplot2grid((9, 5), (4, 3), rowspan=3)
                                couleurs = cm.Set1(np.arange(40) / 40.)
                                # GRAPHIC
                                plt.pie(camemberts_mobile, shadow=True, startangle=90, colors=couleurs)
                                plt.legend(legende_mobile, loc="best", fontsize=10, fancybox=True).get_frame().set_alpha(0.5)
                                plt.title('PARC MOBILE')
                                # ________________________________________________--___**_ FIN_PARC_MOBILE_voix _**___--___________________________________________________

                                # ________________________________________________--___**_ CAUSE_CODE_voix _**___--___________________________________________________
                                # _____________________***PARAMS***________________________________________
                                plt.subplot2grid((9, 5), (4, 4), rowspan=3)
                                #couleurs = ['khaki','mediumaquamarine','cornflowerblue','lightcoral']
                                legende = [('2G: ' + str(round(deux_g, 3)) + '%'),
                                           ('3G: ' + str(round(trois_g, 3)) + '%'),
                                           ('4G: ' + str(round(quatre_g, 3)) + '%'),
                                           ('AUTRE: ' + str(round(autre_tecno, 3)) + '%')]
                                fracs = [deux_g, trois_g, quatre_g, autre_tecno]
                                # GRAPHIC
                                plt.pie(fracs, shadow=True, startangle=90, colors=(couleurs))
                                plt.legend(legende, loc="best", fontsize=10, fancybox=True).get_frame().set_alpha(0.5)
                                plt.title('TECNOS')
                                # ________________________________________________--___**_ FIN_CAUSE_CODE_voix _**___--___________________________________________________

                                # ________________________________________________--___**_ SUCCES_voix _**___--___________________________________________________
                                # _____________________***PARAMS***________________________________________

                                ax1 = plt.subplot2grid((9, 9), (8, 0), rowspan=2,colspan=4)
                                plt.xticks(rotation='vertical', fontsize=8)
                                plt.title('Nb UTILISATEUR ACTIFS du ' + date[0] + ' au ' + date[len(date) - 1])
                                params = {'legend.fontsize': 10,
                                          'legend.linewidth': 0, }
                                plt.gca().xaxis.set_major_formatter(mdates.DateFormatter("%Y-%m-%d"))
                                plt.gca().xaxis.set_major_locator(mdates.DayLocator())

                                # _____________________***AXE 1***________________________________________

                                x = [datetime.datetime.strptime(d, "%Y-%m-%d").date() for d in date]
                                y = dqaid_par_jour
                                print(y)
                                ax1.bar(x, y, color='teal', zorder=1)
                                ax1.set_ylabel('Nb Utilisateur', color='teal')
                                for tl in ax1.get_yticklabels():
                                    tl.set_color('teal')
                                    # ________________________________________________--___**_ FIN_SUCCES_voix _**___--___________________________________________________


                                    # ________________________________________________--___**_ VoLTE_voix _**___--___________________________________________________

                                # _____________________***PARAMS***________________________________________

                                ax1 = plt.subplot2grid((9, 9), (8, 5), rowspan=2, colspan=4)
                                plt.xticks(rotation='vertical', fontsize=8)
                                plt.title('VoLTE SUCCESS RATIO du ' + date[0] + ' au ' + date[len(date) - 1])
                                params = {'legend.fontsize': 10,
                                          'legend.linewidth': 0, }
                                plt.gca().xaxis.set_major_formatter(mdates.DateFormatter("%Y-%m-%d"))
                                plt.gca().xaxis.set_major_locator(mdates.DayLocator())

                                # _____________________***AXE 1***________________________________________


                                x = [datetime.datetime.strptime(d, "%Y-%m-%d").date() for d in date]
                                y = nb_volte_voix_set
                                ax1.bar(x, y, color='black', zorder=1)
                                ax1.set_ylabel('Nb VoLTE Succ', color='black')
                                for tl in ax1.get_yticklabels():
                                    tl.set_color('black')

                                    # _____________________***AXE 2***________________________________________

                                ax2 = ax1.twinx()
                                ax2.yaxis.set_major_formatter(FormatStrFormatter('%.2f'))
                                x = [datetime.datetime.strptime(d, "%Y-%m-%d").date() for d in date]
                                y = taux_volte_voix_set
                                ax2.plot(x, y, color='red', zorder=2)
                                plt.legend(loc='best')
                                ax2.set_xlabel('Jour')
                                ax2.set_ylabel('Taux VoLTE succ %', color='red')
                                ax2.grid(True)
                                ax2.xaxis_date()
                                for t2 in ax2.get_yticklabels():
                                    t2.set_color('red')

                                    # ________________________________________________--___**_ FIN_VoLTE_voix _**___--___________________________________________________


                                        # ________________________________________________--___**_FIN MATPLOTLIB _**___--___________________________________________________

                            else:
                                print("PAS DE DONNES")



                            return date,dqaid_par_jour,taux_succes_voix_set,nb_succes_voix_set,taux_failure_voix_set,nb_failure_voix_set,taux_drop_voix_set,nb_drop_voix_set,nb_csfb_voix_set,taux_csfb_voix_set,succes_incoming, drop_incoming, failure_incoming,succes_outgoing, drop_outgoing, failure_outgoing,camemberts_mobile,legende_mobile,deux_g, trois_g, quatre_g, autre_tecno,dqaid_par_jour,succes, drop, caf,one, two,three,four,five,six,seven,eight,notconnected,connected,taux_volte_voix_set,nb_volte_voix_set

                        #PYGAL
                        def taux_incoming2(succes_incoming,drop_incoming,failure_incoming,event):
                            pie_chart2 = pygal.Pie(height=400,margin_left=70,legend_box_size=15,legend_font_size=16,truncate_legend=50)
                            pie_chart2.title = 'Voix Incoming'
                            pie_chart2.add('Succes: '+str(round(succes_incoming,1))+'%', succes_incoming)
                            pie_chart2.add('Drop: '+str(round(drop_incoming,1))+'%', drop_incoming)
                            pie_chart2.add('Failure: '+str(round(failure_incoming,1))+'%', failure_incoming)
                            pie_chart2.render_in_browser()
                            pie_chart2.render_to_file("INCOMING_voix.svg")

                            # __________________________________--Pygal--_____________________________________________________________

                        def taux_outgoing2(succes_outgoing,drop_outgoing,failure_outgoing,event):

                            # _________________________________--Pygal--________________________________________________________

                            pie_chart1 = pygal.Pie(height=400,margin_left=70,legend_box_size=15,legend_font_size=16,truncate_legend=50)
                            pie_chart1.title = 'Voix Outgoing'
                            pie_chart1.add('Succes: '+str(round(succes_outgoing,1))+'%', succes_outgoing)
                            pie_chart1.add('Drop: '+str(round(drop_outgoing,1))+'%', drop_outgoing)
                            pie_chart1.add('Failure: '+str(round(failure_outgoing,1))+'%', failure_outgoing)
                            pie_chart1.render_in_browser()
                            pie_chart1.render_to_file("OUTGOING_voix.svg")

                            # _________________________________--Pygal--________________________________________________________

                        def nb_utilisateur_actifs(date,dqaid_par_jour,event):
                            config = pygal.Config()
                            config.style = pygal.style.DarkStyle
                            config.defs.append('''
                              <linearGradient id="gradient-0" x1="0" x2="0" y1="0" y2="1">
                                <stop offset="0%" stop-color="#ff5995" />
                                <stop offset="100%" stop-color="#feed6c" />
                              </linearGradient>
                            ''')
                            config.defs.append('''
                              <linearGradient id="gradient-1" x1="0" x2="0" y1="0" y2="1">
                                <stop offset="0%" stop-color="#b6e354" />
                                <stop offset="100%" stop-color="#8cedff" />
                              </linearGradient>
                            ''')
                            config.css.append('''inline:
                              .color-0 {
                                fill: url(#gradient-0) !important;
                                stroke: url(#gradient-0) !important;
                              }''')
                            config.css.append('''inline:
                              .color-1 {
                                fill: url(#gradient-1) !important;
                                stroke: url(#gradient-1) !important;
                              }''')

                            #__________________________--PYGAL--______________________________________________
                            y = dqaid_par_jour
                            #height=300 ,legend_at_bottom=True,x_label_rotation=90)
                            nb_users_bar = pygal.Bar(config,height=400,include_x_axis=True,label_font_size=4,title_font_size=26,x_title='Jours',y_title='Nb Utilisateurs',legend_at_bottom=True,x_label_rotation=90)
                            nb_users_bar.title = 'Nombre Utilisateur Actifs Par Jour'
                            nb_users_bar.x_labels = date
                            nb_users_bar.add('Nb Users', y)
                            nb_users_bar.render_in_browser()
                            nb_users_bar.render_to_file("NB_Users_par_jour_voix.svg")
                            # _________________________________________--PYGAL--______________________________________________

                        def tecno_pygal(deux_g,trois_g,quatre_g,autre_tecno,event):
                            #________________________--Pygal--__________________________________________
                            pie_techno = pygal.Pie(height=400,margin_left=70,legend_box_size=15,legend_font_size=16,truncate_legend=50)
                            pie_techno.title = 'TECNO VOIX'
                            pie_techno.add('2G: '+str(round(deux_g,1))+'%', deux_g)
                            pie_techno.add('3G: '+str(round(trois_g,1))+'%', trois_g)
                            pie_techno.add('4G: '+str(round(quatre_g,1))+'%', quatre_g)
                            pie_techno.add('Autre: '+str(round(autre_tecno,1))+'%', autre_tecno)
                            pie_techno.render_in_browser()
                            pie_techno.render_to_file("techno_voix.svg")
                            # ________________________--Pygal--__________________________________________

                        def parc_mobile_pygal(camemberts_mobile,legende_mobile,event):
                            config = pygal.Config()
                            config.style = pygal.style.DarkStyle
                            config.defs.append('''
                                                                      <linearGradient id="gradient-0" x1="0" x2="0" y1="0" y2="1">
                                                                        <stop offset="0%" stop-color="#ff5995" />
                                                                        <stop offset="100%" stop-color="#feed6c" />
                                                                      </linearGradient>
                                                                    ''')
                            config.defs.append('''
                                                                      <linearGradient id="gradient-1" x1="0" x2="0" y1="0" y2="1">
                                                                        <stop offset="0%" stop-color="#b6e354" />
                                                                        <stop offset="100%" stop-color="#8cedff" />
                                                                      </linearGradient>
                                                                    ''')
                            config.css.append('''inline:
                                                                      .color-0 {
                                                                        fill: url(#gradient-0) !important;
                                                                        stroke: url(#gradient-0) !important;
                                                                      }''')
                            config.css.append('''inline:
                                                                      .color-1 {
                                                                        fill: url(#gradient-1) !important;
                                                                        stroke: url(#gradient-1) !important;
                                                                      }''')
                            # ______________________________--Pygal--______________________________________
                            #Parc_Mobile = pygal.Pie(height=400,margin_left=70,legend_box_size=15,legend_font_size=16,truncate_legend=50)
                            Parc_Mobile = pygal.Pie(config,height=400,label_font_size=4,legend_font_size=16,truncate_legend=50)
                            Parc_Mobile.title = 'PARC MOBILE'
                            compteur=0
                            for valeur in camemberts_mobile:
                                Parc_Mobile.add(legende_mobile[compteur],round(valeur,1))
                                compteur=compteur+1
                            Parc_Mobile.render_in_browser()
                            Parc_Mobile.render_to_file("Parc_Mobile_voix.svg")
                            #______________________________--Pygal--_______________________________________

                        def success_ratio3(date,taux_succes_voix_set,nb_succes_voix_set,event):
                            config = pygal.Config()
                            config.style = pygal.style.DarkStyle
                            config.defs.append('''
                                                                      <linearGradient id="gradient-0" x1="0" x2="0" y1="0" y2="1">
                                                                        <stop offset="0%" stop-color="#ff5995" />
                                                                        <stop offset="100%" stop-color="#feed6c" />
                                                                      </linearGradient>
                                                                    ''')
                            config.defs.append('''
                                                                      <linearGradient id="gradient-1" x1="0" x2="0" y1="0" y2="1">
                                                                        <stop offset="0%" stop-color="#b6e354" />
                                                                        <stop offset="100%" stop-color="#8cedff" />
                                                                      </linearGradient>
                                                                    ''')
                            config.css.append('''inline:
                                                                      .color-0 {
                                                                        fill: url(#gradient-0) !important;
                                                                        stroke: url(#gradient-0) !important;
                                                                      }''')
                            config.css.append('''inline:
                                                                      .color-1 {
                                                                        fill: url(#gradient-1) !important;
                                                                        stroke: url(#gradient-1) !important;
                                                                      }''')
                            # __________________________-------------------------PYGAL------------------------------------__________________________________________________________________________
                            #success_plot = pygal.Line(height=400,include_x_axis=True,label_font_size=4,title_font_size=26,x_title='Jours',y_title='SUCCES',legend_at_bottom=True,x_label_rotation=90)
                            success_plot = pygal.Line(config,height=400,include_x_axis=True,label_font_size=4,title_font_size=26,x_title='Jours',y_title='Succes',legend_at_bottom=True,x_label_rotation=90)
                            success_plot.title = 'SUCCESS RATIO_Voix'
                            success_plot.x_labels = date
                            success_plot.add('Nombre_Success', nb_succes_voix_set)
                            success_plot.add('Taux_Succes', taux_succes_voix_set, secondary=True)
                            success_plot.render_in_browser()
                            success_plot.render_to_file("Success_RATIO_voix.svg")
                            # __________________________-------------------------PYGAL------------------------------------__________________________________________________________________________

                        def failure_ratio3(date,taux_failure_voix_set,nb_failure_voix_set,event):
                                # __________________________-------------------------PYGAL------------------------------------__________________________________________________________________________
                                Failure_plot = pygal.Line(height=400,include_x_axis=True,label_font_size=4,title_font_size=26,x_title='Jours',y_title='Echec',legend_at_bottom=True,x_label_rotation=90)
                                Failure_plot.title = 'FAILURE RATIO VOIX'
                                Failure_plot.x_labels = date
                                Failure_plot.add('Nb_Echec', nb_failure_voix_set)
                                Failure_plot.add('Taux_Echec', taux_failure_voix_set, secondary=True)
                                Failure_plot.render_in_browser()
                                Failure_plot.render_to_file("Failure_RATIO_VOIX.svg")
                                # __________________________-------------------------PYGAL------------------------------------__________________________________________________________________________

                        def drop_ratio3(date,taux_drop_voix_set,nb_drop_voix_set,event):
                            #_____________________--PYGAL--_________________________
                            Drop_plot = pygal.Line(height=400,include_x_axis=True,label_font_size=4,title_font_size=26,x_title='Jours',y_title='COUPURE',legend_at_bottom=True,x_label_rotation=90)
                            Drop_plot.title = 'DROP RATIO VOIX'
                            Drop_plot.x_labels = date
                            Drop_plot.add('Nombre_Drop', nb_drop_voix_set)
                            Drop_plot.add('Taux_Drop', taux_drop_voix_set, secondary=True)
                            Drop_plot.render_in_browser()
                            Drop_plot.render_to_file("Drop_RATIO_voix.svg")
                            # _____________________--PYGAL--_________________________

                        def csfb2(date,nb_csfb_voix_set,taux_csfb_voix_set,event):

                            # _____________________--PYGAL--_________________________
                            CSFB_plot = pygal.Line(height=400,include_x_axis=True,label_font_size=4,title_font_size=26,x_title='Jours',y_title='CSFB',legend_at_bottom=True,x_label_rotation=90)
                            CSFB_plot.title = 'CSFallBack SUCCESS RATIO VOIX'
                            CSFB_plot.x_labels = date
                            CSFB_plot.add('Nombre_CSFB', nb_csfb_voix_set)
                            CSFB_plot.add('Taux_CSFB', taux_csfb_voix_set, secondary=True)
                            CSFB_plot.render_in_browser()
                            CSFB_plot.render_to_file("CSFB_RATIO_voix.svg")
                            # _____________________--PYGAL--_________________________

                        def taux_etat_par_date2(succes, drop, caf, one, two, three, four, five, six, seven, eight, notconnected, connected,event):
                            # _______________________--Pygal--________________________________________________________

                            pie_chart2 = pygal.Pie(height=400,margin_left=70,legend_box_size=15,legend_font_size=16,truncate_legend=50)
                            pie_chart2.title = 'Taux ETATS Communications'
                            pie_chart2.add('Succes: ' + str(round(succes, 1)) + "%", succes)
                            pie_chart2.add('Connected: ' + str(round(connected, 1)) + "%", connected)
                            pie_chart2.add('Not Conn: ' + str(round(drop, 1)) + "%", notconnected)
                            pie_chart2.add('Drop: ' + str(round(succes, 1)) + "%", drop)
                            pie_chart2.add('CAF: ' + str(round(caf, 1)) + "%", caf)

                            pie_chart2.add('Coverage lost[1]: '+str(round(one,1))+"%", one)
                            pie_chart2.add('Multi-RAB testing[2]: '+str(round(two,1))+"%", two)
                            pie_chart2.add('Low coverage[3]: '+str(round(three,1))+"%", three)
                            pie_chart2.add('User behaviour[4]: '+str(round(four,1))+"%", four)
                            pie_chart2.add('Call Attempt Failure notified by OS[5]: '+str(round(five,1))+"%", five)
                            pie_chart2.add('4G calls without 2G-3G fallback[6]: '+str(round(six,1))+"%", six)
                            pie_chart2.add('Estimated time to qualify call as CAF[7]: '+str(round(seven,1))+"%", seven)
                            pie_chart2.add('Force 2G for unknown bearer calls[8]: '+str(round(eight,1))+"%", eight)
                            pie_chart2.render_in_browser()
                            pie_chart2.render_to_file("Cause_Code_voix.svg")

                            # __________________________________--Pygal--_____________________________________________________________

                        def volte_pygal(date, taux_volte_voix_set, nb_volte_voix_set, event):
                            # __________________________-------------------------PYGAL------------------------------------__________________________________________________________________________
                            success_plot = pygal.Line(height=400, include_x_axis=True, label_font_size=4, title_font_size=26,x_title='Jours', y_title='SUCCES VoLTE', legend_at_bottom=True,x_label_rotation=90)
                            success_plot.title = 'VoLTE SUCCESS RATIO'
                            success_plot.x_labels = date
                            success_plot.add('Nombre Succes VoLTE', nb_volte_voix_set)
                            success_plot.add('Taux_Succes VoLTE', taux_volte_voix_set, secondary=True)
                            success_plot.render_in_browser()
                            success_plot.render_to_file("VoLTE_Success_RATIO.svg")
                            # __________________________-------------------------PYGAL------------------------------------__________________________________________________________________________


                        val4 = 0.0

                        """
                        class excuteur_pro():
                            global legraphe_pyg
                            if event:
                                taux_incoming2 = taux_incoming2(reader, val1, val2, val3, val4, val5, tech)
                            #legraphe_pyg = taux_outgoing2(reader, val1, val2, val3, val4, val5, tech)

                        # success_ratio(reader)
                        #print(val3)
                        """

                        #date, taux_volte_voix_set, nb_volte_voix_set

                        #Thread(target=csfb(reader,val1,val2,val3,val4,val5,tech)).start()
                        #Thread(target=failure_ratio2(reader,val1,val2,val3,val4,val5,tech)).start()
                        #Thread(target=drop_ratio2(reader,val1,val2,val3,val4,val5,tech)).start()
                        #Thread(target=drop_ratio2(reader,val1,val2,val3,val4,val5,tech)).start()
                        #Thread(target=success_ratio2(reader,val1,val2,val3,val4,val5,tech)).start()
                        #Thread(target=mobile_gt(reader, val1, val2, val3,val5,tech)).start()
                        #Thread(target=voix(reader, val1, val2, val3, val4, val5, tech)).start()
                        date, dqaid_par_jour, taux_succes_voix_set, nb_succes_voix_set, taux_failure_voix_set, nb_failure_voix_set, taux_drop_voix_set, nb_drop_voix_set, nb_csfb_voix_set, taux_csfb_voix_set, succes_incoming, drop_incoming, failure_incoming, succes_outgoing, drop_outgoing, failure_outgoing, camemberts_mobile, legende_mobile, deux_g, trois_g, quatre_g, autre_tecno, dqaid_par_jour,succes, drop, caf,one, two,three,four,five,six,seven,eight,notconnected,connected,taux_volte_voix_set,nb_volte_voix_set=voix(reader, val1, val2, val3, val4, val5, tech)









                        #pie_chart=Thread(target=taux_incoming(reader,val1,val2,val3,val4,val5,tech)).start()
                        #pie_chart2=Thread(target=taux_outgoing(reader,val1,val2,val3,val4,val5,tech)).start()
                        #bar2=Thread(target=ticket_profil(reader,val1,val2,val3,val4,val5,tech)).start()

                        #pie_chart = taux_incoming(reader, val1, val2, val3, val4, val5, tech)
                        #pie_chart2 = taux_outgoing(reader, val1, val2, val3, val4, val5, tech)
                        #nb_users_bar = ticket_profil(reader, val1, val2, val3, val4, val5, tech)
                        #failure_graph=failure_ratio2(reader,val1,val2,val3,val4,val5,tech)
                        #success_graph=success_ratio2(reader, val1, val2, val3, val4, val5, tech)
                        #drop_graph=drop_ratio2(reader,val1,val2,val3,val4,val5,tech)
                        #csfb_graph=csfb(reader,val1,val2,val3,val4,val5,tech)
                        #taux_etat_par_date(reader, val1, val2, val3, val4, val5, tech)

                        #p = gridplot([success_graph, failure_graph, drop_graph, csfb_graph, nb_users_bar, pie_chart, pie_chart2],ncols=3, plot_width=500, plot_height=500)

                        #show(p)


                        #csfb(reader,val1,val2,val3,val4,val5)
                        #failure_ratio2(reader,val1,val2,val3,val4,val5)
                        #drop_ratio2(reader,val1,val2,val3,val4,val5)
                        #success_ratio2(reader,val1,val2,val3,val4,val5)
                        #mobile_gt(reader, val1, val2, val3,val5)
                        #taux_incoming(reader,val1,val2,val3,val4,val5)
                        #taux_outgoing(reader,val1,val2,val3,val4,val5)
                        #ticket_profil(reader,val1,val2,val3,val4,val5)

                        #f = Figure(figsize=(5, 4), dpi=100)
                        #root_2 = tix.Tk()
                        #root_2.wm_title("Dashboard")
                        params = {'legend.fontsize': 10, 'legend.linewidth': 0, }
                        #canvas = FigureCanvasTkAgg(f, master=choix)
                        #canvas.show()
                        #canvas.get_tk_widget().pack(side=Tk.TOP, fill=Tk.BOTH, expand=1)
                        #toolbar = NavigationToolbar2TkAgg(canvas, root)
                        #toolbar.update()
                        #canvas._tkcanvas.pack(side=Tk.TOP, fill=Tk.BOTH, expand=1)

                        #plt.xticks(rotation='vertical', fontsize=8)
                        #plt.rcParams.update(params)
                        plt.legend(loc='best')
                        figManager = plt.get_current_fig_manager()
                        figManager.window.showMaximized()
                        #plt.show()

                        couleur_bouton='white'
                        from matplotlib.widgets import Button as buttonn

                        #bouttons matplotlib
                        # Bouton Success_Ratio
                        b2ax_SSRatio = plt.axes([0.51, 0.83, 0.01, 0.01])
                        bouttonni6 = buttonn(b2ax_SSRatio, '', color=couleur_bouton)
                        bouttonni6.on_clicked(lambda event: success_ratio3(date, taux_succes_voix_set, nb_succes_voix_set, event))
                        # Bouton Failure_Ratio
                        b2ax_FRRatio = plt.axes([0.94, 0.83, 0.01, 0.01])
                        bouttonni7 = buttonn(b2ax_FRRatio, '', color=couleur_bouton)
                        bouttonni7.on_clicked(lambda event: failure_ratio3(date, taux_failure_voix_set, nb_failure_voix_set, event))
                        # Bouton Drop_Ratio
                        b2ax_DPRatio = plt.axes([0.51, 0.65, 0.01, 0.01])
                        bouttonni8 = buttonn(b2ax_DPRatio, '', color=couleur_bouton)
                        bouttonni8.on_clicked(lambda event: drop_ratio3(date, taux_drop_voix_set, nb_drop_voix_set, event))
                        # Bouton CSFB_Ratio
                        b2ax_CSFBRatio = plt.axes([0.94, 0.65, 0.01, 0.01])
                        bouttonni9 = buttonn(b2ax_CSFBRatio, '', color=couleur_bouton)
                        bouttonni9.on_clicked(lambda event: csfb2(date, nb_csfb_voix_set, taux_csfb_voix_set, event))

                        #Bouton incoming
                        b2ax = plt.axes([0.25, 0.4, 0.01, 0.01])
                        bouttonni = buttonn(b2ax, '', color=couleur_bouton)
                        bouttonni.on_clicked(lambda event: taux_incoming2(succes_incoming,drop_incoming,failure_incoming,event))
                        #Bouton outgoing
                        b2ax_outgoing = plt.axes([0.41, 0.4, 0.01, 0.01])
                        bouttonni2 = buttonn(b2ax_outgoing, '', color=couleur_bouton)
                        bouttonni2.on_clicked(lambda event: taux_outgoing2(succes_outgoing,drop_outgoing,failure_outgoing, event))
                        # Bouton CAUSE CODE
                        b2ax_cc = plt.axes([0.58, 0.4, 0.01, 0.01])
                        bouttonni10 = buttonn(b2ax_cc, '', color=couleur_bouton)
                        bouttonni10.on_clicked(lambda event: taux_etat_par_date2(succes, drop, caf, one, two, three, four, five, six, seven, eight,notconnected, connected, event))
                        # Bouton Parc_Mobile
                        b2ax_mobile = plt.axes([0.75, 0.4, 0.01, 0.01])
                        bouttonni5 = buttonn(b2ax_mobile, '', color=couleur_bouton)
                        bouttonni5.on_clicked(lambda event: parc_mobile_pygal(camemberts_mobile, legende_mobile, event))
                        # Bouton Techno
                        b2ax_techno = plt.axes([0.9, 0.4, 0.01, 0.01])
                        bouttonni4 = buttonn(b2ax_techno, '', color=couleur_bouton)
                        bouttonni4.on_clicked(lambda event: tecno_pygal(deux_g, trois_g, quatre_g, autre_tecno, event))

                        #Bouton Nb_Users
                        b2ax_users = plt.axes([0.48, 0.1, 0.01, 0.01])
                        bouttonni3 = buttonn(b2ax_users, '', color=couleur_bouton)
                        bouttonni3.on_clicked(lambda event: nb_utilisateur_actifs(date,dqaid_par_jour,event))

                        # VoLTE
                        b2ax_volte = plt.axes([0.94, 0.1, 0.01, 0.01])
                        bouttonni11 = buttonn(b2ax_volte, '', color=couleur_bouton)
                        bouttonni11.on_clicked(lambda event: volte_pygal(date, taux_volte_voix_set, nb_volte_voix_set, event))




                        #plt.tight_layout()
                        plt.show()



                        #plt.show()
                        #mpld3.show()
                        #Thread(target=plt.show()).start()
                        #Thread(target=mpld3.show()).start()

                sans_dpt_filter_voix(val1, val2, val3, tech, val5, departement, file)

            else:
                def avec_dpt_filter_voix(val1,val2,val3,tech, val5,departement,file):
                    if val1 and val2:
                        plt.suptitle('DASHBOARD KPIs VOIX DEPARTEMENT: '+ departement, fontsize=18, bbox={'facecolor': 'white', 'pad': 5})
                        figure_voix = plt.figure(1)
                        figure_voix.patch.set_facecolor('white')

                        import datetime as dt
                        # print(val1)
                        # print(val2)
                        # print(val3)
                        # print(tech)
                        # print(val5)


                        # choix_scenario()
                        # print(value1)
                        # print(value2)

                        # file = ouvrir_fich()
                        # global  value2
                        # global  value1
                        value2 = combo2.entry.get()
                        # print(value1)
                        # print(value2)

                        csv_opner_result = re.compile(r".*'(.*:.*)'\, .*", re.IGNORECASE)
                        f = csv_opner_result.search(str(file))

                        # fichier = open(f.group(1), 'r')
                        # print(f.group(1))
                        # reader = csv.reader(fichier, delimiter=';')
                        reader = f.group(1)

                        ci_lac_eci_tac = []

                        # FICHIER G2R
                        csv_opner_result_g2r = re.compile(r".*'(.*:.*\/).*\.csv'\, .*", re.IGNORECASE)
                        fichier_g2r = csv_opner_result_g2r.search(str(csvfile))
                        fichier_g2r = str(fichier_g2r.group(1)) + 'g2r.csv'
                        fichier_g2r = open(fichier_g2r, 'r')
                        fichier_g2r_reader = csv.reader(fichier_g2r, delimiter=';')
                        # print('ON EST DANS LA DATA '+departement)
                        departement_code_postal = {'1': 'Ain', '2': 'Aisne', '3': 'Allier',
                                                   '4': 'Alpes_de_Haute-Provence', '5': 'Hautes-Alpes',
                                                   '6': 'Alpes-Maritimes', '7': 'Ardeche', '8': 'Ardennes',
                                                   '9': 'Ariege', '10': 'Aube', '11': 'Aude', '12': 'Aveyron',
                                                   '13': 'Bouches_du_Rhone', '14': 'Calvados', '15': 'Cantal',
                                                   '16': 'Charente', '17': 'Charente_Maritime', '18': 'Cher',
                                                   '19': 'Correze', '21': 'Cote_dOr', '22': 'Cotes_dArmor',
                                                   '23': 'Creuse', '24': 'Dordogne', '25': 'Doubs', '26': 'Drome',
                                                   '27': 'Eure', '28': 'Eure-et-Loir', '29': 'Finistere', '30': 'Gard',
                                                   '31': 'Haute-Garonne', '32': 'Gers', '33': 'Gironde',
                                                   '34': 'Herault', '35': 'Ille-et-Vilaine', '36': 'Indre',
                                                   '37': 'Indre-et-Loire', '38': 'Isere', '39': 'Jura', '40': 'Landes',
                                                   '41': 'Loir-et-Cher', '42': 'Loire', '43': 'Haute-Loire',
                                                   '44': 'Loire-Atlantique', '45': 'Loiret', '46': 'Lot',
                                                   '47': 'Lot-et-Garonne', '48': 'Lozere', '49': 'Maine-et-Loire',
                                                   '50': 'Manche', '51': 'Marne', '52': 'Haute-Marne', '53': 'Mayenne',
                                                   '54': 'Meurthe-et-Moselle', '55': 'Meuse', '56': 'Morbihan',
                                                   '57': 'Moselle', '58': 'Nievre', '59': 'Nord', '60': 'Oise',
                                                   '61': 'Orne', '62': 'Pas-de-Calais', '63': 'Puy-de-Dome',
                                                   '64': 'Pyrenees-Atlantiques', '65': 'Hautes-Pyrenees',
                                                   '66': 'Pyrenees-Orientales', '67': 'Bas-Rhin', '68': 'Haut-Rhin',
                                                   '69': 'Rhone', '70': 'Haute-Saone', '71': 'Saone-et-Loire',
                                                   '72': 'Sarthe', '73': 'Savoie', '74': 'Haute-Savoie', '75': 'Paris',
                                                   '76': 'Seine-Maritime', '77': 'Seine-et-Marne', '78': 'Yvelines',
                                                   '79': 'Deux-Sevres', '80': 'Somme', '81': 'Tarn',
                                                   '82': 'Tarn-et-Garonne', '83': 'Var', '84': 'Vaucluse',
                                                   '85': 'Vendee', '86': 'Vienne', '87': 'Haute-Vienne', '88': 'Vosges',
                                                   '89': 'Yonne', '90': 'Territoire-de-Belfort', '91': 'Essonne',
                                                   '92': 'Hauts-de-Seine', '93': 'Seine-St-Denis', '94': 'Val-de-Marne',
                                                   '95': 'Val-dOise', '2A': 'Corse_du_Sud', '2B': 'Haute-Corse'}

                        g2r_code_postal = ''
                        departement_eci_tac_ci_lac = ''
                        fichier_ci_lac_decriture = open("Departement_CI_Lac_eCI_Tac.txt", "w")

                        # fichier_ci_lac_decriture.write()
                        fichier_ci_lac_decriture.write("\n______________________________________________________________________________________________")
                        fichier_ci_lac_decriture.write("\n\n\n         VOICI LA LISTE DES DEPARTEMENT ET LEUR CORRESPONDANCE EN CI-LAC/eCI-TAC \n\n\n")
                        fichier_ci_lac_decriture.write("______________________________________________________________________________________________\n\n\n")

                        file.close()
                        ci_lac_eci_tac_intermediaire = []
                        ci_lac_eci_tac_intermediaire_var = ''
                        for row in fichier_g2r_reader:
                            ci = row[21]
                            lac = row[22]
                            num_g2r = row[18]
                            region = row[34]
                            eci = row[38]
                            tac = row[40]

                            if eci:
                                if len(num_g2r) == 5:
                                    g2r_code_postal = num_g2r[:1]
                                    if g2r_code_postal in departement_code_postal:
                                        departement_eci_tac_ci_lac = departement_code_postal[g2r_code_postal] + ' ' + eci + '-' + tac
                                        ci_lac_eci_tac.append(departement_eci_tac_ci_lac)
                                        fichier_ci_lac_decriture.write('\n\n')
                                        fichier_ci_lac_decriture.write(departement_eci_tac_ci_lac)
                                        if str(departement_code_postal[g2r_code_postal]) in str(departement):
                                            ci_lac_eci_tac_intermediaire.append(departement_code_postal[g2r_code_postal] + ' ' + eci + '-' + tac)

                                if len(num_g2r) == 6:
                                    g2r_code_postal = num_g2r[:2]
                                    if g2r_code_postal in departement_code_postal:
                                        departement_eci_tac_ci_lac = departement_code_postal[g2r_code_postal] + ' ' + eci + '-' + tac
                                        ci_lac_eci_tac.append(departement_eci_tac_ci_lac)
                                        fichier_ci_lac_decriture.write('\n\n')
                                        fichier_ci_lac_decriture.write(departement_eci_tac_ci_lac)

                                        if str(departement_code_postal[g2r_code_postal]) in str(departement):
                                            ci_lac_eci_tac_intermediaire.append(departement_code_postal[g2r_code_postal] + ' ' + eci + '-' + tac)

                            else:
                                if ci:
                                    if len(num_g2r) == 5:
                                        g2r_code_postal = num_g2r[:1]

                                        if g2r_code_postal in departement_code_postal:
                                            departement_eci_tac_ci_lac = departement_code_postal[g2r_code_postal] + ' ' + ci + '-' + lac
                                            ci_lac_eci_tac.append(departement_eci_tac_ci_lac)
                                            fichier_ci_lac_decriture.write('\n\n')
                                            fichier_ci_lac_decriture.write(departement_eci_tac_ci_lac)
                                            if str(departement_code_postal[g2r_code_postal]) in str(departement):
                                                ci_lac_eci_tac_intermediaire.append(departement_code_postal[g2r_code_postal] + ' ' + eci + '-' + tac)

                                    if len(num_g2r) == 6:
                                        g2r_code_postal = num_g2r[:2]
                                        if g2r_code_postal in departement_code_postal:
                                            departement_eci_tac_ci_lac = departement_code_postal[g2r_code_postal] + ' ' + ci + '-' + lac
                                            ci_lac_eci_tac.append(departement_eci_tac_ci_lac)
                                            fichier_ci_lac_decriture.write('\n\n')
                                            fichier_ci_lac_decriture.write(departement_eci_tac_ci_lac)
                                            # print(departement_code_postal[g2r_code_postal] +' ET VOICI TON DPT:  ' +departement)
                                            # print(departement_code_postal[g2r_code_postal]+' et ton dpt: '+departement)
                                            # if (departement_code_postal[g2r_code_postal]=='Paris'):
                                            # print(departement_code_postal[g2r_code_postal])
                                            # if (departement_code_postal[g2r_code_postal]==' Paris'):
                                            # print(departement_code_postal[g2r_code_postal]+' *')
                                            # if (departement_code_postal[g2r_code_postal]=='Paris '):
                                            # print(departement_code_postal[g2r_code_postal]+' **')
                                            # if (departement_code_postal[g2r_code_postal]==' Paris '):
                                            # print(departement_code_postal[g2r_code_postal]+' * *')
                                            # if (departement_code_postal[g2r_code_postal] in 'Paris'):
                                            # print(departement_code_postal[g2r_code_postal]+'   IN  ')
                                            # print(str(departement_code_postal[g2r_code_postal] in departement)+'  -->  '+departement_code_postal[g2r_code_postal]+' IN '+departement)
                                            if departement_code_postal[g2r_code_postal] in departement:
                                                ci_lac_eci_tac_intermediaire_var = departement_code_postal[g2r_code_postal] + ' ' + eci + '-' + tac
                                                ci_lac_eci_tac_intermediaire.append(ci_lac_eci_tac_intermediaire_var)

                        # print(departement)

                        #for elem in ci_lac_eci_tac:
                            #fichier_ci_lac_decriture.write('\n\n')
                            #fichier_ci_lac_decriture.write(elem)
                        fichier_ci_lac_decriture.close()
                        # voix


                        def voix(fichier_voix, val1, val2, val3, val4, val5, tech,departement):
                            # print(val3)
                            # print('Tu es dans la fonction Succes et tu as VAL1: '+val1)
                            # print('Tu es dans la fonction Succes et tu as VAL2: '+val2)
                            date_debut = time.strptime(val1, "%Y-%m-%d")
                            date_fin = time.strptime(val2, "%Y-%m-%d")

                            fichier_voix = fichier_voix
                            date = []
                            csvfile = open(fichier_voix, 'r')
                            # reader = csv.reader(csvfile, delimiter=';')
                            # reader = csv.reader(csvfile, delimiter=';')
                            reader = csv.reader(csvfile)

                            # VERIFICATEUR D UNE NOUVELLE JOURNEE ATTEINTE
                            b = ''
                            # Variable d ajout aux ensemble apres ajout de la date
                            var_ajout = 0.0

                            # VARIABLES DES ETATS
                            nb_succes_voix_set = []
                            taux_succes_voix_set = []
                            taux_succes_voix = 0.0
                            nb_succes_voix = 0.0
                            nb_etat = 0.0

                            nb_failure_voix_set = []
                            taux_failure_voix_set = []
                            taux_failure_voix = 0.0
                            nb_failure_voix = 0.0

                            nb_drop_voix_set = []
                            taux_drop_voix_set = []
                            taux_drop_voix = 0.0
                            nb_drop_voix = 0.0

                            nb_csfb_voix_set = []
                            taux_csfb_voix_set = []
                            taux_csfb_voix = 0.0
                            nb_csfb_voix = 0.0
                            nb_etat_csfb = 0.0

                            # etats incoming outgoing
                            succes_incoming = 0.0
                            drop_incoming = 0.0
                            failure_incoming = 0.0
                            nb_etat_incoming = 0.0
                            succes_outgoing = 0.0
                            drop_outgoing = 0.0
                            failure_outgoing = 0.0
                            nb_etat_outgoing = 0.0

                            # CAUSES CODES
                            one = 0.0  # COVERAGE LOST
                            two = 0.0  # Multi-RAB testing -> potential CORE issue
                            three = 0.0  # Low coverage -> potential radio issue
                            four = 0.0  # User behaviour
                            five = 0.0  # Call Attempt Failure notified by OS -> radio limitation
                            six = 0.0  # 4G calls without 2G-3G fallback
                            seven = 0.0  # Estimated time to qualify call as CAF
                            eight = 0.0  # Force 2G for unknown bearer calls
                            succes = 0.0  # SUCCES DE L APPEL -> ETAT PROPRE A ANDROID
                            notconnected = 0.0  # ANNULATION PAR L APPELANT  -> CONSIDERE COMME SUCCES
                            caf = 0.0  # ECHEC DE L APPEL
                            connected = 0.0  # SUCCES DE L APPEL (APPEL EMIS) -> ETAT PROPRE A APPLE -> PAS TRES PRECIS
                            drop = 0.0  # COUPURE -> VERIFIE DANS LE CAS DE TERMINAL APPLE
                            nb_cause_code = 0.0  # LE TOTAL DES CAUSES CODES

                            # PARC MOBBILE
                            mobile = {}
                            taux_mobile = {}
                            parc_mobile_total = 0.0
                            nombre_mobile_inf_3pourcent = 0.0
                            camemberts_mobile = []
                            legende_mobile = []

                            # TECNO
                            tecno_totale = 0.0
                            deux_g = 0.0
                            trois_g = 0.0
                            quatre_g = 0.0
                            autre_tecno = 0.0

                            # NOMBRE CLIENTS ACTIFS
                            list_dqaid = []
                            dqaid_par_jour = []
                            nombre_dqaid_var = 0.0

                            # FICHIER CONTENANT DQAID PAR JOURS
                            dqaid_file = open("dqaid.txt", "w")
                            dqaid_file.write(
                                "\n\n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n")
                            dqaid_file.write(
                                "-------------------------------------------------------------------------------------------------")
                            dqaid_file.write("           LISTE DES DQAID PAR JOURS           ")
                            dqaid_file.write(
                                "--------------------------------------------------------------------------------------------------")
                            dqaid_file.write(
                                "\n\n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n")

                            # VARIABLES VoLTE
                            nb_volte_voix_set = []
                            taux_volte_voix_set = []
                            taux_volte_voix = 0.0
                            nb_volte_voix = 0.0
                            nb_etat_volte = 0.0

                            # TEST FIN FICHIER
                            row_check = 0.0

                            for row in reader:
                                dqaid_row = row[0]
                                f = row[1][0:10]
                                ci_voix= row[42]
                                lac_voix=row[43]
                                row_volte = row[59]
                                cs = row[204]
                                tecc = row[215]
                                a = row[167]  # CAUSE CODE
                                model_terminal = row[210]
                                if f == 'date_utc_a':
                                    continue
                                datef = time.strptime(f, "%Y-%m-%d")
                                if datef > date_fin:
                                    continue

                                if datef < date_debut:
                                    dqaid_par_jour.append(nombre_dqaid_var)
                                    dqaid_file.write(
                                        "\n\n _____________________________________________________________________________________\n\n")
                                    dqaid_file.write("LE " + date_secondaire + "  LES " + str(
                                        nombre_dqaid_var) + " DQAID " + " QUI ONT ENVOYE DES DONNEES SONT: \n\n\n")
                                    ecrivain = 0.0
                                    for element in list_dqaid:
                                        ecrivain = ecrivain + 1
                                        dqaid_file.write(element + '   ')
                                        if ecrivain == 5:
                                            dqaid_file.write('\n')
                                            ecrivain = 0.0
                                    dqaid_file.write(
                                        "\n\n _____________________________________________________________________________________\n\n")
                                    list_dqaid = []
                                    nombre_dqaid_var = 0.0

                                    if nb_etat == 0.0:
                                        taux_succes_voix_set.append(0.0)
                                        nb_succes_voix_set.append(0.0)

                                        taux_failure_voix_set.append(0.0)
                                        nb_failure_voix_set.append(0.0)

                                        taux_drop_voix_set.append(0.0)
                                        nb_drop_voix_set.append(0.0)
                                    else:
                                        taux_succes_voix = (nb_succes_voix * 100 / nb_etat)
                                        taux_succes_voix_set.append(taux_succes_voix)
                                        nb_succes_voix_set.append(nb_succes_voix)
                                        taux_failure_voix = (nb_failure_voix * 100 / nb_etat)
                                        taux_failure_voix_set.append(taux_failure_voix)
                                        nb_failure_voix_set.append(nb_failure_voix)
                                        taux_drop_voix = (nb_drop_voix * 100 / nb_etat)
                                        taux_drop_voix_set.append(taux_drop_voix)
                                        nb_drop_voix_set.append(nb_drop_voix)
                                    taux_drop_voix = 0.0
                                    nb_drop_voix = 0.0
                                    taux_failure_voix = 0.0
                                    nb_failure_voix = 0.0
                                    taux_succes_voix = 0.0
                                    nb_succes_voix = 0.0
                                    nb_etat = 0.0
                                    if nb_etat_csfb == 0.0:
                                        nb_csfb_voix_set.append(0.0)
                                        taux_csfb_voix_set.append(0.0)
                                        taux_csfb_voix = 0.0
                                        nb_csfb_voix = 0.0
                                        nb_etat_csfb = 0.0
                                    else:
                                        taux_csfb_voix = (nb_csfb_voix * 100.0 / nb_etat_csfb)
                                        nb_csfb_voix_set.append(nb_csfb_voix)
                                        taux_csfb_voix_set.append(taux_csfb_voix)
                                        taux_csfb_voix = 0.0
                                        nb_csfb_voix = 0.0
                                        nb_etat_csfb = 0.0
                                    # VoLTE
                                    if nb_etat_volte > 0:
                                        taux_volte_voix = (nb_volte_voix * 100.0) / nb_etat_volte
                                        taux_volte_voix_set.append(taux_volte_voix)
                                        nb_volte_voix_set.append(nb_volte_voix)
                                        nb_volte_voix = 0.0
                                        nb_etat_volte = 0.0
                                    else:
                                        taux_volte_voix_set.append(0.0)
                                        nb_volte_voix_set.append(0.0)
                                        nb_volte_voix = 0.0
                                        nb_etat_volte = 0.0
                                    break

                                row[221] = '_'.join(row[221].split(" "))
                                if ci_voix=='NULL' or lac_voix=='NULL':
                                    #print(ci_voix+'-'+lac_voix)
                                    continue

                                if (departement + ' ' + ci_voix + '-' + lac_voix) in ci_lac_eci_tac_intermediaire and str(row[213]) == 'SFR' and str(row[221]) in val3 and row[220] in val5 and tecc in tech:

                                    #print('\n\n   \t JE PASSE')
                                    variable = val2
                                    date_secondaire = b
                                    if b != str(f):
                                        date.append(str(f))
                                        b = str(f)
                                        if var_ajout > 0:
                                            dqaid_par_jour.append(nombre_dqaid_var)
                                            dqaid_file.write(
                                                "\n\n _____________________________________________________________________________________\n\n")
                                            dqaid_file.write("LE " + date_secondaire + "  LES " + str(
                                                nombre_dqaid_var) + " DQAID " + " QUI ONT ENVOYE DES DONNEES SONT: \n\n\n")
                                            ecrivain = 0.0
                                            for element in list_dqaid:
                                                ecrivain = ecrivain + 1
                                                dqaid_file.write(element + '   ')
                                                if ecrivain == 5:
                                                    dqaid_file.write('\n')
                                                    ecrivain = 0.0
                                            dqaid_file.write(
                                                "\n\n _____________________________________________________________________________________\n\n")
                                            list_dqaid = []
                                            nombre_dqaid_var = 0.0

                                            if nb_etat == 0.0:
                                                taux_succes_voix_set.append(0.0)
                                                nb_succes_voix_set.append(0.0)

                                                taux_failure_voix_set.append(0.0)
                                                nb_failure_voix_set.append(0.0)

                                                taux_drop_voix_set.append(0.0)
                                                nb_drop_voix_set.append(0.0)
                                            else:
                                                taux_succes_voix = (nb_succes_voix * 100 / nb_etat)
                                                taux_succes_voix_set.append(taux_succes_voix)
                                                nb_succes_voix_set.append(nb_succes_voix)
                                                taux_failure_voix = (nb_failure_voix * 100 / nb_etat)
                                                taux_failure_voix_set.append(taux_failure_voix)
                                                nb_failure_voix_set.append(nb_failure_voix)
                                                taux_drop_voix = (nb_drop_voix * 100 / nb_etat)
                                                taux_drop_voix_set.append(taux_drop_voix)
                                                nb_drop_voix_set.append(nb_drop_voix)
                                            taux_drop_voix = 0.0
                                            nb_drop_voix = 0.0
                                            taux_failure_voix = 0.0
                                            nb_failure_voix = 0.0
                                            taux_succes_voix = 0.0
                                            nb_succes_voix = 0.0
                                            nb_etat = 0.0
                                            if nb_etat_csfb == 0.0:
                                                nb_csfb_voix_set.append(0.0)
                                                taux_csfb_voix_set.append(0.0)
                                                taux_csfb_voix = 0.0
                                                nb_csfb_voix = 0.0
                                                nb_etat_csfb = 0.0
                                            else:
                                                taux_csfb_voix = (nb_csfb_voix * 100.0 / nb_etat_csfb)
                                                nb_csfb_voix_set.append(nb_csfb_voix)
                                                taux_csfb_voix_set.append(taux_csfb_voix)
                                                taux_csfb_voix = 0.0
                                                nb_csfb_voix = 0.0
                                                nb_etat_csfb = 0.0
                                            # VoLTE
                                            if nb_etat_volte > 0:
                                                taux_volte_voix = (nb_volte_voix * 100.0) / nb_etat_volte
                                                taux_volte_voix_set.append(taux_volte_voix)
                                                nb_volte_voix_set.append(nb_volte_voix)
                                                nb_volte_voix = 0.0
                                                nb_etat_volte = 0.0
                                            else:
                                                taux_volte_voix_set.append(0.0)
                                                nb_volte_voix_set.append(0.0)
                                                nb_volte_voix = 0.0
                                                nb_etat_volte = 0.0

                                    var_ajout = var_ajout + 1

                                    # UTILISATEURS ACTIFS PAR JOURS
                                    if dqaid_row not in list_dqaid:
                                        nombre_dqaid_var = nombre_dqaid_var + 1
                                        list_dqaid.append(dqaid_row)

                                    # PARC MOBILE
                                    if model_terminal and model_terminal != '' and model_terminal != ' ':
                                        parc_mobile_total = parc_mobile_total + 1
                                        if model_terminal not in mobile:  # SI C EST LA PREMIERE FOIS QUE JE TROUVE CE MODERLE JE L AJOUTE A MON DICTIONNAIRE EN LE COMPTANT COMME PREMIER
                                            mobile[model_terminal] = 1
                                        else:  # SINON J INCREMENTE L EXISTANCE DU TERMINAL
                                            mobile[model_terminal] = mobile[model_terminal] + 1

                                    # TECNO
                                    if tecc == '2G':
                                        tecno_totale = tecno_totale + 1
                                        deux_g = deux_g + 1
                                    if tecc == '3G':
                                        tecno_totale = tecno_totale + 1
                                        trois_g = trois_g + 1
                                    if tecc == '4G':
                                        tecno_totale = tecno_totale + 1
                                        quatre_g = quatre_g + 1
                                    if tecc == 'UNKNOWN':
                                        tecno_totale = tecno_totale + 1
                                        autre_tecno = autre_tecno + 1

                                    # LES ETATS
                                    if str(row[218]) == 'Success' or str(row[218]) == 'Canceled' or str(
                                            row[218]) == 'Not connected' or str(row[218]) == 'Connected':
                                        nb_succes_voix = nb_succes_voix + 1
                                        nb_etat = nb_etat + 1

                                        # SUCCES VOLTE
                                        if row_volte:
                                            if row_volte == 'ims_11' or row_volte == 'ims.vel.site_11':
                                                # nb_volte_voix_set = []
                                                # taux_volte_voix_set = []
                                                # taux_volte_voix = 0.0
                                                nb_volte_voix = nb_volte_voix + 1
                                                nb_etat_volte = nb_etat_volte + 1

                                        if cs:
                                            if cs != 'NULL':
                                                if float(cs) > 0:
                                                    nb_csfb_voix = nb_csfb_voix + 1
                                                    nb_etat_csfb = nb_etat_csfb + 1
                                        # INCOMING OUTGOING
                                        if str(row[219]) == 'Incoming':
                                            succes_incoming = succes_incoming + 1
                                            nb_etat_incoming = nb_etat_incoming + 1
                                        if str(row[219]) == 'Outgoing':
                                            succes_outgoing = succes_outgoing + 1
                                            nb_etat_outgoing = nb_etat_outgoing + 1

                                    if str(row[218]) == 'Failure' or str(row[218]) == 'CAF':
                                        nb_failure_voix = nb_failure_voix + 1
                                        nb_etat = nb_etat + 1

                                        # VoLTE
                                        if row_volte:
                                            if row_volte == 'ims_11' or row_volte == 'ims.vel.site_11':
                                                nb_etat_volte = nb_etat_volte + 1

                                        if cs:
                                            nb_etat_csfb = nb_etat_csfb + 1
                                        # INCOMING OUTGOING
                                        if str(row[219]) == 'Incoming':
                                            failure_incoming = failure_incoming + 1
                                            nb_etat_incoming = nb_etat_incoming + 1
                                        if str(row[219]) == 'Outgoing':
                                            failure_outgoing = failure_outgoing + 1
                                            nb_etat_outgoing = nb_etat_outgoing + 1

                                    if str(row[218]) == 'Drop':
                                        nb_drop_voix = nb_drop_voix + 1
                                        nb_etat = nb_etat + 1

                                        # VoLTE
                                        if row_volte:
                                            if row_volte == 'ims_11' or row_volte == 'ims.vel.site_11':
                                                nb_etat_volte = nb_etat_volte + 1

                                        if cs:
                                            nb_etat_csfb = nb_etat_csfb + 1
                                        # INCOMING OUTGOING
                                        if str(row[219]) == 'Incoming':
                                            drop_incoming = drop_incoming + 1
                                            nb_etat_incoming = nb_etat_incoming + 1
                                        if str(row[219]) == 'Outgoing':
                                            drop_outgoing = drop_outgoing + 1
                                            nb_etat_outgoing = nb_etat_outgoing + 1

                                    else:
                                        if str(row[218]) != 'N/A' and str(row[218]) != '' and str(row[218]) != ' ' and str(
                                                row[218]) != 'Success' and str(row[218]) != 'Not connected' and str(
                                                row[218]) != 'Connected' and str(row[218]) != 'Failure' and str(
                                                row[218]) != 'CAF' and str(row[218]) != 'Drop':
                                            nb_etat = nb_etat + 1
                                            var_ajout = var_ajout + 1

                                            # VoLTE
                                            if row_volte:
                                                if row_volte == 'ims_11' or row_volte == 'ims.vel.site_11':
                                                    nb_etat_volte = nb_etat_volte + 1

                                            if cs:
                                                nb_etat_csfb = nb_etat_csfb + 1
                                            # INCOMING OUTGOING
                                            if str(row[219]) == 'Incoming':
                                                nb_etat_incoming = nb_etat_incoming + 1
                                            if str(row[219]) == 'Outgoing':
                                                nb_etat_outgoing = nb_etat_outgoing + 1

                                    if (row[167] == ''):  # IOS
                                        nb_cause_code = nb_cause_code + 1
                                        if row[218] == 'Connected':
                                            connected = connected + 1
                                        if row[218] == 'CAF':
                                            caf = caf + 1
                                        if str(row[218]) == 'Success':
                                            succes = succes + 1
                                        if str(row[218]) == 'Not connected':
                                            notconnected = notconnected + 1
                                        if str(row[218]) == 'Drop':
                                            drop = drop + 1
                                    else:  # ANDROID
                                        nb_cause_code = nb_cause_code + 1
                                        if (a[len(row[167]) - 1] == '1'):
                                            one = one + 1
                                        if (a[len(row[167]) - 1] == '2'):
                                            two = two + 1
                                        if (a[len(row[167]) - 1] == '3'):
                                            three = three + 1
                                        if (a[len(row[167]) - 1] == '4'):
                                            four = four + 1
                                        if (a[len(row[167]) - 1] == '5'):
                                            five = five + 1
                                        if (a[len(row[167]) - 1] == '6'):
                                            six = six + 1
                                        if (a[len(row[167]) - 1] == '7'):
                                            seven = seven + 1
                                        if (a[len(row[167]) - 1] == '8'):
                                            eight = eight + 1
                                        if str(row[218]) == 'Success':
                                            succes = succes + 1
                                        if str(row[218]) == 'Not connected':
                                            notconnected = notconnected + 1

                            if datef >= date_debut:
                                dqaid_par_jour.append(nombre_dqaid_var)
                                dqaid_file.write(
                                    "\n\n _____________________________________________________________________________________\n\n")
                                dqaid_file.write("LE " + date_secondaire + "  LES " + str(
                                    nombre_dqaid_var) + " DQAID " + " QUI ONT ENVOYE DES DONNEES SONT: \n\n\n")
                                ecrivain = 0.0
                                for element in list_dqaid:
                                    ecrivain = ecrivain + 1
                                    dqaid_file.write(element + '   ')
                                    if ecrivain == 5:
                                        dqaid_file.write('\n')
                                        ecrivain = 0.0
                                dqaid_file.write(
                                    "\n\n _____________________________________________________________________________________\n\n")
                                list_dqaid = []
                                nombre_dqaid_var = 0.0

                                if nb_etat == 0.0:
                                    taux_succes_voix_set.append(0.0)
                                    nb_succes_voix_set.append(0.0)

                                    taux_failure_voix_set.append(0.0)
                                    nb_failure_voix_set.append(0.0)

                                    taux_drop_voix_set.append(0.0)
                                    nb_drop_voix_set.append(0.0)
                                else:
                                    taux_succes_voix = (nb_succes_voix * 100 / nb_etat)
                                    taux_succes_voix_set.append(taux_succes_voix)
                                    nb_succes_voix_set.append(nb_succes_voix)
                                    taux_failure_voix = (nb_failure_voix * 100 / nb_etat)
                                    taux_failure_voix_set.append(taux_failure_voix)
                                    nb_failure_voix_set.append(nb_failure_voix)
                                    taux_drop_voix = (nb_drop_voix * 100 / nb_etat)
                                    taux_drop_voix_set.append(taux_drop_voix)
                                    nb_drop_voix_set.append(nb_drop_voix)
                                taux_drop_voix = 0.0
                                nb_drop_voix = 0.0
                                taux_failure_voix = 0.0
                                nb_failure_voix = 0.0
                                taux_succes_voix = 0.0
                                nb_succes_voix = 0.0
                                nb_etat = 0.0
                                if nb_etat_csfb == 0.0:
                                    nb_csfb_voix_set.append(0.0)
                                    taux_csfb_voix_set.append(0.0)
                                    taux_csfb_voix = 0.0
                                    nb_csfb_voix = 0.0
                                    nb_etat_csfb = 0.0
                                else:
                                    taux_csfb_voix = (nb_csfb_voix * 100.0 / nb_etat_csfb)
                                    nb_csfb_voix_set.append(nb_csfb_voix)
                                    taux_csfb_voix_set.append(taux_csfb_voix)
                                    taux_csfb_voix = 0.0
                                    nb_csfb_voix = 0.0
                                    nb_etat_csfb = 0.0
                                # VoLTE
                                if nb_etat_volte > 0:
                                    taux_volte_voix = (nb_volte_voix * 100.0) / nb_etat_volte
                                    taux_volte_voix_set.append(taux_volte_voix)
                                    nb_volte_voix_set.append(nb_volte_voix)
                                    nb_volte_voix = 0.0
                                    nb_etat_volte = 0.0
                                else:
                                    taux_volte_voix_set.append(0.0)
                                    nb_volte_voix_set.append(0.0)
                                    nb_volte_voix = 0.0
                                    nb_etat_volte = 0.0
                            if nb_etat_incoming == 0.0:
                                succes_incoming = 0.0
                                drop_incoming = 0.0
                                failure_incoming = 0.0
                                # succes_incoming_set.append(0.0)
                                # drop_incoming_set.append(0.0)
                                # failure_incoming_set.append(0.0)

                            else:
                                succes_incoming = (succes_incoming * 100.0) / nb_etat_incoming
                                drop_incoming = (drop_incoming * 100.0) / nb_etat_incoming
                                failure_incoming = (failure_incoming * 100.0) / nb_etat_incoming
                                # succes_incoming_set.append(succes_incoming)
                                # drop_incoming_set.append(drop_incoming)
                                # failure_incoming_set.append(failure_incoming)

                            if nb_etat_outgoing == 0.0:
                                succes_outgoing = 0.0
                                drop_outgoing = 0.0
                                failure_outgoing = 0.0
                                # succes_outgoing_set.append(0.0)
                                # drop_outgoing_set.append(0.0)
                                # failure_outgoing_set.append(0.0)

                            else:
                                succes_outgoing = (succes_outgoing * 100.0) / nb_etat_outgoing
                                drop_outgoing = (drop_outgoing * 100.0) / nb_etat_outgoing
                                failure_outgoing = (failure_outgoing * 100.0) / nb_etat_outgoing
                                # succes_outgoing_set.append(succes_outgoing)
                                # drop_outgoing_set.append(drop_outgoing)
                                # failure_outgoing_set.append(failure_outgoing)
                            if nb_cause_code == 0:
                                one = 0.0  # COVERAGE LOST
                                two = 0.0  # Multi-RAB testing -> potential CORE issue
                                three = 0.0  # Low coverage -> potential radio issue
                                four = 0.0  # User behaviour
                                five = 0.0  # Call Attempt Failure notified by OS -> radio limitation
                                six = 0.0  # 4G calls without 2G-3G fallback
                                seven = 0.0  # Estimated time to qualify call as CAF
                                eight = 0.0  # Force 2G for unknown bearer calls
                                succes = 0.0  # SUCCES DE L APPEL -> ETAT PROPRE A ANDROID
                                notconnected = 0.0  # ANNULATION PAR L APPELANT  -> CONSIDERE COMME SUCCES
                                caf = 0.0  # ECHEC DE L APPEL
                                connected = 0.0  # SUCCES DE L APPEL (APPEL EMIS) -> ETAT PROPRE A APPLE -> PAS TRES PRECIS
                                drop = 0.0
                            else:
                                one = (one * 100.0) / nb_cause_code  # COVERAGE LOST
                                two = (two * 100.0) / nb_cause_code  # Multi-RAB testing -> potential CORE issue
                                three = (three * 100.0) / nb_cause_code  # Low coverage -> potential radio issue
                                four = (four * 100.0) / nb_cause_code  # User behaviour
                                five = (
                                       five * 100.0) / nb_cause_code  # Call Attempt Failure notified by OS -> radio limitation
                                six = (six * 100.0) / nb_cause_code  # 4G calls without 2G-3G fallback
                                seven = (seven * 100.0) / nb_cause_code  # Estimated time to qualify call as CAF
                                eight = (eight * 100.0) / nb_cause_code  # Force 2G for unknown bearer calls
                                succes = (succes * 100.0) / nb_cause_code  # SUCCES DE L APPEL -> ETAT PROPRE A ANDROID
                                notconnected = (
                                               notconnected * 100.0) / nb_cause_code  # ANNULATION PAR L APPELANT  -> CONSIDERE COMME SUCCES
                                caf = (caf * 100.0) / nb_cause_code  # ECHEC DE L APPEL
                                connected = (
                                            connected * 100.0) / nb_cause_code  # SUCCES DE L APPEL (APPEL EMIS) -> ETAT PROPRE A APPLE -> PAS TRES PRECIS
                                drop = (drop * 100.0) / nb_cause_code

                            # CALCUL DES TAUX PARC MOBILE
                            for telephone in mobile:
                                # print('telephone: '+str(telephone))
                                if parc_mobile_total > 0:
                                    taux_mobile[telephone] = (mobile[telephone] * 100.0) / parc_mobile_total
                                else:
                                    taux_mobile[telephone] = 0.0
                                if taux_mobile[
                                    telephone] <= 3:  # JE CONSIDERE COMME AUTRE TOUT MODEL PRESENT A MOINS DE 3 POUR CENT DANS LE PARC
                                    nombre_mobile_inf_3pourcent = nombre_mobile_inf_3pourcent + taux_mobile[
                                        telephone]  # CA S APPEL NOMBRE MAIS C EST BIEN UN TAUX
                                else:  # SINON J AJOUTE LE TELEPHONE AINSI QUE SON TAUX DE PRESENCE DANS LES ENSEMBLES QUI CONSTRUIRONT LE GRAPHE ET LA LEGENDE
                                    camemberts_mobile.append(taux_mobile[telephone])
                                    legende_mobile.append(
                                        str(telephone) + ': ' + str(round(taux_mobile[telephone], 3)) + '%')
                            # MAINTENANT J AJOUTE LES TERMINAUX PRESENTS A MOINS DE 3 POUR CENT DANS NOTRE PARC SFR PERF
                            camemberts_mobile.append(nombre_mobile_inf_3pourcent)
                            legende_mobile.append('Autres: ' + str(round(nombre_mobile_inf_3pourcent, 3)) + '%')
                            # pourcentage = re.compile(r"(.*\: )(.*)(\%)", re.IGNORECASE)
                            # recherche_pourcentage = float(pourcentage.search(str(legende_mobile)))
                            # print(sorted(recherche_pourcentage, key= lambda: pourcentage. ))
                            # print(sorted(legende_mobile, key= legende_mobile[6:]))
                            # hadi_hiya=legende_mobile.sort(key=lambda x: (int(x.split(None, 1)[0]) if x[:1].isdigit() else 999, x))
                            # for tel in legende_mobile:
                            # print(tel[len(tel)-7:len(tel)-1])

                            # CALCUL DES TAUX TECNO
                            if tecno_totale > 0:  # J EVITE UNE DIVISION PAR 0
                                deux_g = (deux_g * 100.0) / tecno_totale
                                trois_g = (trois_g * 100.0) / tecno_totale
                                quatre_g = (quatre_g * 100.0) / tecno_totale
                                autre_tecno = (autre_tecno * 100.0) / tecno_totale
                            else:
                                deux_g = 0.0
                                trois_g = 0.0
                                quatre_g = 0.0
                                autre_tecno = 0.0

                            dqaid_file.close()
                            date.reverse()
                            dqaid_par_jour.reverse()
                            taux_succes_voix_set.reverse()
                            nb_succes_voix_set.reverse()
                            taux_failure_voix_set.reverse()
                            nb_failure_voix_set.reverse()
                            taux_drop_voix_set.reverse()
                            nb_drop_voix_set.reverse()
                            nb_csfb_voix_set.reverse()
                            taux_csfb_voix_set.reverse()
                            taux_volte_voix_set.reverse()
                            nb_volte_voix_set.reverse()
                            # print(dqaid_par_jour)




                            # ________________________________________________--___**_ SUCCES_voix _**___--___________________________________________________
                            # _____________________***PARAMS***________________________________________

                            ax1 = plt.subplot2grid((9, 9), (0, 0), colspan=4)
                            plt.xticks(rotation='vertical', fontsize=8)
                            plt.title('SUCCESS RATIO VOIX ' + date[0] + ' au ' + date[len(date) - 1])
                            params = {'legend.fontsize': 10,
                                      'legend.linewidth': 0, }
                            plt.gca().xaxis.set_major_formatter(mdates.DateFormatter("%Y-%m-%d"))
                            plt.gca().xaxis.set_major_locator(mdates.DayLocator())

                            # _____________________***AXE 1***________________________________________


                            x = [dt.datetime.strptime(d, "%Y-%m-%d").date() for d in date]
                            y = nb_succes_voix_set
                            ax1.bar(x, y, color='seagreen', zorder=1)
                            ax1.set_ylabel('Nb succs', color='seagreen')
                            for tl in ax1.get_yticklabels():
                                tl.set_color('seagreen')

                                # _____________________***AXE 2***________________________________________

                            ax2 = ax1.twinx()
                            ax2.yaxis.set_major_formatter(FormatStrFormatter('%.2f'))
                            x = [dt.datetime.strptime(d, "%Y-%m-%d").date() for d in date]
                            y = taux_succes_voix_set
                            ax2.plot(x, y, color='red', zorder=2)
                            plt.legend(loc='best')
                            ax2.set_xlabel('Jour')
                            ax2.set_ylabel('Taux succes %', color='red')
                            ax2.grid(True)
                            ax2.xaxis_date()
                            for t2 in ax2.get_yticklabels():
                                t2.set_color('red')
                                # plt.show()
                                # ________________________________________________--___**_ FIN_SUCCES_voix _**___--___________________________________________________


                                # ________________________________________________--___**_ FAILURE_voix _**___--___________________________________________________
                            # _____________________***PARAMS***________________________________________

                            ax1 = plt.subplot2grid((9, 9), (0, 5), colspan=4)
                            plt.xticks(rotation='vertical', fontsize=8)
                            plt.title('FAILURE RATIO voix ' + date[0] + ' au ' + date[len(date) - 1])
                            params = {'legend.fontsize': 10,
                                      'legend.linewidth': 0, }
                            plt.gca().xaxis.set_major_formatter(mdates.DateFormatter("%Y-%m-%d"))
                            plt.gca().xaxis.set_major_locator(mdates.DayLocator())

                            # _____________________***AXE 1***________________________________________


                            x = [dt.datetime.strptime(d, "%Y-%m-%d").date() for d in date]
                            y = nb_failure_voix_set
                            ax1.bar(x, y, color='#b31217', zorder=1)
                            ax1.set_ylabel('Nb echc', color='#b31217')
                            for tl in ax1.get_yticklabels():
                                tl.set_color('#b31217')

                            # _____________________***AXE 2***________________________________________

                            ax2 = ax1.twinx()
                            ax2.yaxis.set_major_formatter(FormatStrFormatter('%.2f'))
                            x = [dt.datetime.strptime(d, "%Y-%m-%d").date() for d in date]
                            y = taux_failure_voix_set
                            ax2.plot(x, y, color='green', zorder=2)
                            plt.legend(loc='best')
                            ax2.set_xlabel('Jour')
                            ax2.set_ylabel('Taux Echec %', color='green')
                            ax2.grid(True)
                            ax2.xaxis_date()
                            for t2 in ax2.get_yticklabels():
                                t2.set_color('green')
                                # ___________________________________________________________________________________________________
                                # ________________________________________________--___**_ FIN_failure_voix _**___--___________________________________________________


                                # ________________________________________________--___**_ DROP_voix _**___--___________________________________________________
                            # _____________________***PARAMS***________________________________________

                            ax1 = plt.subplot2grid((9, 9), (2, 0), colspan=4)
                            plt.xticks(rotation='vertical', fontsize=8)
                            plt.title('DROP RATIO voix ' + date[0] + ' au ' + date[len(date) - 1])
                            params = {'legend.fontsize': 10,
                                      'legend.linewidth': 0, }
                            plt.gca().xaxis.set_major_formatter(mdates.DateFormatter("%Y-%m-%d"))
                            plt.gca().xaxis.set_major_locator(mdates.DayLocator())

                            # _____________________***AXE 1***________________________________________


                            x = [dt.datetime.strptime(d, "%Y-%m-%d").date() for d in date]
                            y = nb_drop_voix_set
                            ax1.bar(x, y, color='grey', zorder=1)
                            ax1.set_ylabel('Nb coup', color='grey')
                            for tl in ax1.get_yticklabels():
                                tl.set_color('grey')

                            # _____________________***AXE 2***________________________________________

                            ax2 = ax1.twinx()
                            ax2.yaxis.set_major_formatter(FormatStrFormatter('%.2f'))
                            x = [dt.datetime.strptime(d, "%Y-%m-%d").date() for d in date]
                            y = taux_drop_voix_set
                            ax2.plot(x, y, color='k', zorder=2)
                            plt.legend(loc='best')
                            ax2.set_xlabel('Jour')
                            ax2.set_ylabel('Taux coup %', color='k')
                            ax2.grid(True)
                            ax2.xaxis_date()
                            for t2 in ax2.get_yticklabels():
                                t2.set_color('k')
                                # ___________________________________________________________________________________________________
                                # ________________________________________________--___**_ FIN_DROP_voix _**___--___________________________________________________

                            # ________________________________________________--___**_ CSFB_voix _**___--___________________________________________________
                            # _____________________***PARAMS***________________________________________

                            ax1 = plt.subplot2grid((9, 9), (2, 5), colspan=4)
                            plt.xticks(rotation='vertical', fontsize=8)
                            plt.title('CSFB RATIO SUCCESS' + date[0] + ' au ' + date[len(date) - 1])
                            params = {'legend.fontsize': 10,
                                      'legend.linewidth': 0, }
                            plt.gca().xaxis.set_major_formatter(mdates.DateFormatter("%Y-%m-%d"))
                            plt.gca().xaxis.set_major_locator(mdates.DayLocator())

                            # _____________________***AXE 1***________________________________________


                            x = [dt.datetime.strptime(d, "%Y-%m-%d").date() for d in date]
                            y = nb_csfb_voix_set
                            ax1.bar(x, y, color='indigo', zorder=1)
                            ax1.set_ylabel('Nb CSFB', color='indigo')
                            for tl in ax1.get_yticklabels():
                                tl.set_color('indigo')

                            # _____________________***AXE 2***________________________________________

                            ax2 = ax1.twinx()
                            ax2.yaxis.set_major_formatter(FormatStrFormatter('%.2f'))
                            x = [dt.datetime.strptime(d, "%Y-%m-%d").date() for d in date]
                            y = taux_csfb_voix_set
                            ax2.plot(x, y, color='plum', zorder=2)
                            plt.legend(loc='best')
                            ax2.set_xlabel('Jour')
                            ax2.set_ylabel('Taux CSFB %', color='plum')
                            ax2.grid(True)
                            ax2.xaxis_date()
                            for t2 in ax2.get_yticklabels():
                                t2.set_color('plum')

                                # ___________________________________________________________________________________________________
                                # ________________________________________________--___**_ FIN_CSFB_voix _**___--___________________________________________________


                                # ________________________________________________--___**_ ETATS_INCOMING_voix _**___--___________________________________________________
                            # _____________________***PARAMS***________________________________________
                            plt.subplot2grid((9, 5), (4, 0), rowspan=3)
                            colors = ['seagreen', 'grey', 'red']
                            legende = [('Succes: ' + str(round(succes_incoming, 3)) + '%'),
                                       ('Coup: ' + str(round(drop_incoming, 3)) + '%'),
                                       ('Echc: ' + str(round(failure_incoming, 3)) + '%')]
                            fracs = [succes_incoming, drop_incoming, failure_incoming]
                            # GRAPHIC
                            plt.pie(fracs, shadow=True, startangle=90, colors=(colors))
                            plt.legend(legende, loc="best", fontsize=10, fancybox=True).get_frame().set_alpha(0.5)
                            plt.title('APPELS ENTRANTS')
                            # ________________________________________________--___**_ FIN_ETATS_INCOMING_voix _**___--___________________________________________________


                            # ________________________________________________--___**_ ETATS_outgoing_voix _**___--___________________________________________________
                            # _____________________***PARAMS***________________________________________
                            plt.subplot2grid((9, 5), (4, 1), rowspan=3)
                            colors = ['seagreen', 'grey', 'red']
                            legende = [('Succes: ' + str(round(succes_outgoing, 3)) + '%'),
                                       ('Coup: ' + str(round(drop_outgoing, 3)) + '%'),
                                       ('Echc: ' + str(round(failure_outgoing, 3)) + '%')]
                            fracs = [succes_outgoing, drop_outgoing, failure_outgoing]
                            # GRAPHIC
                            plt.pie(fracs, shadow=True, startangle=90, colors=(colors))
                            plt.legend(legende, loc="best", fontsize=10, fancybox=True).get_frame().set_alpha(0.5)
                            plt.title('APPELS SORTANTS')
                            # ________________________________________________--___**_ FIN_ETATS_outgoing_voix _**___--___________________________________________________

                            # ________________________________________________--___**_ CAUSE_CODE_voix _**___--___________________________________________________
                            # _____________________***PARAMS***________________________________________
                            plt.subplot2grid((9, 5), (4, 2), rowspan=3)
                            colors = ['seagreen', 'grey', 'red', 'white', 'purple', 'orange', 'pink', 'sienna', 'black',
                                      'yellow', 'aqua', 'royalblue', 'springgreen']
                            legende = [('Succes: ' + str(round(succes, 3)) + '%'),
                                       ('Drop: ' + str(round(drop, 3)) + '%'),
                                       ('CAF: ' + str(round(caf, 3)) + '%'),
                                       ('Coverage lost[1]: ' + str(round(one, 3)) + '%'),
                                       ('Multi-RAB testing[2]: ' + str(round(two, 3)) + '%'),
                                       ('Low coverage[3]: ' + str(round(three, 3)) + '%'),
                                       ('User behaviour[4]: ' + str(round(four, 3)) + '%'),
                                       ('Call Attempt Failure notified by OS[5]: ' + str(round(five, 3)) + '%'),
                                       ('4G calls without 2G-3G fallback[6]: ' + str(round(six, 3)) + '%'),
                                       ('Estimated time to qualify call as CAF[7]: ' + str(round(seven, 3)) + '%'),
                                       ('Force 2G for unknown bearer calls[8]: ' + str(round(eight, 3)) + '%'),
                                       ('Not Connected: ' + str(round(notconnected, 3)) + '%'),
                                       ('Connected: ' + str(round(connected, 3)) + '%')
                                       ]
                            fracs = [succes, drop, caf, one, two, three, four, five, six, seven, eight, notconnected,
                                     connected]
                            # GRAPHIC
                            plt.pie(fracs, shadow=True, startangle=90, colors=(colors))
                            plt.legend(legende, loc="best", fontsize=10, fancybox=True).get_frame().set_alpha(0.5)
                            plt.title('EATS DES APPELS')
                            # ________________________________________________--___**_ FIN_CAUSE_CODE_voix _**___--___________________________________________________

                            # ________________________________________________--___**_ PARC_MOBILE_voix _**___--___________________________________________________
                            # _____________________***PARAMS***________________________________________
                            plt.subplot2grid((9, 5), (4, 3), rowspan=3)
                            couleurs = cm.Set1(np.arange(40) / 40.)
                            # GRAPHIC
                            plt.pie(camemberts_mobile, shadow=True, startangle=90, colors=couleurs)
                            plt.legend(legende_mobile, loc="best", fontsize=10, fancybox=True).get_frame().set_alpha(0.5)
                            plt.title('PARC MOBILE')
                            # ________________________________________________--___**_ FIN_PARC_MOBILE_voix _**___--___________________________________________________

                            # ________________________________________________--___**_ CAUSE_CODE_voix _**___--___________________________________________________
                            # _____________________***PARAMS***________________________________________
                            plt.subplot2grid((9, 5), (4, 4), rowspan=3)
                            # couleurs = ['khaki','mediumaquamarine','cornflowerblue','lightcoral']
                            legende = [('2G: ' + str(round(deux_g, 3)) + '%'),
                                       ('3G: ' + str(round(trois_g, 3)) + '%'),
                                       ('4G: ' + str(round(quatre_g, 3)) + '%'),
                                       ('AUTRE: ' + str(round(autre_tecno, 3)) + '%')]
                            fracs = [deux_g, trois_g, quatre_g, autre_tecno]
                            # GRAPHIC
                            plt.pie(fracs, shadow=True, startangle=90, colors=(couleurs))
                            plt.legend(legende, loc="best", fontsize=10, fancybox=True).get_frame().set_alpha(0.5)
                            plt.title('TECNOS')
                            # ________________________________________________--___**_ FIN_CAUSE_CODE_voix _**___--___________________________________________________

                            # ________________________________________________--___**_ SUCCES_voix _**___--___________________________________________________
                            # _____________________***PARAMS***________________________________________

                            ax1 = plt.subplot2grid((9, 9), (8, 0), rowspan=2, colspan=4)
                            plt.xticks(rotation='vertical', fontsize=8)
                            plt.title('Nb UTILISATEUR ACTIFS du ' + date[0] + ' au ' + date[len(date) - 1])
                            params = {'legend.fontsize': 10,
                                      'legend.linewidth': 0, }
                            plt.gca().xaxis.set_major_formatter(mdates.DateFormatter("%Y-%m-%d"))
                            plt.gca().xaxis.set_major_locator(mdates.DayLocator())

                            # _____________________***AXE 1***________________________________________

                            x = [dt.datetime.strptime(d, "%Y-%m-%d").date() for d in date]
                            y = dqaid_par_jour
                            ax1.bar(x, y, color='teal', zorder=1)
                            ax1.set_ylabel('Nb Utilisateur', color='teal')
                            for tl in ax1.get_yticklabels():
                                tl.set_color('teal')
                                # ________________________________________________--___**_ FIN_SUCCES_voix _**___--___________________________________________________


                                # ________________________________________________--___**_ VoLTE_voix _**___--___________________________________________________

                            # _____________________***PARAMS***________________________________________

                            ax1 = plt.subplot2grid((9, 9), (8, 5), rowspan=2, colspan=4)
                            plt.xticks(rotation='vertical', fontsize=8)
                            plt.title('VoLTE SUCCESS RATIO du ' + date[0] + ' au ' + date[len(date) - 1])
                            params = {'legend.fontsize': 10,
                                      'legend.linewidth': 0, }
                            plt.gca().xaxis.set_major_formatter(mdates.DateFormatter("%Y-%m-%d"))
                            plt.gca().xaxis.set_major_locator(mdates.DayLocator())

                            # _____________________***AXE 1***________________________________________


                            x = [dt.datetime.strptime(d, "%Y-%m-%d").date() for d in date]
                            y = nb_volte_voix_set
                            ax1.bar(x, y, color='black', zorder=1)
                            ax1.set_ylabel('Nb VoLTE Succ', color='black')
                            for tl in ax1.get_yticklabels():
                                tl.set_color('black')

                                # _____________________***AXE 2***________________________________________

                            ax2 = ax1.twinx()
                            ax2.yaxis.set_major_formatter(FormatStrFormatter('%.2f'))
                            x = [dt.datetime.strptime(d, "%Y-%m-%d").date() for d in date]
                            y = taux_volte_voix_set
                            ax2.plot(x, y, color='red', zorder=2)
                            plt.legend(loc='best')
                            ax2.set_xlabel('Jour')
                            ax2.set_ylabel('Taux VoLTE succ %', color='red')
                            ax2.grid(True)
                            ax2.xaxis_date()
                            for t2 in ax2.get_yticklabels():
                                t2.set_color('red')

                                # ________________________________________________--___**_ FIN_VoLTE_voix _**___--___________________________________________________


                                # ________________________________________________--___**_FIN MATPLOTLIB _**___--___________________________________________________

                            return date, dqaid_par_jour, taux_succes_voix_set, nb_succes_voix_set, taux_failure_voix_set, nb_failure_voix_set, taux_drop_voix_set, nb_drop_voix_set, nb_csfb_voix_set, taux_csfb_voix_set, succes_incoming, drop_incoming, failure_incoming, succes_outgoing, drop_outgoing, failure_outgoing, camemberts_mobile, legende_mobile, deux_g, trois_g, quatre_g, autre_tecno, dqaid_par_jour, succes, drop, caf, one, two, three, four, five, six, seven, eight, notconnected, connected, taux_volte_voix_set, nb_volte_voix_set

                        # PYGAL
                        def taux_incoming2(succes_incoming, drop_incoming, failure_incoming, event):
                            pie_chart2 = pygal.Pie(height=400, margin_left=70, legend_box_size=15, legend_font_size=16,
                                                   truncate_legend=50)
                            pie_chart2.title = 'Voix Incoming'
                            pie_chart2.add('Succes: ' + str(round(succes_incoming, 1)) + '%', succes_incoming)
                            pie_chart2.add('Drop: ' + str(round(drop_incoming, 1)) + '%', drop_incoming)
                            pie_chart2.add('Failure: ' + str(round(failure_incoming, 1)) + '%', failure_incoming)
                            pie_chart2.render_in_browser()
                            pie_chart2.render_to_file("INCOMING_voix.svg")

                            # __________________________________--Pygal--_____________________________________________________________

                        def taux_outgoing2(succes_outgoing, drop_outgoing, failure_outgoing, event):

                            # _________________________________--Pygal--________________________________________________________

                            pie_chart1 = pygal.Pie(height=400, margin_left=70, legend_box_size=15, legend_font_size=16,
                                                   truncate_legend=50)
                            pie_chart1.title = 'Voix Outgoing'
                            pie_chart1.add('Succes: ' + str(round(succes_outgoing, 1)) + '%', succes_outgoing)
                            pie_chart1.add('Drop: ' + str(round(drop_outgoing, 1)) + '%', drop_outgoing)
                            pie_chart1.add('Failure: ' + str(round(failure_outgoing, 1)) + '%', failure_outgoing)
                            pie_chart1.render_in_browser()
                            pie_chart1.render_to_file("OUTGOING_voix.svg")

                            # _________________________________--Pygal--________________________________________________________

                        def nb_utilisateur_actifs(date, dqaid_par_jour, event):
                            config = pygal.Config()
                            config.style = pygal.style.DarkStyle
                            config.defs.append('''
                              <linearGradient id="gradient-0" x1="0" x2="0" y1="0" y2="1">
                                <stop offset="0%" stop-color="#ff5995" />
                                <stop offset="100%" stop-color="#feed6c" />
                              </linearGradient>
                            ''')
                            config.defs.append('''
                              <linearGradient id="gradient-1" x1="0" x2="0" y1="0" y2="1">
                                <stop offset="0%" stop-color="#b6e354" />
                                <stop offset="100%" stop-color="#8cedff" />
                              </linearGradient>
                            ''')
                            config.css.append('''inline:
                              .color-0 {
                                fill: url(#gradient-0) !important;
                                stroke: url(#gradient-0) !important;
                              }''')
                            config.css.append('''inline:
                              .color-1 {
                                fill: url(#gradient-1) !important;
                                stroke: url(#gradient-1) !important;
                              }''')

                            # __________________________--PYGAL--______________________________________________
                            y = dqaid_par_jour
                            # height=300 ,legend_at_bottom=True,x_label_rotation=90)
                            nb_users_bar = pygal.Bar(config)
                            nb_users_bar.title = 'Nombre Utilisateur Actifs Par Jour'
                            nb_users_bar.x_labels = date
                            nb_users_bar.add('Nb Users', y)
                            nb_users_bar.render_in_browser()
                            nb_users_bar.render_to_file("NB_Users_par_jour_voix.svg")
                            # _________________________________________--PYGAL--______________________________________________

                        def tecno_pygal(deux_g, trois_g, quatre_g, autre_tecno, event):
                            # ________________________--Pygal--__________________________________________
                            pie_techno = pygal.Pie(height=400, margin_left=70, legend_box_size=15, legend_font_size=16,
                                                   truncate_legend=50)
                            pie_techno.title = 'TECNO VOIX'
                            pie_techno.add('2G: ' + str(round(deux_g, 1)) + '%', deux_g)
                            pie_techno.add('3G: ' + str(round(trois_g, 1)) + '%', trois_g)
                            pie_techno.add('4G: ' + str(round(quatre_g, 1)) + '%', quatre_g)
                            pie_techno.add('Autre: ' + str(round(autre_tecno, 1)) + '%', autre_tecno)
                            pie_techno.render_in_browser()
                            pie_techno.render_to_file("techno_voix.svg")
                            # ________________________--Pygal--__________________________________________

                        def parc_mobile_pygal(camemberts_mobile, legende_mobile, event):
                            config = pygal.Config()
                            config.style = pygal.style.DarkStyle
                            config.defs.append('''
                                                                      <linearGradient id="gradient-0" x1="0" x2="0" y1="0" y2="1">
                                                                        <stop offset="0%" stop-color="#ff5995" />
                                                                        <stop offset="100%" stop-color="#feed6c" />
                                                                      </linearGradient>
                                                                    ''')
                            config.defs.append('''
                                                                      <linearGradient id="gradient-1" x1="0" x2="0" y1="0" y2="1">
                                                                        <stop offset="0%" stop-color="#b6e354" />
                                                                        <stop offset="100%" stop-color="#8cedff" />
                                                                      </linearGradient>
                                                                    ''')
                            config.css.append('''inline:
                                                                      .color-0 {
                                                                        fill: url(#gradient-0) !important;
                                                                        stroke: url(#gradient-0) !important;
                                                                      }''')
                            config.css.append('''inline:
                                                                      .color-1 {
                                                                        fill: url(#gradient-1) !important;
                                                                        stroke: url(#gradient-1) !important;
                                                                      }''')
                            # ______________________________--Pygal--______________________________________
                            # Parc_Mobile = pygal.Pie(height=400,margin_left=70,legend_box_size=15,legend_font_size=16,truncate_legend=50)
                            Parc_Mobile = pygal.Pie(config, legend_font_size=16, truncate_legend=50)
                            Parc_Mobile.title = 'PARC MOBILE'
                            compteur = 0
                            for valeur in camemberts_mobile:
                                Parc_Mobile.add(legende_mobile[compteur], round(valeur, 1))
                                compteur = compteur + 1
                            Parc_Mobile.render_in_browser()
                            Parc_Mobile.render_to_file("Parc_Mobile_voix.svg")
                            # ______________________________--Pygal--_______________________________________

                        def success_ratio3(date, taux_succes_voix_set, nb_succes_voix_set, event):
                            config = pygal.Config()
                            config.style = pygal.style.DarkStyle
                            config.defs.append('''
                                                                      <linearGradient id="gradient-0" x1="0" x2="0" y1="0" y2="1">
                                                                        <stop offset="0%" stop-color="#ff5995" />
                                                                        <stop offset="100%" stop-color="#feed6c" />
                                                                      </linearGradient>
                                                                    ''')
                            config.defs.append('''
                                                                      <linearGradient id="gradient-1" x1="0" x2="0" y1="0" y2="1">
                                                                        <stop offset="0%" stop-color="#b6e354" />
                                                                        <stop offset="100%" stop-color="#8cedff" />
                                                                      </linearGradient>
                                                                    ''')
                            config.css.append('''inline:
                                                                      .color-0 {
                                                                        fill: url(#gradient-0) !important;
                                                                        stroke: url(#gradient-0) !important;
                                                                      }''')
                            config.css.append('''inline:
                                                                      .color-1 {
                                                                        fill: url(#gradient-1) !important;
                                                                        stroke: url(#gradient-1) !important;
                                                                      }''')
                            # __________________________-------------------------PYGAL------------------------------------__________________________________________________________________________
                            # success_plot = pygal.Line(height=400,include_x_axis=True,label_font_size=4,title_font_size=26,x_title='Jours',y_title='SUCCES',legend_at_bottom=True,x_label_rotation=90)
                            success_plot = pygal.Line(config, legend_at_bottom=True)
                            success_plot.title = 'SUCCESS RATIO_Voix'
                            success_plot.x_labels = date
                            success_plot.add('Nombre_Success', nb_succes_voix_set)
                            success_plot.add('Taux_Succes', taux_succes_voix_set, secondary=True)
                            success_plot.render_in_browser()
                            success_plot.render_to_file("Success_RATIO_voix.svg")
                            # __________________________-------------------------PYGAL------------------------------------__________________________________________________________________________

                        def failure_ratio3(date, taux_failure_voix_set, nb_failure_voix_set, event):
                            # __________________________-------------------------PYGAL------------------------------------__________________________________________________________________________
                            Failure_plot = pygal.Line(height=400, include_x_axis=True, label_font_size=4,
                                                      title_font_size=26, x_title='Jours', y_title='Echec',
                                                      legend_at_bottom=True, x_label_rotation=90)
                            Failure_plot.title = 'FAILURE RATIO VOIX'
                            Failure_plot.x_labels = date
                            Failure_plot.add('Nb_Echec', nb_failure_voix_set)
                            Failure_plot.add('Taux_Echec', taux_failure_voix_set, secondary=True)
                            Failure_plot.render_in_browser()
                            Failure_plot.render_to_file("Failure_RATIO_VOIX.svg")
                            # __________________________-------------------------PYGAL------------------------------------__________________________________________________________________________

                        def drop_ratio3(date, taux_drop_voix_set, nb_drop_voix_set, event):
                            # _____________________--PYGAL--_________________________
                            Drop_plot = pygal.Line(height=400, include_x_axis=True, label_font_size=4, title_font_size=26,
                                                   x_title='Jours', y_title='COUPURE', legend_at_bottom=True,
                                                   x_label_rotation=90)
                            Drop_plot.title = 'DROP RATIO VOIX'
                            Drop_plot.x_labels = date
                            Drop_plot.add('Nombre_Drop', nb_drop_voix_set)
                            Drop_plot.add('Taux_Drop', taux_drop_voix_set, secondary=True)
                            Drop_plot.render_in_browser()
                            Drop_plot.render_to_file("Drop_RATIO_voix.svg")
                            # _____________________--PYGAL--_________________________

                        def csfb2(date, nb_csfb_voix_set, taux_csfb_voix_set, event):

                            # _____________________--PYGAL--_________________________
                            CSFB_plot = pygal.Line(height=400, include_x_axis=True, label_font_size=4, title_font_size=26,
                                                   x_title='Jours', y_title='CSFB', legend_at_bottom=True,
                                                   x_label_rotation=90)
                            CSFB_plot.title = 'CSFallBack SUCCESS RATIO VOIX'
                            CSFB_plot.x_labels = date
                            CSFB_plot.add('Nombre_CSFB', nb_csfb_voix_set)
                            CSFB_plot.add('Taux_CSFB', taux_csfb_voix_set, secondary=True)
                            CSFB_plot.render_in_browser()
                            CSFB_plot.render_to_file("CSFB_RATIO_voix.svg")
                            # _____________________--PYGAL--_________________________

                        def taux_etat_par_date2(succes, drop, caf, one, two, three, four, five, six, seven, eight,
                                                notconnected, connected, event):
                            # _______________________--Pygal--________________________________________________________

                            pie_chart2 = pygal.Pie(height=400, margin_left=70, legend_box_size=15, legend_font_size=16,
                                                   truncate_legend=50)
                            pie_chart2.title = 'Taux ETATS Communications'
                            pie_chart2.add('Succes: ' + str(round(succes, 1)) + "%", succes)
                            pie_chart2.add('Connected: ' + str(round(connected, 1)) + "%", connected)
                            pie_chart2.add('Not Conn: ' + str(round(drop, 1)) + "%", notconnected)
                            pie_chart2.add('Drop: ' + str(round(succes, 1)) + "%", drop)
                            pie_chart2.add('CAF: ' + str(round(caf, 1)) + "%", caf)

                            pie_chart2.add('Coverage lost[1]: ' + str(round(one, 1)) + "%", one)
                            pie_chart2.add('Multi-RAB testing[2]: ' + str(round(two, 1)) + "%", two)
                            pie_chart2.add('Low coverage[3]: ' + str(round(three, 1)) + "%", three)
                            pie_chart2.add('User behaviour[4]: ' + str(round(four, 1)) + "%", four)
                            pie_chart2.add('Call Attempt Failure notified by OS[5]: ' + str(round(five, 1)) + "%", five)
                            pie_chart2.add('4G calls without 2G-3G fallback[6]: ' + str(round(six, 1)) + "%", six)
                            pie_chart2.add('Estimated time to qualify call as CAF[7]: ' + str(round(seven, 1)) + "%", seven)
                            pie_chart2.add('Force 2G for unknown bearer calls[8]: ' + str(round(eight, 1)) + "%", eight)
                            pie_chart2.render_in_browser()
                            pie_chart2.render_to_file("Cause_Code_voix.svg")

                            # __________________________________--Pygal--_____________________________________________________________

                        def volte_pygal(date, taux_volte_voix_set, nb_volte_voix_set, event):
                            # __________________________-------------------------PYGAL------------------------------------__________________________________________________________________________
                            success_plot = pygal.Line(height=400, include_x_axis=True, label_font_size=4,
                                                      title_font_size=26, x_title='Jours', y_title='SUCCES VoLTE',
                                                      legend_at_bottom=True, x_label_rotation=90)
                            success_plot.title = 'VoLTE SUCCESS RATIO'
                            success_plot.x_labels = date
                            success_plot.add('Nombre Succes VoLTE', nb_volte_voix_set)
                            success_plot.add('Taux_Succes VoLTE', taux_volte_voix_set, secondary=True)
                            success_plot.render_in_browser()
                            success_plot.render_to_file("VoLTE_Success_RATIO.svg")
                            # __________________________-------------------------PYGAL------------------------------------__________________________________________________________________________

                        val4 = 0.0

                        """
                        class excuteur_pro():
                            global legraphe_pyg
                            if event:
                                taux_incoming2 = taux_incoming2(reader, val1, val2, val3, val4, val5, tech)
                            #legraphe_pyg = taux_outgoing2(reader, val1, val2, val3, val4, val5, tech)

                        # success_ratio(reader)
                        #print(val3)
                        """

                        # date, taux_volte_voix_set, nb_volte_voix_set

                        # Thread(target=csfb(reader,val1,val2,val3,val4,val5,tech)).start()
                        # Thread(target=failure_ratio2(reader,val1,val2,val3,val4,val5,tech)).start()
                        # Thread(target=drop_ratio2(reader,val1,val2,val3,val4,val5,tech)).start()
                        # Thread(target=drop_ratio2(reader,val1,val2,val3,val4,val5,tech)).start()
                        # Thread(target=success_ratio2(reader,val1,val2,val3,val4,val5,tech)).start()
                        # Thread(target=mobile_gt(reader, val1, val2, val3,val5,tech)).start()
                        # Thread(target=voix(reader, val1, val2, val3, val4, val5, tech)).start()
                        date, dqaid_par_jour, taux_succes_voix_set, nb_succes_voix_set, taux_failure_voix_set, nb_failure_voix_set, taux_drop_voix_set, nb_drop_voix_set, nb_csfb_voix_set, taux_csfb_voix_set, succes_incoming, drop_incoming, failure_incoming, succes_outgoing, drop_outgoing, failure_outgoing, camemberts_mobile, legende_mobile, deux_g, trois_g, quatre_g, autre_tecno, dqaid_par_jour, succes, drop, caf, one, two, three, four, five, six, seven, eight, notconnected, connected, taux_volte_voix_set, nb_volte_voix_set = voix(
                            reader, val1, val2, val3, val4, val5, tech,departement)

                        # pie_chart=Thread(target=taux_incoming(reader,val1,val2,val3,val4,val5,tech)).start()
                        # pie_chart2=Thread(target=taux_outgoing(reader,val1,val2,val3,val4,val5,tech)).start()
                        # bar2=Thread(target=ticket_profil(reader,val1,val2,val3,val4,val5,tech)).start()

                        # pie_chart = taux_incoming(reader, val1, val2, val3, val4, val5, tech)
                        # pie_chart2 = taux_outgoing(reader, val1, val2, val3, val4, val5, tech)
                        # nb_users_bar = ticket_profil(reader, val1, val2, val3, val4, val5, tech)
                        # failure_graph=failure_ratio2(reader,val1,val2,val3,val4,val5,tech)
                        # success_graph=success_ratio2(reader, val1, val2, val3, val4, val5, tech)
                        # drop_graph=drop_ratio2(reader,val1,val2,val3,val4,val5,tech)
                        # csfb_graph=csfb(reader,val1,val2,val3,val4,val5,tech)
                        # taux_etat_par_date(reader, val1, val2, val3, val4, val5, tech)

                        # p = gridplot([success_graph, failure_graph, drop_graph, csfb_graph, nb_users_bar, pie_chart, pie_chart2],ncols=3, plot_width=500, plot_height=500)

                        # show(p)


                        # csfb(reader,val1,val2,val3,val4,val5)
                        # failure_ratio2(reader,val1,val2,val3,val4,val5)
                        # drop_ratio2(reader,val1,val2,val3,val4,val5)
                        # success_ratio2(reader,val1,val2,val3,val4,val5)
                        # mobile_gt(reader, val1, val2, val3,val5)
                        # taux_incoming(reader,val1,val2,val3,val4,val5)
                        # taux_outgoing(reader,val1,val2,val3,val4,val5)
                        # ticket_profil(reader,val1,val2,val3,val4,val5)

                        # f = Figure(figsize=(5, 4), dpi=100)
                        # root_2 = tix.Tk()
                        # root_2.wm_title("Dashboard")
                        params = {'legend.fontsize': 10, 'legend.linewidth': 0, }
                        # canvas = FigureCanvasTkAgg(f, master=choix)
                        # canvas.show()
                        # canvas.get_tk_widget().pack(side=Tk.TOP, fill=Tk.BOTH, expand=1)
                        # toolbar = NavigationToolbar2TkAgg(canvas, root)
                        # toolbar.update()
                        # canvas._tkcanvas.pack(side=Tk.TOP, fill=Tk.BOTH, expand=1)

                        # plt.xticks(rotation='vertical', fontsize=8)
                        # plt.rcParams.update(params)
                        plt.legend(loc='best')
                        figManager = plt.get_current_fig_manager()
                        figManager.window.showMaximized()
                        # plt.show()

                        couleur_bouton = 'white'
                        from matplotlib.widgets import Button as buttonn

                        # bouttons matplotlib
                        # Bouton Success_Ratio
                        b2ax_SSRatio = plt.axes([0.51, 0.83, 0.01, 0.01])
                        bouttonni6 = buttonn(b2ax_SSRatio, '', color=couleur_bouton)
                        bouttonni6.on_clicked(
                            lambda event: success_ratio3(date, taux_succes_voix_set, nb_succes_voix_set, event))
                        # Bouton Failure_Ratio
                        b2ax_FRRatio = plt.axes([0.94, 0.83, 0.01, 0.01])
                        bouttonni7 = buttonn(b2ax_FRRatio, '', color=couleur_bouton)
                        bouttonni7.on_clicked(
                            lambda event: failure_ratio3(date, taux_failure_voix_set, nb_failure_voix_set, event))
                        # Bouton Drop_Ratio
                        b2ax_DPRatio = plt.axes([0.51, 0.65, 0.01, 0.01])
                        bouttonni8 = buttonn(b2ax_DPRatio, '', color=couleur_bouton)
                        bouttonni8.on_clicked(lambda event: drop_ratio3(date, taux_drop_voix_set, nb_drop_voix_set, event))
                        # Bouton CSFB_Ratio
                        b2ax_CSFBRatio = plt.axes([0.94, 0.65, 0.01, 0.01])
                        bouttonni9 = buttonn(b2ax_CSFBRatio, '', color=couleur_bouton)
                        bouttonni9.on_clicked(lambda event: csfb2(date, nb_csfb_voix_set, taux_csfb_voix_set, event))

                        # Bouton incoming
                        b2ax = plt.axes([0.25, 0.4, 0.01, 0.01])
                        bouttonni = buttonn(b2ax, '', color=couleur_bouton)
                        bouttonni.on_clicked(
                            lambda event: taux_incoming2(succes_incoming, drop_incoming, failure_incoming, event))
                        # Bouton outgoing
                        b2ax_outgoing = plt.axes([0.41, 0.4, 0.01, 0.01])
                        bouttonni2 = buttonn(b2ax_outgoing, '', color=couleur_bouton)
                        bouttonni2.on_clicked(
                            lambda event: taux_outgoing2(succes_outgoing, drop_outgoing, failure_outgoing, event))
                        # Bouton CAUSE CODE
                        b2ax_cc = plt.axes([0.58, 0.4, 0.01, 0.01])
                        bouttonni10 = buttonn(b2ax_cc, '', color=couleur_bouton)
                        bouttonni10.on_clicked(
                            lambda event: taux_etat_par_date2(succes, drop, caf, one, two, three, four, five, six, seven,
                                                              eight, notconnected, connected, event))
                        # Bouton Parc_Mobile
                        b2ax_mobile = plt.axes([0.75, 0.4, 0.01, 0.01])
                        bouttonni5 = buttonn(b2ax_mobile, '', color=couleur_bouton)
                        bouttonni5.on_clicked(lambda event: parc_mobile_pygal(camemberts_mobile, legende_mobile, event))
                        # Bouton Techno
                        b2ax_techno = plt.axes([0.9, 0.4, 0.01, 0.01])
                        bouttonni4 = buttonn(b2ax_techno, '', color=couleur_bouton)
                        bouttonni4.on_clicked(lambda event: tecno_pygal(deux_g, trois_g, quatre_g, autre_tecno, event))

                        # Bouton Nb_Users
                        b2ax_users = plt.axes([0.48, 0.1, 0.01, 0.01])
                        bouttonni3 = buttonn(b2ax_users, '', color=couleur_bouton)
                        bouttonni3.on_clicked(lambda event: nb_utilisateur_actifs(date, dqaid_par_jour, event))

                        # VoLTE
                        b2ax_volte = plt.axes([0.94, 0.1, 0.01, 0.01])
                        bouttonni11 = buttonn(b2ax_volte, '', color=couleur_bouton)
                        bouttonni11.on_clicked(
                            lambda event: volte_pygal(date, taux_volte_voix_set, nb_volte_voix_set, event))

                        # plt.tight_layout()
                        plt.show()



                        # plt.show()
                        # mpld3.show()
                        # Thread(target=plt.show()).start()
                        # Thread(target=mpld3.show()).start()

                avec_dpt_filter_voix(val1, val2, val3, tech, val5, departement, file)
        #__________________________________---Choix date---________________________________________-------___________________________________
        global value1 # DATE DEPART
        value1 = combo.get()
        #print("value 1:  "+value1)

        global value2 #DATE ARRIVEE
        value2 = combo2.get()

        global val5  # OS
        val5 = combo3.get()

        global departement
        departement =combo4.get()
        #print(value1)
        #print(value2)
        #print(val5)
        #print(departement)

        #print("value 3:  " + value3)
        if val5=='ALL':
            val5=['iOS','Android','Unknown','']
        if val5=='Android':
            val5=['Android']
        if val5=='iOS':
            val5=['iOS']
        if val5=='AUTRES':
            val5=['']
        if val5=='Unknown':
            val5=['Unknown']

        if value1 and value2 and val5 and departement:

            #print("JE SUIS RENTREEEEEEE")
            global csvfile
            #csvfile = ouvrir_fich()
            #csvfile=lefichier.fichier
            # -------------------------------------------------------------------------------DEBUT--------------------------------------------------------------------------------
            #__________________________________--------------************--------------EX FONCTION SELECT-------------------*****************-----------___________________________
            # -------------------------------------------------------------------------------DEBUT--------------------------------------------------------------------------------

            import tkinter as tk
            #try:
                #import Tix as tix  # Python27
            #except ImportError:
                #import tkinter.tix as tix  # Python31+

            # choix1.geometry("+50+150")
            #choix.geometry("500x600+20+50")
            s = ttk.Style()
            global frame2
            techno_=[]
            techno_.append('ALL')
            techno_.append('2G')
            techno_.append('3G')
            techno_.append('4G')
            techno_.append('WIFI')
            techno_.append('INCONNU')

            #choix.mainloop()
            #Label(ttk.Frame, text="SCENARIO                    TECHNO").pack(side='top')
            #SCENARIO
            s.configure('My.TFrame', background='white', label='SFR',Scrollbar=True)
            frame = ttk.Frame(choix, padding=(70, 70, 160, 160), style='My.TFrame')
            frame.grid(column=4, row=15, sticky=(N, S, E, W))


            #Label(choix, text="    SCENARIOS", font=("Helvetica", 15, "bold"), fg='white', bg='black').pack()
            #Label(choix, text="            TECHNO", font=("Helvetica", 15, "bold"), fg='white', bg='black').pack()
            #labelframe.pack(fill="both", expand="yes")

            #TECNO
            frame2 = ttk.Frame(choix, padding=(70, 70, 160, 160), style='My.TFrame')
            frame2.grid(column=5, row=15, sticky=(N, S, E, W))

            #BOUTON RECHERCHE
            frame4 = ttk.Frame(choix, padding=(183, 0, 0, 0), style='My.TFrame')
            frame4.grid(column=4, row=14, sticky=(N, S, E, W))

            #RECHERCHE
            frame3 = ttk.Frame(choix, padding=(70, 10, 0, 0), style='My.TFrame')
            frame3.grid(column=4, row=13, sticky=(N, S, E, W))

            # frame.config(bg='black')

            #s1 = Scrollbar(frame)
            # l1 = Tk.Listbox(f1)

            # choix = Tk()
            # print(str(csvfile))


            # csvfile = ouvrir_fich()
            #csv_opner_result = re.compile(r".*u'(D:.*)'\, .*", re.IGNORECASE)
            #f = csv_opner_result.search(str(csvfile))

            #reader = f.group(1)
            # print(reader)

            #csvfile = open(reader, 'r')
            # print(csvfile)
            #reader = csv.reader(csvfile, delimiter=';')
            #reader = csv.reader(csvfile)

            #date_test = re.compile(r".*([0-9][0-9][0-9][0-9]\-[0-9][0-9]\-[0-9][0-9]) .*", re.IGNORECASE)
            #scenario_test = re.compile(r".*('Scenario Label \[campaign\_label\]').*", re.IGNORECASE)

            b = ''
            z = False
            l = 0
            g = 0
            k = 0
            d = ''
            tec=''
            #scenario = []
            #techno_ = []
            #date = []
            k = []
            # RECUPERATION DATE ET SCENARIO


            scenario=list(scenario)
            #print(scenario)
            #print(len(scenario))
                    # b = str(f.group(1)) #RECUPERATION DE LA DATE
            # scrollbar = Scrollbar(choix)


            date.reverse()
            for item in scenario:
                scenario[scenario.index(item)] = '_'.join(item.split(" "))


            makeitastring = ' '.join(map(str, scenario))
            # print(scenario)
            #print(scenario)
            #print(len(scenario))

            makeitastring = (makeitastring)
            # print(makeitastring)
            # scrollbar2 = Scrollbar(frame, orient=VERTICAL)
            # scrollbar2.grid(column=2, row=2, sticky='EW')

    # _____-************************-__________________________________________________________________________________________________________________________________
            #SELECTION DES SCENARIOS

            #LES SCENARIOS
            global valores
            valores = StringVar()
            valores1 = tuple(scenario)
            valores.set(valores1)
            #print(valores)
            #print(valores1)

            #LA TECNO
            global valores2
            valores2 = StringVar()
            valores3 = tuple(techno_)
            valores2.set(valores3)

            #SCENARIO
            lstbox = Listbox(frame, listvariable=valores, selectmode=MULTIPLE, width=30, height=10, fg='OrangeRed2',bg='white')
            lstbox.grid(column=0, row=3, columnspan=2)
            #vbar = Scrollbar(lstbox, orient=VERTICAL)
            #lstbox.config(yscrollcommand=vbar.set)
            #vbar.config(command=lstbox.yview)

            #lstbox.pack(side=LEFT, fill=BOTH, expand=1)
            #lstbox.grid(column=0, row=3)
            #vbar.grid(column=0, sticky=N+S)
            #scrollbar.config(command=lstbox.yview)
            #scrollbar.pack(side=RIGHT, fill=Y)

            #RECHERCHE
            v = StringVar()
            e = Entry(frame3,textvariable=v)
            e.grid(column=0, row=3)
            #e.grid_bbox(0, 3,0,2)
            e.pack()
            e.focus_set()

            #v.set("a default value")
            lstbox2 = Listbox(frame2, listvariable=valores2, selectmode=MULTIPLE, width=30, height=10, fg='red',bg='white')
            lstbox2.grid(column=0, row=3, columnspan=2)

            #___________________________________________________HEREEEEEE##################################################################**********
            def callback(frame, frame2,scenario,techno_,lstbox):

                text = v.get()
                v.set(text)
                #print(text)
                #frame.destroy()
                #frame2.destroy()

                import tkinter as tk
                #try:
                    #import Tix as tix  # Python27
                #except ImportError:
                    #import tkinter.tix as tix  # Python31+

                # choix1.geometry("+50+150")
                # choix.geometry("500x600+20+50")
                s = ttk.Style()


                # SCENARIO
                s.configure('My.TFrame', background='white', label='SFR')
                frame = ttk.Frame(choix, padding=(70, 70, 160, 160), style='My.TFrame')
                frame.grid(column=4, row=15, sticky=(N, S, E, W))

                # TECNO
                frame2 = ttk.Frame(choix, padding=(70, 70, 160, 160), style='My.TFrame')
                frame2.grid(column=5, row=15, sticky=(N, S, E, W))

                # LES SCENARIOS
                global valores
                valores = StringVar()
                valores1 = tuple(scenario)
                valores.set(valores1)

                # LA TECNO
                global valores2
                valores2 = StringVar()
                valores3 = tuple(techno_)
                valores2.set(valores3)
                #print(text.lower())
                #print(text.upper())
                for elementes in scenario:
                    #if elementes in text or text in elementes or elementes in text.lower() or text.lower() in elementes or elementes in text.upper() or text.upper():
                    if text in elementes or text.lower() in elementes  or text.upper() in elementes:
                        #print(elementes)
                        lstbox.insert(0,elementes)

                # SCENARIO
                lstbox = Listbox(frame, listvariable=valores, selectmode=MULTIPLE, width=30, height=10, fg='green',
                                 bg='white')
                lstbox.grid(column=0, row=3, columnspan=2)
                lstbox2 = Listbox(frame2, listvariable=valores2, selectmode=MULTIPLE, width=30, height=10, fg='red',
                                  bg='white')
                lstbox2.grid(column=0, row=3, columnspan=2)
                lstbox.update()





                #print(v)
            #b = Button(choix, text="get", width=10, command=callback)
            #b.pack()

            btn3 = ttk.Button(frame4, text='Rechercher',command=lambda: callback(frame,frame2,scenario,techno_,lstbox))
            btn3.grid(column=2, row=2)
            #lstbox3 = Listbox(frame3, listvariable=valores, selectmode=MULTIPLE, width=30, height=1, fg='grey',bg='white')
            #lstbox3.grid(column=0, row=3)

            #namelbl = ttk.Label(lstbox, text="SCENARIO")
            #name = ttk.Entry(frame)
            #TECNO


            def choix_techno(value1, value2, value3,val5, csvfile):
                btn8 = ttk.Button(frame2, text='ok',command=lambda: select_with_tech(value1, value2, value3, val5, csvfile))
                btn8.grid(column=0, row=4)

            # lstbox = Listbox(frame, listvariable=valores, selectmode=MULTIPLE, width=20, height=10, yscrollcommand=scrollbar2.set)  # LISTBOX
            # scrollbar2.config(command=mapLBox.yview)
            # lstbox.grid(column=2, row=2, sticky='EW')
            # lstbox.grid(column=0, row=0, columnspan=2)

            # print(makeitastring)
            # print(valores.get())

            """
            def select():
                global reslist
                global seleccion
                reslist = list()
                seleccion = lstbox.curselection()  # PRENDRE EN COMPTE LA SELECTION
                for i in seleccion:
                    entrada = lstbox.get(i)
                    reslist.append(entrada)
                #for val in reslist:
                    #print(val)

                def clear():
                    del reslist[:]
                    lstbox.select_clear(0, END)  # DESELECTIONNER CE QUI A ETE SELECTIONNE

                btn2 = ttk.Button(frame, text='Annuler', command=clear)
                btn2.grid(column=1, row=1)

                return reslist
            """

            def detruire():
                frame.destroy()
                frame2.destroy()
                frame3.destroy()
                frame4.destroy()
                root.destroy()
                choix.geometry("300x345+20+50")

            # btn = ttk.Button(frame, text="Valider", command=exec_voix(event))
            # btn.grid(column=0, row=1)
            # frame.bind('<ButtonRelease-1>', exec_voix)

            #def valider(value1, value2, value3, tech, val5, csvfile):


            def clear2():
                del value3[:]
                lstbox2.select_clear(0, END)  # DESELECTIONNER CE QUI A ETE SELECTIONNE
                #btn3 = ttk.Button(frame, text='ok', command=lambda: select(value1, value2, csvfile))
                btn6 = ttk.Button(frame2, text='Cancel', command=lambda: clear2())
                btn6.grid(column=0, row=4)
                #btn3.grid(column=0, row=1)

            def select_with_tech(value1, value2, value3, val5, csvfile):
                value1=value1
                value2=value2
                csvfile=csvfile
                #print("JE SUIS ICI")

                #lobal tech
                global seleccion2
                tech = list()
                seleccion2 = lstbox2.curselection()  # PRENDRE EN COMPTE LA SELECTION
                for i in seleccion2:
                    entrada2 = lstbox2.get(i)
                    tech.append(entrada2)
                    #for val in value3:
                        #print(val)
                    #print(entrada2)
                #print(tech)
                btn6 = ttk.Button(frame2, text='Cancel', command=lambda: clear2())
                btn6.grid(column=1, row=4)
                btn7 = ttk.Button(frame2, text='Valider',command=lambda: lancer(value1, value2, value3, tech, val5,departement, csvfile))
                btn7.grid(column=0, row=4)





            def select(value1,value2,val5,csvfile):
                value1=value1
                value2=value2
                csvfile=csvfile

                global value3
                global seleccion
                value3 = list()
                seleccion = lstbox.curselection()  # PRENDRE EN COMPTE LA SELECTION
                for i in seleccion:
                    entrada = lstbox.get(i)
                    value3.append(entrada)
                    #for val in value3:
                        #print(val)
                    #print(value3)
                #print(value3)
                if 'all' in value3:
                    value3=scenario

                btn5 = ttk.Button(frame, text='Valider', command=lambda: choix_techno(value1, value2, value3,val5, csvfile))
                btn5.grid(column=0, row=4)
                #btn3 = ttk.Button(frame, text='ok', command=lambda: select(value1, value2, val5, csvfile))
                #btn3.grid(column=0, row=4)


            def select2(value1,value2,val5,csvfile):
                value1=value1
                value2=value2
                csvfile=csvfile

                #global value3
                #global seleccion
                #value3 = list()
                #seleccion = lstbox.curselection()  # PRENDRE EN COMPTE LA SELECTION
                #btn3 = ttk.Button(frame, text='Valider', command=lambda: lancer2(value1, value2,val5, csvfile))
                #btn3.grid(column=1, row=2)

            def clear():

                del value3[:]
                lstbox.select_clear(0, END)  # DESELECTIONNER CE QUI A ETE SELECTIONNE
                btn3 = ttk.Button(frame, text='ok', command=lambda: select(value1,value2,val5,csvfile))
                btn3.grid(column=0, row=4)

            def clear_custom():
                #del value3[:]
                lstbox.select_clear(0, END)  # DESELECTIONNER CE QUI A ETE SELECTIONNE
                btn3 = ttk.Button(frame, text='ok', command=lambda: select(value1, value2, val5, csvfile))
                btn3.grid(column=0, row=4)

            #print(value3)
            #btn3 = ttk.Button(frame, text='Valider', command=lambda : lancer(value1,value2,value3,csvfile))
            btn3 = ttk.Button(frame, text='ok', command=lambda: select(value1,value2,val5,csvfile))
            btn3.grid(column=0, row=4)
            #btn4 = ttk.Button(frame, text='Default', command=lambda: select2(value1, value2,val5, csvfile))
            #btn4.grid(column=1, row=)
            btn2 = ttk.Button(frame, text='Cancel', command=clear_custom)
            btn2.grid(column=1, row=4)
            ttk.Style().configure('green/black.TLabel', relief="flat", foreground='white', background='red')
            btnn = ttk.Button(frame, text=" --> Menu Principal ", command=detruire, style='green/black.TLabel')
            # btnn.configure(bg="red")
            btnn.grid(column=0, row=6, sticky=(N, S, E, W))

            ttk.Style().configure('yellow/black.TLabel', relief="flat", foreground='black', background='white')
            btnn = ttk.Button(frame, text="CHOIX SCENARIO", style='yellow/black.TLabel')
            # btnn.configure(bg="red")
            btnn.grid(column=0, row=0, sticky=(N, S, E, W))

            btnn = ttk.Button(frame2, text="CHOIX TECNO", style='yellow/black.TLabel')
            # btnn.configure(bg="red")
            btnn.grid(column=0, row=0, sticky=(N, S, E, W))


            choix.mainloop()

            #FIN DE SELECTION DES SCENARIOS
    #______-*******************************-________________________________________________________________________________________________________________________________

        #------------------------------------------------------------------------------------FIN------------------------------------------------------------------------------------

        #------------------------------------------------------------------------------------FIN------------------------------------------------------------------------------------


    date = []
    etat = []

    date_cumul = 0

    z = 0
    a = []
    b = 0



    #reader = csv.reader(lefichier.fichier, delimiter=';')
    reader = csv.reader(lefichier.fichier)

    date_test = re.compile(r".*([0-9][0-9][0-9][0-9]\-[0-9][0-9]\-[0-9][0-9]) .*"
                           , re.IGNORECASE)
    scenario_test = re.compile(r".*('Scenario Label \[campaign\_label\]').*"
                           , re.IGNORECASE)

    b = ''
    z = False
    l = 0
    g = 0
    k = 0
    d=''
    scenario=[]
    scenario.append('all')
    os=dict()

    #RECUPERATION OS


    key = "ALL"
    os.setdefault(key, [])

    #os.setdefault(key, [])

    #os['Belkacem'] = 'KAID'
    #RECUPERATION DATE ET SCENARIO
    for row in reader:
        #f = date_test.search(row[1])
        f = row[1][0:10]
        a = row[161]
        o=row[220]
        if f in 'date_utc_agent' or 'date_utc_agent' in f:
            variable = (f)
            # print(int(val1[-2:]) - 2)
            continue

        # RECUPERATION DATE
        #if f and b != str(f.group(1)):

        if b != f and f not in date:

            #date.append(f.group(1))
            date.append(f)
            b=f
            #b = str(f.group(1))

        # RECUPERATION SCENARIOS
        k = scenario_test.search(row[221])
        d = row[221]
        if d=='campaign_label':
            continue
        if d not in scenario:
            scenario.append(str(d))

        #RECUPERATION OS
        if o:
            if o not in os:
                os[key].append(o)
                os[o]=o
                #os['Belkacem'].append(o)
    android_ios='Android & ios'
    os[android_ios]=['Android','iOS']
    for k in os.keys():
        try:
            if len(os[k]) < 1:
                del os[k]
        except:
            pass


    date.reverse()
    #print(scenario)
    #print(date)
    #sorted(os, key=operator.itemgetter("ALL"))


    def defocus(event):
        event.widget.master.focus_set()

    #try:
        #import Tix as tix  # Python27
    #except ImportError:
        #import tkinter.tix as tix  # Python31+

    """
    def selected(event):
        global value1
        value1 = combo.entry.get()
        print(value1)

    def selected2(event):
        global value2
        value2 = combo2.entry.get()
        print(value2)
    """

    #import Tkinter as Tk
    root = Tk()
    root.attributes('-alpha', 0.8)
    # choix1 = Tk()
    # choix1.title("Multiple Choice Listbox")
    # choix1 = tix.Tk()
    root.config(bg='white')

    # use width x height + x_offset + y_offset (no spaces!)
    Label(root, text="SFR", font=("Helvetica", 20, "bold"), fg='red', bg='white').pack()
    Label(root, text="                  SELECTION OS                   ", font=("Helvetica", 10, "bold"), fg='black',bg='white').pack()
    Label(root,text="   DATE DEBUT                                                                                                     DATE FIN           ",font=("Helvetica", 10, "bold"), fg='black', bg='white').pack()
    root.geometry("%dx%d+%d+%d" % (640, 200, 738, 150))
    root.title("Interval")

    # COMBO 1_______________________
    combo = ttk.Combobox(root,values=date)
    #combo.config(bg='white')
    #Label(combo, text="start", font=("Helvetica", 10, "bold"), fg='red', bg='black').pack(side='left')
    combo.pack(side='left', padx=10, pady=10)
    #date=date.reverse()
    #for item in date:
        #combo.slistbox.listbox.insert('end', item)

    # COMBO 2________________________
    combo2 = ttk.Combobox(root, values=date)
    #Label(combo2, text="end", font=("Helvetica", 10, "bold"), fg='red', bg='black').pack(side='right')
    combo2.pack(side='right', padx=10, pady=10)
    #date = date.reverse()
    #for item2 in date:
        #combo2.slistbox.listbox.insert('end', item2)
    # left mouse click on a list item to display selection

    os_remaked = ['ALL', 'Android & ios', 'Android', 'iOS', 'Unknown']
    # COMBO 3________________________
    #print(os)
    combo3 = ttk.Combobox(root, values=os_remaked)
    #Label(combo3, text="OS", font=("Helvetica", 10, "bold"), fg='red', bg='black').pack(side='top')
    combo3.pack(side='top', padx=10, pady=10)
    # date = date.reverse()
    #for item3 in os:
        #combo3.slistbox.listbox.insert('end', item3)
        # left mouse click on a list item to display selection
    Label(root, text="                    DEPARTEMENT                   ", font=("Helvetica", 10, "bold"), fg='black',bg='white').pack()
    departement_list = ['TOUT DPTs', 'Ain', 'Aisne', 'Allier', 'Alpes_de_Haute-Provence', 'Hautes-Alpes',
                        'Alpes-Maritimes', 'Ardeche', 'Ardennes', 'Ariege', 'Aube', 'Aude', 'Aveyron',
                        'Bouches_du_Rhone', 'Calvados', 'Cantal', 'Charente', 'Charente_Maritime', 'Cher',
                        'Correze', 'Cote_dOr', 'Cotes_dArmor', 'Creuse', 'Dordogne', 'Doubs', 'Drome', 'Eure',
                        'Eure-et-Loir', 'Finistere', 'Gard', 'Haute-Garonne', 'Gers', 'Gironde', 'Herault',
                        'Ille-et-Vilaine', 'Indre', 'Indre-et-Loire', 'Isere', 'Jura', 'Landes', 'Loir-et-Cher',
                        'Loire', 'Haute-Loire', 'Loire-Atlantique', 'Loiret', 'Lot', 'Lot-et-Garonne', 'Lozere',
                        'Maine-et-Loire', 'Manche', 'Marne', 'Haute-Marne', 'Mayenne', 'Meurthe-et-Moselle',
                        'Meuse', 'Morbihan', 'Moselle', 'Nievre', 'Nord', 'Oise', 'Orne', 'Pas-de-Calais',
                        'Puy-de-Dome', 'Pyrenees-Atlantiques', 'Hautes-Pyrenees', 'Pyrenees-Orientales', 'Bas-Rhin',
                        'Haut-Rhin', 'Rhone', 'Haute-Saone', 'Saone-et-Loire', 'Sarthe', 'Savoie', 'Haute-Savoie',
                        'Paris', 'Seine-Maritime', 'Seine-et-Marne', 'Yvelines', 'Deux-Sevres', 'Somme', 'Tarn',
                        'Tarn-et-Garonne', 'Var', 'Vaucluse', 'Vendee', 'Vienne', 'Haute-Vienne', 'Vosges', 'Yonne',
                        'Territoire-de-Belfort', 'Essonne', 'Hauts-de-Seine', 'Seine-St-Denis', 'Val-de-Marne',
                        'Val-dOise', 'Corse_du_Sud', 'Haute-Corse']
    # COMBO 4________________________
    # print(os)
    combo4 = ttk.Combobox(root, values=departement_list)
    # Label(combo3, text="OS", font=("Helvetica", 10, "bold"), fg='red', bg='black').pack(side='top')
    combo4.pack(side='bottom', padx=10, pady=10)


    #for item4 in departement_list:
        #combo4.slistbox.listbox.insert('end', item4)

    combo.bind('<<ComboboxSelected>>', lambda event: exec_voix(event,scenario))
    combo2.bind('<<ComboboxSelected>>', lambda event: exec_voix(event,scenario))
    combo3.bind('<<ComboboxSelected>>', lambda event: exec_voix(event,scenario))
    combo4.bind('<<ComboboxSelected>>', lambda event: exec_voix(event, scenario))
    #choix_scenario(csvfile)



    root.mainloop()



    """
    fenetre = Tk()
    fenetre.geometry("300x345+20+50")
    fenetre.title("FENETRE DE CHOIX")
    fenetre.config(bg='black')
    fenetre.geometry()

    Label(fenetre, text="").pack()
    Label(fenetre, text="").pack()
    Label(fenetre, text="SFR", font=("Helvetica", 20, "bold"), fg='red', bg='black').pack()
    Label(fenetre, text="").pack()
    b5 = Button(fenetre, text="     VOIX   ", width=15, height=1, relief=GROOVE, command=voix, fg='white',
                bg='red').pack()
    b6 = Button(fenetre, text="       QUITTER         ", width=15, height=1, relief=GROOVE, command=quitter_prog,
                fg='white', bg='red').pack()
    Label(choix, text="").pack()
    label = Label(fenetre, text="SFR PERF", fg='white', bg='black').pack()
    Label(fenetre, text="").pack()
    # photo = open(file="logo-3.jpg")
    # Label= Label(fenetre,image="logo-3.jpg").pack() # keep a reference!
    choix.mainloop()
    """

#FONCTION DE CALCULES DES TAUX DE KPIS DATA ET DE GENERATION DE TABLEAU DE BORD
def dashboard_data():

    choix.geometry("700x360+20+50")


    plt.suptitle('DASHBOARD KPI DATA',fontsize=18,bbox={'facecolor': 'white', 'pad': 5})

    class lefichier():
        global csvfile
        csvfile = ouvrir_fich()
        fichier=csvfile
        #print(a) #OUVERTURE FICHIER UNE SEULE FOIS
    #print(str(lefichier.fichier))
    # ___________________________**********************DEBUT********************************____________________________#
    # ------------------------------------------------------------------------------------------------------------------#

    # ------------------------------------------------------------------------------------------------------------------#
    # ___________________________**********************FIN********************************____________________________#



    def exec_voix(scenario,event):
        #print(lefichier.fichier)


        def lancer(val1,val2,val3,tech, val5,departement,file):
            #print(tech)
            tout=['2G','EDGE','GPRS','3G','UMTS','Dual Carrier','HSUPA','HSPA','HSPA+','HSDPA','4G','LTE','LTE-A','WIFI','N/A','UNKNOWN','GSM (2G-3G-4G)']
            LA2G=['2G','EDGE','GPRS']
            LA3G=['3G','UMTS','Dual Carrier','HSUPA','HSPA','HSPA+','HSDPA']
            LA4G=['4G','LTE','LTE-A']
            LAWIFI=['WIFI']
            LINCONNU=['N/A','UNKNOWN']


            if '2G' in tech:
                for elem2 in LA2G:
                    tech.append(elem2)
            if '3G' in tech:
                for elem3 in LA3G:
                    tech.append(elem3)
            if '4G' in tech:
                for elem4 in LA4G:
                    tech.append(elem4)
            if 'WIFI' in tech:
                for elem5 in LAWIFI:
                    tech.append(elem5)
            if 'INCONNU' in tech:
                for elem6 in LINCONNU:
                    tech.append(elem6)
            if 'ALL' in tech:
                for elem in tout:
                    tech.append(elem)

            #print('JE T AFFICHE TECH')
            #print(tech)
            #'TOUT DPTs'
            print("________________PLEASE WAIT____________________")
            if departement in'TOUT DPTs':
                def sans_dpt_filtre(val1, val2, val3, tech, val5, departement, file):
                    if val1 and val2:
                        plt.suptitle('DASHBOARD KPI DATA TOUT DEPARTEMENTS', fontsize=18, bbox={'facecolor': 'white', 'pad': 5})
                        plt.figure(1).patch.set_facecolor('white')
                        figure_data, axes = plt.subplots(figsize=(40, 40))
                        #import datetime as dt
                        csv_opner_result = re.compile(r".*'(.*:.*)'\, .*", re.IGNORECASE)
                        csv_opner_result_general = re.compile(r".*'(.*:.*\/).*\.csv'\, .*", re.IGNORECASE)
                        f = csv_opner_result.search(str(file))
                        f2 = csv_opner_result_general.search(str(file))

                        # fichier = open(f.group(1), 'r')
                        # print(f.group(1))
                        # reader = csv.reader(fichier, delimiter=';')
                        reader = f.group(1)
                        reader2 = f2.group(1)

                        # READER 1 CONCERNE LE FICHIER HTTP
                        # READER2 CONCERNE LE FICHIER GENERALISTE POUR WEB ET COMPANIE

                        # WEB FILE
                        reader_web = reader2 + "WEB.csv"

                        # VIDEO FILE
                        reader_video = reader2 + "VIDEO.csv"

                        # USAGE FILE
                        reader_usage = reader2 + "APPLICATION.csv"





                        def taille_csv(fichier):
                            csvfile = open(fichier, 'r')
                            # print(csvfile)
                            reader = csv.reader(csvfile)
                            k = 0.0
                            for row in reader:
                                k = k + 1
                            return k

                        def taille_csv2(fichier):
                            csvfile = open(fichier, 'r')
                            # print(csvfile)
                            reader = csv.reader(csvfile)
                            k = 0.0
                            for row in reader:
                                k = k + 1
                            return k

                        # HTTP
                        def success_ratio2(fichier, val1, val2, val3, val4, val5, tech):
                            #import datetime
                            print("\n JE SUIS DANS HTTP \n")
                            import datetime
                            format_date_generale = "%Y-%m-%d"
                            date_debut = datetime.datetime.strptime(val1, format_date_generale)
                            date_fin = datetime.datetime.strptime(val2, format_date_generale)

                            global succes
                            global success_taux_var
                            global success_set
                            global success_taux

                            global failure
                            global failure_taux_var
                            global failure_set
                            global failure_taux

                            global drop
                            global drop_taux_var
                            global drop_set
                            global drop_taux

                            global nombre_latence
                            global lat
                            global latency

                            global deb_upload_http
                            global nombre_debit_upload
                            global debit_set_upload
                            global nombre_p_jour_upload

                            global deb_download_http
                            global nombre_debit_download
                            global debit_set_download
                            global nombre_p_jour_download

                            # global fichier

                            global nb
                            global nb_set
                            global date_http
                            date_http = []

                            date = []

                            succes = 0.0
                            success_taux_var = 0.0
                            success_set = []
                            success_taux = []

                            failure = 0.0
                            failure_taux_var = 0.0
                            failure_set = []
                            failure_taux = []

                            drop = 0.0
                            drop_taux_var = 0.0
                            drop_set = []
                            drop_taux = []

                            nombre_latence = 0.0
                            lat = 0.0
                            latency = []

                            deb_upload_http = 0.0
                            nombre_debit_upload = 0.0
                            debit_set_upload = []
                            nombre_p_jour_upload = []

                            deb_download_http = 0.0
                            nombre_debit_download = 0.0
                            debit_set_download = []
                            nombre_p_jour_download = []

                            drop_taux = []
                            fichier = fichier

                            nb = 0.0
                            nb_set = []
                            date_http = []
                            csvfile = open(fichier, 'r')
                            # print(csvfile)
                            reader = csv.reader(csvfile)

                            b = ''
                            var_ajout = 0.0
                            row_check = 0.0
                            for row in reader:
                                row_check = row_check + 1
                                # print(row_check)
                                f = row[1][0:10]
                                latence = row[175]
                                tecc = row[235]
                                debit = row[171]
                                ci_http = row[42]
                                lac_http = row[43]
                                if f == 'date_utc_a':
                                    continue
                                datef = datetime.datetime.strptime(f, "%Y-%m-%d")
                                if datef > date_fin:
                                    continue

                                if datef < date_debut:
                                    if nombre_debit_download == 0.0:
                                        deb_download_http = 0.0
                                        nombre_debit_download = 0.0
                                        debit_set_download.append(deb_download_http)
                                        nombre_p_jour_download.append(nombre_debit_download)
                                    else:
                                        deb_download_http = deb_download_http / (nombre_debit_download * 1000)
                                        debit_set_download.append(deb_download_http)
                                        nombre_p_jour_download.append(nombre_debit_download)
                                        deb_download_http = 0.0
                                        nombre_debit_download = 0.0
                                    if nombre_debit_upload == 0.0:
                                        deb_upload_http = 0.0
                                        nombre_debit_upload = 0.0
                                        debit_set_upload.append(deb_upload_http)
                                        nombre_p_jour_upload.append(nombre_debit_upload)
                                    else:
                                        deb_upload_http = deb_upload_http / (nombre_debit_upload * 1000)
                                        debit_set_upload.append(deb_upload_http)
                                        nombre_p_jour_upload.append(nombre_debit_upload)
                                        deb_upload_http = 0.0
                                        nombre_debit_upload = 0.0
                                    if nombre_latence == 0:
                                        lat = 0.0
                                        nombre_latence = 0.0
                                        latency.append(lat)
                                    else:
                                        lat = lat / nombre_latence
                                        latency.append(lat)
                                        lat = 0.0
                                        nombre_latence = 0.0
                                    if nb > 0.0:
                                        success_taux_var = float(succes * 100 / nb)
                                        success_taux.append(success_taux_var)
                                        success_set.append(succes)
                                        failure_taux_var = float(failure * 100 / nb)
                                        failure_taux.append(failure_taux_var)
                                        failure_set.append(failure)
                                        drop_taux_var = float(drop * 100 / nb)
                                        drop_taux.append(drop_taux_var)
                                        drop_set.append(drop)
                                        nb_set.append(nb)

                                        succes = 0.0
                                        success_taux_var = 0.0
                                        failure = 0.0
                                        failure_taux_var = 0.0
                                        drop = 0.0
                                        drop_taux_var = 0.0

                                        nb = 0
                                        var_ajout = var_ajout + 1
                                    else:
                                        success_taux.append(0.0)
                                        success_set.append(0.0)
                                        failure_taux.append(0.0)
                                        failure_set.append(0.0)
                                        drop_taux.append(0.0)
                                        drop_set.append(0.0)
                                        nb_set.append(0.0)
                                        succes = 0.0
                                        success_taux_var = 0.0
                                        failure = 0.0
                                        failure_taux_var = 0.0
                                        drop = 0.0
                                        drop_taux_var = 0.0

                                        nb = 0
                                        var_ajout = var_ajout + 1
                                    break
                                """
                                                   if row_check==val4:
                                                       if nombre_debit_download == 0.0:
                                                           deb_download_http = 0.0
                                                           nombre_debit_download = 0.0
                                                           debit_set_download.append(deb_download_http)
                                                           nombre_p_jour_download.append(nombre_debit_download)
                                                       else:
                                                           deb_download_http = deb_download_http / (nombre_debit_download * 1000)
                                                           debit_set_download.append(deb_download_http)
                                                           nombre_p_jour_download.append(nombre_debit_download)
                                                           deb_download_http = 0.0
                                                           nombre_debit_download = 0.0
                                                       if nombre_debit_upload == 0.0:
                                                           deb_upload_http = 0.0
                                                           nombre_debit_upload = 0.0
                                                           debit_set_upload.append(deb_upload_http)
                                                           nombre_p_jour_upload.append(nombre_debit_upload)
                                                       else:
                                                           deb_upload_http = deb_upload_http / (nombre_debit_upload * 1000)
                                                           debit_set_upload.append(deb_upload_http)
                                                           nombre_p_jour_upload.append(nombre_debit_upload)
                                                           deb_upload_http = 0.0
                                                           nombre_debit_upload = 0.0
                                                       if nombre_latence == 0:
                                                           lat = 0.0
                                                           nombre_latence = 0.0
                                                           latency.append(lat)
                                                       else:
                                                           lat = lat / nombre_latence
                                                           latency.append(lat)
                                                           lat = 0.0
                                                           nombre_latence = 0.0
                                                       if nb > 0.0:
                                                           success_taux_var = float(succes * 100 / nb)
                                                           success_taux.append(success_taux_var)
                                                           success_set.append(succes)
                                                           failure_taux_var = float(failure * 100 / nb)
                                                           failure_taux.append(failure_taux_var)
                                                           failure_set.append(failure)
                                                           drop_taux_var = float(drop * 100 / nb)
                                                           drop_taux.append(drop_taux_var)
                                                           drop_set.append(drop)
                                                           nb_set.append(nb)

                                                           succes = 0.0
                                                           success_taux_var = 0.0
                                                           failure = 0.0
                                                           failure_taux_var = 0.0
                                                           drop = 0.0
                                                           drop_taux_var = 0.0

                                                           nb = 0
                                                           var_ajout = var_ajout + 1
                                                       else:
                                                           success_taux.append(0.0)
                                                           success_set.append(0.0)
                                                           failure_taux.append(0.0)
                                                           failure_set.append(0.0)
                                                           drop_taux.append(0.0)
                                                           drop_set.append(0.0)
                                                           nb_set.append(0.0)
                                                           succes = 0.0
                                                           success_taux_var = 0.0
                                                           failure = 0.0
                                                           failure_taux_var = 0.0
                                                           drop = 0.0
                                                           drop_taux_var = 0.0

                                                           nb = 0
                                                           var_ajout = var_ajout + 1
                                                       break
                                                   """

                                row[241] = '_'.join(row[241].split(" "))

                                # print("HELLO")

                                if str(row[233]) == 'SFR' and str(row[241]) in val3 and row[240] in val5 and tecc in tech:
                                    variable = val2

                                    if b != str(f):

                                        # Graphes independants

                                        date_http.append(str(f))
                                        b = str(f)
                                        # a chaque nouvelle date je met le nombre de succes a 0 ainsi que le nombre total succes et autres inclus
                                        if var_ajout > 0:
                                            if nombre_debit_download == 0.0:
                                                deb_download_http = 0.0
                                                nombre_debit_download = 0.0
                                                debit_set_download.append(deb_download_http)
                                                nombre_p_jour_download.append(nombre_debit_download)
                                            else:
                                                deb_download_http = deb_download_http / (nombre_debit_download * 1000)
                                                debit_set_download.append(deb_download_http)
                                                nombre_p_jour_download.append(nombre_debit_download)
                                                deb_download_http = 0.0
                                                nombre_debit_download = 0.0
                                            if nombre_debit_upload == 0.0:
                                                deb_upload_http = 0.0
                                                nombre_debit_upload = 0.0
                                                debit_set_upload.append(deb_upload_http)
                                                nombre_p_jour_upload.append(nombre_debit_upload)
                                            else:
                                                deb_upload_http = deb_upload_http / (nombre_debit_upload * 1000)
                                                debit_set_upload.append(deb_upload_http)
                                                nombre_p_jour_upload.append(nombre_debit_upload)
                                                deb_upload_http = 0.0
                                                nombre_debit_upload = 0.0
                                            if nombre_latence == 0:
                                                lat = 0.0
                                                nombre_latence = 0.0
                                                latency.append(lat)
                                            else:
                                                lat = lat / nombre_latence
                                                latency.append(lat)
                                                lat = 0.0
                                                nombre_latence = 0.0
                                            if nb > 0.0:
                                                success_taux_var = float(succes * 100 / nb)
                                                success_taux.append(success_taux_var)
                                                success_set.append(succes)
                                                failure_taux_var = float(failure * 100 / nb)
                                                failure_taux.append(failure_taux_var)
                                                failure_set.append(failure)
                                                drop_taux_var = float(drop * 100 / nb)
                                                drop_taux.append(drop_taux_var)
                                                drop_set.append(drop)
                                                nb_set.append(nb)

                                                succes = 0.0
                                                success_taux_var = 0.0
                                                failure = 0.0
                                                failure_taux_var = 0.0
                                                drop = 0.0
                                                drop_taux_var = 0.0

                                                nb = 0
                                                var_ajout = var_ajout + 1
                                            else:
                                                success_taux.append(0.0)
                                                success_set.append(0.0)
                                                failure_taux.append(0.0)
                                                failure_set.append(0.0)
                                                drop_taux.append(0.0)
                                                drop_set.append(0.0)
                                                nb_set.append(0.0)
                                                succes = 0.0
                                                success_taux_var = 0.0
                                                failure = 0.0
                                                failure_taux_var = 0.0
                                                drop = 0.0
                                                drop_taux_var = 0.0

                                                nb = 0
                                                var_ajout = var_ajout + 1

                                            var_ajout = var_ajout + 1

                                        # DEBIT DOWNLOAD
                                        if debit != 'NULL' and row[200] != 'NULL' and float(row[200]) >= 512 and row[
                                            238] == 'Success' and row[239] == 'Download':
                                            nombre_debit_download = nombre_debit_download + 1
                                            deb_download_http = deb_download_http + float(debit)
                                        # DEBIT UPLOAD
                                        if debit != 'NULL' and row[200] != 'NULL' and float(row[200]) >= 512 and row[
                                            238] == 'Success' and row[239] == 'Upload':
                                            nombre_debit_upload = nombre_debit_upload + 1
                                            deb_upload_http = deb_upload_http + float(debit)

                                        # LATENCE
                                        if latence != 'NULL' and row[200] != 'NULL' and float(row[200]) >= 512:
                                            nombre_latence = nombre_latence + 1
                                            lat = lat + float(latence)

                                        # ETATS
                                        if str(row[238]) == 'Success' or str(row[238]) == 'Canceled':
                                            succes = succes + 1
                                            nb = nb + 1
                                            var_ajout = var_ajout + 1
                                            continue
                                        if str(row[238]) == 'Failure' or str(row[238]) == 'Timeout':
                                            failure = failure + 1
                                            nb = nb + 1
                                            var_ajout = var_ajout + 1
                                            continue
                                        if str(row[238]) == 'Drop':
                                            drop = drop + 1
                                            nb = nb + 1
                                            var_ajout = var_ajout + 1
                                            continue
                                        else:
                                            if row[238] != 'N/A':
                                                nb = nb + 1
                                                var_ajout = var_ajout + 1



                                    else:
                                        var_ajout = var_ajout + 1

                                        # DEBIT DOWNLOAD
                                        if debit != 'NULL' and row[200] != 'NULL' and float(row[200]) >= 512 and row[
                                            238] == 'Success' and row[239] == 'Download':
                                            nombre_debit_download = nombre_debit_download + 1
                                            deb_download_http = deb_download_http + float(debit)
                                        # DEBIT UPLOAD
                                        if debit != 'NULL' and row[200] != 'NULL' and float(row[200]) >= 512 and row[
                                            238] == 'Success' and row[239] == 'Upload':
                                            nombre_debit_upload = nombre_debit_upload + 1
                                            deb_upload_http = deb_upload_http + float(debit)

                                        # LATENCE
                                        if latence != 'NULL' and row[200] != 'NULL' and float(row[200]) >= 512:
                                            nombre_latence = nombre_latence + 1
                                            lat = lat + float(latence)

                                        # ETATS
                                        if str(row[238]) == 'Success' or str(row[238]) == 'Canceled':
                                            succes = succes + 1
                                            nb = nb + 1
                                            var_ajout = var_ajout + 1
                                            continue
                                        if str(row[238]) == 'Failure' or str(row[238]) == 'Timeout':
                                            failure = failure + 1
                                            nb = nb + 1
                                            var_ajout = var_ajout + 1
                                            continue
                                        if str(row[238]) == 'Drop':
                                            drop = drop + 1
                                            nb = nb + 1
                                            var_ajout = var_ajout + 1
                                            continue
                                        else:
                                            if row[238] != 'N/A':
                                                nb = nb + 1
                                                var_ajout = var_ajout + 1

                                    var_ajout = var_ajout + 1

                            if datef >= date_debut:
                                if nombre_debit_download == 0.0:
                                    deb_download_http = 0.0
                                    nombre_debit_download = 0.0
                                    debit_set_download.append(deb_download_http)
                                    nombre_p_jour_download.append(nombre_debit_download)
                                else:
                                    deb_download_http = deb_download_http / (nombre_debit_download * 1000)
                                    debit_set_download.append(deb_download_http)
                                    nombre_p_jour_download.append(nombre_debit_download)
                                    deb_download_http = 0.0
                                    nombre_debit_download = 0.0
                                if nombre_debit_upload == 0.0:
                                    deb_upload_http = 0.0
                                    nombre_debit_upload = 0.0
                                    debit_set_upload.append(deb_upload_http)
                                    nombre_p_jour_upload.append(nombre_debit_upload)
                                else:
                                    deb_upload_http = deb_upload_http / (nombre_debit_upload * 1000)
                                    debit_set_upload.append(deb_upload_http)
                                    nombre_p_jour_upload.append(nombre_debit_upload)
                                    deb_upload_http = 0.0
                                    nombre_debit_upload = 0.0
                                if nombre_latence == 0:
                                    lat = 0.0
                                    nombre_latence = 0.0
                                    latency.append(lat)
                                else:
                                    lat = lat / nombre_latence
                                    latency.append(lat)
                                    lat = 0.0
                                    nombre_latence = 0.0
                                if nb > 0.0:
                                    success_taux_var = float(succes * 100 / nb)
                                    success_taux.append(success_taux_var)
                                    success_set.append(succes)
                                    failure_taux_var = float(failure * 100 / nb)
                                    failure_taux.append(failure_taux_var)
                                    failure_set.append(failure)
                                    drop_taux_var = float(drop * 100 / nb)
                                    drop_taux.append(drop_taux_var)
                                    drop_set.append(drop)
                                    nb_set.append(nb)

                                    succes = 0.0
                                    success_taux_var = 0.0
                                    failure = 0.0
                                    failure_taux_var = 0.0
                                    drop = 0.0
                                    drop_taux_var = 0.0

                                    nb = 0
                                    var_ajout = var_ajout + 1
                                else:
                                    success_taux.append(0.0)
                                    success_set.append(0.0)
                                    failure_taux.append(0.0)
                                    failure_set.append(0.0)
                                    drop_taux.append(0.0)
                                    drop_set.append(0.0)
                                    nb_set.append(0.0)
                                    succes = 0.0
                                    success_taux_var = 0.0
                                    failure = 0.0
                                    failure_taux_var = 0.0
                                    drop = 0.0
                                    drop_taux_var = 0.0

                                    nb = 0
                                    var_ajout = var_ajout + 1

                            date_http.reverse()
                            success_set.reverse()
                            success_taux.reverse()
                            failure_set.reverse()
                            failure_taux.reverse()
                            drop_set.reverse()
                            drop_taux.reverse()
                            # nb_set.reverse()
                            latency.reverse()
                            debit_set_download.reverse()
                            nombre_p_jour_download.reverse()
                            debit_set_upload.reverse()
                            nombre_p_jour_upload.reverse()
                            date = date_http

                            if len(date) > 0:

                                # ________________________________________________--___**_ SUCCESS _**___--___________________________________________________
                                # _____________________***PARAMS***________________________________________

                                ax1 = plt.subplot2grid((22, 9), (0, 0), colspan=4)
                                plt.xticks(rotation='vertical', fontsize=8)
                                plt.title('SUCCESS RATIO HTTP ' + date[0] + ' au ' + date[len(date) - 1])
                                params = {'legend.fontsize': 10,
                                          'legend.linewidth': 0, }
                                plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d'))
                                plt.gca().xaxis.set_major_locator(mdates.DayLocator())

                                # _____________________***AXE 1***________________________________________


                                x = [datetime.datetime.strptime(d, '%Y-%m-%d').date() for d in date]
                                y = success_set
                                ax1.bar(x, y, color='seagreen', zorder=1)
                                ax1.set_ylabel('Nb succs', color='seagreen')
                                for tl in ax1.get_yticklabels():
                                    tl.set_color('seagreen')

                                    # _____________________***AXE 2***________________________________________

                                ax2 = ax1.twinx()
                                x = [datetime.datetime.strptime(d, '%Y-%m-%d').date() for d in date]
                                y = success_taux
                                ax2.plot(x, y, color='red', zorder=2)
                                plt.legend(loc='best')
                                ax2.set_xlabel('Jour')
                                ax2.set_ylabel('Taux de de succes HTTP', color='red')
                                ax2.grid(True)
                                ax2.xaxis_date()
                                for t2 in ax2.get_yticklabels():
                                    t2.set_color('red')

                                    # ________________________________________________--___**_ FAILURE _**___--___________________________________________________
                                # _____________________***PARAMS***________________________________________

                                ax1 = plt.subplot2grid((22, 9), (0, 5), colspan=4)
                                plt.xticks(rotation='vertical', fontsize=8)
                                plt.title('FAILURE RATIO HTTP ' + date[0] + ' au ' + date[len(date) - 1])
                                params = {'legend.fontsize': 10,
                                          'legend.linewidth': 0, }
                                plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d'))
                                plt.gca().xaxis.set_major_locator(mdates.DayLocator())

                                # _____________________***AXE 1***________________________________________


                                x = [datetime.datetime.strptime(d, '%Y-%m-%d').date() for d in date]
                                y = failure_set
                                ax1.bar(x, y, color='red', zorder=1)
                                ax1.set_ylabel('Nb echc', color='red')
                                for tl in ax1.get_yticklabels():
                                    tl.set_color('red')

                                    # _____________________***AXE 2***________________________________________

                                ax2 = ax1.twinx()
                                x = [datetime.datetime.strptime(d, '%Y-%m-%d').date() for d in date]
                                y = failure_taux
                                ax2.plot(x, y, color='green', zorder=2)
                                plt.legend(loc='best')
                                ax2.set_xlabel('Jour')
                                ax2.set_ylabel('Taux de de echc HTTP', color='green')
                                ax2.grid(True)
                                ax2.xaxis_date()
                                for t2 in ax2.get_yticklabels():
                                    t2.set_color('green')

                                # ________________________________________________--___**_ DROP _**___--___________________________________________________
                                # _____________________***PARAMS***________________________________________

                                ax1 = plt.subplot2grid((22, 9), (2, 0), colspan=4)
                                plt.xticks(rotation='vertical', fontsize=8)
                                plt.title('DROP RATIO HTTP ' + date[0] + ' au ' + date[len(date) - 1])
                                params = {'legend.fontsize': 10,
                                          'legend.linewidth': 0, }
                                plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d'))
                                plt.gca().xaxis.set_major_locator(mdates.DayLocator())

                                # _____________________***AXE 1***________________________________________


                                x = [datetime.datetime.strptime(d, '%Y-%m-%d').date() for d in date]
                                y = drop_set
                                ax1.bar(x, y, color='orangered', zorder=1)
                                ax1.set_ylabel('Nb coup', color='orangered')
                                for tl in ax1.get_yticklabels():
                                    tl.set_color('orangered')

                                    # _____________________***AXE 2***________________________________________

                                ax2 = ax1.twinx()
                                x = [datetime.datetime.strptime(d, '%Y-%m-%d').date() for d in date]
                                y = drop_taux
                                ax2.plot(x, y, color='darkblue', zorder=2)
                                plt.legend(loc='best')
                                ax2.set_xlabel('Jour')
                                ax2.set_ylabel('Taux de de coup HTTP', color='darkblue')
                                ax2.grid(True)
                                ax2.xaxis_date()
                                for t2 in ax2.get_yticklabels():
                                    t2.set_color('darkblue')


                                    # ________________________________________________--___**_ LATENCES _**___--___________________________________________________
                                ax1 = plt.subplot2grid((22, 9), (2, 5), colspan=4)
                                x = [datetime.datetime.strptime(d, '%Y-%m-%d').date() for d in date]
                                y = latency
                                plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d'))
                                plt.gca().xaxis.set_major_locator(mdates.DayLocator())
                                plt.bar(x, y, color='dodgerblue')
                                plt.xticks(rotation='vertical', fontsize=8)
                                plt.xlabel('Jour')
                                ax1.set_ylabel('Moyenne LATENCE (ms)', color='dodgerblue')
                                for tl in ax1.get_yticklabels():
                                    tl.set_color('dodgerblue')
                                plt.grid(True)
                                plt.title('LATENCES HTTP (ms)')
                                # ________________________________________________--___**_ FIN_LATENCES _**___--___________________________________________________



                                # ________________________________________________--___**_ DEBIT download HTTP _**___--___________________________________________________
                                # _____________________***PARAMS***________________________________________

                                ax1 = plt.subplot2grid((22, 9), (4, 0), colspan=4)
                                plt.xticks(rotation='vertical', fontsize=8)
                                plt.title(
                                    'DEBITS Moyens DOWNLOAD HTTP (Mbit/s) ' + date[0] + ' au ' + date[len(date) - 1])
                                params = {'legend.fontsize': 10,
                                          'legend.linewidth': 0, }
                                plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d'))
                                plt.gca().xaxis.set_major_locator(mdates.DayLocator())

                                # _____________________***AXE 1***________________________________________


                                x = [datetime.datetime.strptime(d, '%Y-%m-%d').date() for d in date]
                                y = nombre_p_jour_download
                                ax1.bar(x, y, color='indigo', zorder=1)
                                ax1.set_ylabel('Nb tests DL', color='indigo')
                                for tl in ax1.get_yticklabels():
                                    tl.set_color('indigo')

                                # _____________________***AXE 2***________________________________________

                                ax2 = ax1.twinx()
                                x = [datetime.datetime.strptime(d, '%Y-%m-%d').date() for d in date]
                                y = debit_set_download
                                ax2.plot(x, y, color='crimson', zorder=2)
                                plt.legend(loc='best')
                                ax2.set_xlabel('Jour')
                                ax2.set_ylabel('Moy debit DL (Mb/s)', color='crimson')
                                ax2.grid(True)
                                ax2.xaxis_date()
                                for t2 in ax2.get_yticklabels():
                                    t2.set_color('crimson')

                                    # ________________________________________________--___**_ FIN DEBIT download HTTP _**___--___________________________________________________



                                    # ________________________________________________--___**_ DEBIT UPLOAD HTTP _**___--___________________________________________________
                                # _____________________***PARAMS***________________________________________

                                ax1 = plt.subplot2grid((22, 9), (4, 5), colspan=4)
                                plt.xticks(rotation='vertical', fontsize=8)
                                plt.title('DEBITS Moyens UPLOAD HTTP (Mb/s) ' + date[0] + ' au ' + date[len(date) - 1])
                                params = {'legend.fontsize': 10,
                                          'legend.linewidth': 0, }
                                plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d'))
                                plt.gca().xaxis.set_major_locator(mdates.DayLocator())

                                # _____________________***AXE 1***________________________________________


                                x = [datetime.datetime.strptime(d, '%Y-%m-%d').date() for d in date]
                                y = nombre_p_jour_upload
                                ax1.bar(x, y, color='indigo', zorder=1)
                                ax1.set_ylabel('Nb tests UL', color='indigo')
                                for tl in ax1.get_yticklabels():
                                    tl.set_color('indigo')

                                # _____________________***AXE 2***________________________________________

                                ax2 = ax1.twinx()
                                x = [datetime.datetime.strptime(d, '%Y-%m-%d').date() for d in date]
                                y = debit_set_upload
                                ax2.plot(x, y, color='crimson', zorder=2)
                                plt.legend(loc='best')
                                ax2.set_xlabel('Jour')
                                ax2.set_ylabel('Moy debit UL (Mb/s)', color='crimson')
                                ax2.grid(True)
                                ax2.xaxis_date()
                                for t2 in ax2.get_yticklabels():
                                    t2.set_color('crimson')

                                    # ________________________________________________--___**_ FIN DEBIT UPLOAD HTTP _**___--___________________________________________________

                            else:
                                date = ['05/04/2017']
                                success_set.reverse()
                                success_taux.reverse()
                                failure_set.reverse()
                                failure_taux.reverse()
                                drop_set.reverse()
                                drop_taux.reverse()
                                # nb_set.reverse()
                                latency.reverse()
                                debit_set_download.reverse()
                                nombre_p_jour_download.reverse()
                                debit_set_upload.reverse()
                                nombre_p_jour_upload.reverse()

                                # ________________________________________________--___**_ SUCCESS _**___--___________________________________________________
                                # _____________________***PARAMS***________________________________________

                                ax1 = plt.subplot2grid((22, 9), (0, 0), colspan=4)
                                plt.xticks(rotation='vertical', fontsize=8)
                                plt.title('SUCCESS RATIO HTTP ')
                                params = {'legend.fontsize': 10,
                                          'legend.linewidth': 0, }
                                plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%d/%m/%Y'))
                                plt.gca().xaxis.set_major_locator(mdates.DayLocator())

                                # _____________________***AXE 1***________________________________________


                                x = [datetime.datetime.strptime(d, '%d/%m/%Y').date() for d in date]
                                y = success_set
                                ax1.bar(x, y, color='seagreen', zorder=1)
                                ax1.set_ylabel('Nb succs', color='seagreen')
                                for tl in ax1.get_yticklabels():
                                    tl.set_color('seagreen')

                                    # _____________________***AXE 2***________________________________________

                                ax2 = ax1.twinx()
                                x = [datetime.datetime.strptime(d, '%d/%m/%Y').date() for d in date]
                                y = success_taux
                                ax2.plot(x, y, color='red', zorder=2)
                                plt.legend(loc='best')
                                ax2.set_xlabel('Jour')
                                ax2.set_ylabel('Taux de de succes HTTP', color='red')
                                ax2.grid(True)
                                ax2.xaxis_date()
                                for t2 in ax2.get_yticklabels():
                                    t2.set_color('red')

                                    # ________________________________________________--___**_ FAILURE _**___--___________________________________________________
                                # _____________________***PARAMS***________________________________________

                                ax1 = plt.subplot2grid((22, 9), (0, 5), colspan=4)
                                plt.xticks(rotation='vertical', fontsize=8)
                                plt.title('FAILURE RATIO HTTP ')
                                params = {'legend.fontsize': 10,
                                          'legend.linewidth': 0, }
                                plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%d/%m/%Y'))
                                plt.gca().xaxis.set_major_locator(mdates.DayLocator())

                                # _____________________***AXE 1***________________________________________


                                x = [datetime.datetime.strptime(d, '%d/%m/%Y').date() for d in date]
                                y = failure_set
                                ax1.bar(x, y, color='red', zorder=1)
                                ax1.set_ylabel('Nb echc', color='red')
                                for tl in ax1.get_yticklabels():
                                    tl.set_color('red')

                                    # _____________________***AXE 2***________________________________________

                                ax2 = ax1.twinx()
                                x = [datetime.datetime.strptime(d, '%d/%m/%Y').date() for d in date]
                                y = failure_taux
                                ax2.plot(x, y, color='green', zorder=2)
                                plt.legend(loc='best')
                                ax2.set_xlabel('Jour')
                                ax2.set_ylabel('Taux de de echc HTTP', color='green')
                                ax2.grid(True)
                                ax2.xaxis_date()
                                for t2 in ax2.get_yticklabels():
                                    t2.set_color('green')

                                # ________________________________________________--___**_ DROP _**___--___________________________________________________
                                # _____________________***PARAMS***________________________________________

                                ax1 = plt.subplot2grid((22, 9), (2, 0), colspan=4)
                                plt.xticks(rotation='vertical', fontsize=8)
                                plt.title('DROP RATIO HTTP ')
                                params = {'legend.fontsize': 10,
                                          'legend.linewidth': 0, }
                                plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%d/%m/%Y'))
                                plt.gca().xaxis.set_major_locator(mdates.DayLocator())

                                # _____________________***AXE 1***________________________________________


                                x = [datetime.datetime.strptime(d, '%d/%m/%Y').date() for d in date]
                                y = drop_set
                                ax1.bar(x, y, color='orangered', zorder=1)
                                ax1.set_ylabel('Nb coup', color='orangered')
                                for tl in ax1.get_yticklabels():
                                    tl.set_color('orangered')

                                    # _____________________***AXE 2***________________________________________

                                ax2 = ax1.twinx()
                                x = [datetime.datetime.strptime(d, '%d/%m/%Y').date() for d in date]
                                y = drop_taux
                                ax2.plot(x, y, color='darkblue', zorder=2)
                                plt.legend(loc='best')
                                ax2.set_xlabel('Jour')
                                ax2.set_ylabel('Taux de de coup HTTP', color='darkblue')
                                ax2.grid(True)
                                ax2.xaxis_date()
                                for t2 in ax2.get_yticklabels():
                                    t2.set_color('darkblue')


                                    # ________________________________________________--___**_ LATENCES _**___--___________________________________________________
                                ax1 = plt.subplot2grid((22, 9), (2, 5), colspan=4)
                                x = [datetime.datetime.strptime(d, '%d/%m/%Y').date() for d in date]
                                y = latency
                                plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%d/%m/%Y'))
                                plt.gca().xaxis.set_major_locator(mdates.DayLocator())
                                plt.bar(x, y, color='dodgerblue')
                                plt.xticks(rotation='vertical', fontsize=8)
                                plt.xlabel('Jour')
                                ax1.set_ylabel('Moyenne LATENCE (ms)', color='dodgerblue')
                                for tl in ax1.get_yticklabels():
                                    tl.set_color('dodgerblue')
                                plt.grid(True)
                                plt.title('LATENCES HTTP (ms)')
                                # ________________________________________________--___**_ FIN_LATENCES _**___--___________________________________________________



                                # ________________________________________________--___**_ DEBIT download HTTP _**___--___________________________________________________
                                # _____________________***PARAMS***________________________________________

                                ax1 = plt.subplot2grid((22, 9), (4, 0), colspan=4)
                                plt.xticks(rotation='vertical', fontsize=8)
                                plt.title('DEBITS Moyens DOWNLOAD HTTP (Mbit/s) ')
                                params = {'legend.fontsize': 10,
                                          'legend.linewidth': 0, }
                                plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%d/%m/%Y'))
                                plt.gca().xaxis.set_major_locator(mdates.DayLocator())

                                # _____________________***AXE 1***________________________________________


                                x = [datetime.datetime.strptime(d, '%d/%m/%Y').date() for d in date]
                                y = nombre_p_jour_download
                                ax1.bar(x, y, color='indigo', zorder=1)
                                ax1.set_ylabel('Nb tests DL', color='indigo')
                                for tl in ax1.get_yticklabels():
                                    tl.set_color('indigo')

                                # _____________________***AXE 2***________________________________________

                                ax2 = ax1.twinx()
                                x = [datetime.datetime.strptime(d, '%d/%m/%Y').date() for d in date]
                                y = debit_set_download
                                ax2.plot(x, y, color='crimson', zorder=2)
                                plt.legend(loc='best')
                                ax2.set_xlabel('Jour')
                                ax2.set_ylabel('Moy debit DL (Mb/s)', color='crimson')
                                ax2.grid(True)
                                ax2.xaxis_date()
                                for t2 in ax2.get_yticklabels():
                                    t2.set_color('crimson')

                                    # ________________________________________________--___**_ FIN DEBIT download HTTP _**___--___________________________________________________



                                    # ________________________________________________--___**_ DEBIT UPLOAD HTTP _**___--___________________________________________________
                                # _____________________***PARAMS***________________________________________

                                ax1 = plt.subplot2grid((22, 9), (4, 5), colspan=4)
                                plt.xticks(rotation='vertical', fontsize=8)
                                plt.title('DEBITS Moyens UPLOAD HTTP (Mb/s) ')
                                params = {'legend.fontsize': 10,
                                          'legend.linewidth': 0, }
                                plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%d/%m/%Y'))
                                plt.gca().xaxis.set_major_locator(mdates.DayLocator())

                                # _____________________***AXE 1***________________________________________


                                x = [datetime.datetime.strptime(d, '%d/%m/%Y').date() for d in date]
                                y = nombre_p_jour_upload
                                ax1.bar(x, y, color='indigo', zorder=1)
                                ax1.set_ylabel('Nb tests UL', color='indigo')
                                for tl in ax1.get_yticklabels():
                                    tl.set_color('indigo')

                                # _____________________***AXE 2***________________________________________

                                ax2 = ax1.twinx()
                                x = [datetime.datetimee.strptime(d, '%d/%m/%Y').date() for d in date]
                                y = debit_set_upload
                                ax2.plot(x, y, color='crimson', zorder=2)
                                plt.legend(loc='best')
                                ax2.set_xlabel('Jour')
                                ax2.set_ylabel('Moy debit UL (Mb/s)', color='crimson')
                                ax2.grid(True)
                                ax2.xaxis_date()
                                for t2 in ax2.get_yticklabels():
                                    t2.set_color('crimson')

                                    # ________________________________________________--___**_ FIN DEBIT UPLOAD HTTP _**___--___________________________________________________

                            return date_http, success_set, success_taux, failure_set, failure_taux, drop_set, drop_taux, nb_set, latency, debit_set_download, nombre_p_jour_download, debit_set_upload, nombre_p_jour_upload


                            # ________________________________________________--___**_FIN MATPLOTLIB _**___--___________________________________________________

                        # WEB
                        def page_loading_time(fichier_web, val1, val2, val3, val4, val5, tech):
                            import datetime
                            print('\n  JE SUIS DANS WEB \n')
                            format_date_generale="%Y-%m-%d"
                            date_debut = datetime.datetime.strptime(val1, format_date_generale)
                            date_fin = datetime.datetime.strptime(val2, format_date_generale)

                            global sfr
                            global nb_sfr
                            global time_sfr
                            global nombre_sfr
                            global nb_succes_web_set
                            global taux_succes_web_set
                            global taux_succes_web
                            global nb_succes_web
                            global nb_etat

                            global nb_failure_web_set
                            global taux_failure_web_set
                            global taux_failure_web
                            global nb_failure_web

                            global nb_timeout_web_set
                            global taux_timeout_web_set
                            global taux_timeout_web
                            global nb_timeout_web
                            global date_web
                            date_web = []

                            fichier_web = fichier_web
                            date = []
                            csvfile = open(fichier_web, 'r')
                            # reader = csv.reader(csvfile, delimiter=';')
                            reader = csv.reader(csvfile)

                            b = ''
                            var_ajout = 0.0

                            # LISTES DES INFOS DES PAGES CONSULTES
                            sfr = []
                            nb_sfr = []
                            time_sfr = 0.0
                            nombre_sfr = 0.0
                            # rechercher SFR.FR
                            regex_sfr = re.compile(r".*(sfr\.fr).*", re.IGNORECASE)

                            # VARIABLES DES ETATS
                            nb_succes_web_set = []
                            taux_succes_web_set = []
                            taux_succes_web = 0.0
                            nb_succes_web = 0.0
                            nb_etat = 0.0

                            nb_failure_web_set = []
                            taux_failure_web_set = []
                            taux_failure_web = 0.0
                            nb_failure_web = 0.0

                            nb_timeout_web_set = []
                            taux_timeout_web_set = []
                            taux_timeout_web = 0.0
                            nb_timeout_web = 0.0

                            # TEST FIN FICHIER
                            row_check = 0.0

                            for row in reader:
                                row_check = row_check + 1
                                f = row[1][0:10]
                                tecc = row[200]
                                ci_web = row[42]
                                lac_web = row[43]
                                if f == 'date_utc_a':
                                    continue
                                datef = datetime.datetime.strptime(f, format_date_generale)
                                if datef > date_fin:
                                    # print(datef)
                                    continue

                                if datef < date_debut:
                                    if nombre_sfr == 0.0:
                                        sfr.append(0.0)
                                        nb_sfr.append(0.0)
                                    else:
                                        time_sfr = (time_sfr / nombre_sfr) / 1000
                                        sfr.append(time_sfr)
                                        nb_sfr.append(nombre_sfr)
                                        time_sfr = 0.0
                                        nombre_sfr = 0.0
                                    if nb_etat == 0.0:
                                        taux_succes_web_set.append(0.0)
                                        nb_succes_web_set.append(0.0)

                                        taux_failure_web_set.append(0.0)
                                        nb_failure_web_set.append(0.0)

                                        taux_timeout_web_set.append(0.0)
                                        nb_timeout_web_set.append(0.0)
                                    else:
                                        taux_succes_web = (nb_succes_web / nb_etat)
                                        taux_succes_web_set.append(taux_succes_web)
                                        nb_succes_web_set.append(nb_succes_web)
                                        taux_failure_web = (nb_failure_web / nb_etat)
                                        taux_failure_web_set.append(taux_failure_web)
                                        nb_failure_web_set.append(nb_failure_web)
                                        taux_timeout_web = (nb_timeout_web / nb_etat)
                                        taux_timeout_web_set.append(taux_timeout_web)
                                        nb_timeout_web_set.append(nb_timeout_web)
                                        taux_timeout_web = 0.0
                                        nb_timeout_web = 0.0
                                        taux_failure_web = 0.0
                                        nb_failure_web = 0.0
                                        taux_succes_web = 0.0
                                        nb_succes_web = 0.0
                                    break

                                """
                                                   if row_check==val4:
                                                       if nombre_sfr == 0.0:
                                                           sfr.append(0.0)
                                                           nb_sfr.append(0.0)
                                                       else:
                                                           time_sfr = (time_sfr / nombre_sfr) / 1000
                                                           sfr.append(time_sfr)
                                                           nb_sfr.append(nombre_sfr)
                                                           time_sfr = 0.0
                                                           nombre_sfr = 0.0
                                                       if nb_etat == 0.0:
                                                           taux_succes_web_set.append(0.0)
                                                           nb_succes_web_set.append(0.0)

                                                           taux_failure_web_set.append(0.0)
                                                           nb_failure_web_set.append(0.0)

                                                           taux_timeout_web_set.append(0.0)
                                                           nb_timeout_web_set.append(0.0)
                                                       else:
                                                           taux_succes_web = (nb_succes_web / nb_etat)
                                                           taux_succes_web_set.append(taux_succes_web)
                                                           nb_succes_web_set.append(nb_succes_web)
                                                           taux_failure_web = (nb_failure_web / nb_etat)
                                                           taux_failure_web_set.append(taux_failure_web)
                                                           nb_failure_web_set.append(nb_failure_web)
                                                           taux_timeout_web = (nb_timeout_web / nb_etat)
                                                           taux_timeout_web_set.append(taux_timeout_web)
                                                           nb_timeout_web_set.append(nb_timeout_web)
                                                           taux_timeout_web = 0.0
                                                           nb_timeout_web = 0.0
                                                           taux_failure_web = 0.0
                                                           nb_failure_web = 0.0
                                                           taux_succes_web = 0.0
                                                           nb_succes_web = 0.0
                                                       break
                                                   """

                                row[204] = '_'.join(row[204].split(" "))

                                if str(row[197]) == 'SFR' and str(row[204]) in val3 and row[203] in val5 and tecc in tech:

                                    variable = val2

                                    if b != str(f):
                                        date.append(str(f))
                                        b = str(f)
                                        if var_ajout > 0:
                                            if nombre_sfr == 0.0:
                                                sfr.append(0.0)
                                                nb_sfr.append(0.0)
                                            else:
                                                time_sfr = (time_sfr / nombre_sfr) / 1000
                                                sfr.append(time_sfr)
                                                nb_sfr.append(nombre_sfr)
                                                time_sfr = 0.0
                                                nombre_sfr = 0.0
                                            if nb_etat == 0.0:
                                                taux_succes_web_set.append(0.0)
                                                nb_succes_web_set.append(0.0)

                                                taux_failure_web_set.append(0.0)
                                                nb_failure_web_set.append(0.0)

                                                taux_timeout_web_set.append(0.0)
                                                nb_timeout_web_set.append(0.0)
                                            else:
                                                taux_succes_web = (nb_succes_web * 100 / nb_etat)
                                                taux_succes_web_set.append(taux_succes_web)
                                                nb_succes_web_set.append(nb_succes_web)
                                                taux_failure_web = (nb_failure_web * 100 / nb_etat)
                                                taux_failure_web_set.append(taux_failure_web)
                                                nb_failure_web_set.append(nb_failure_web)
                                                taux_timeout_web = (nb_timeout_web * 100 / nb_etat)
                                                taux_timeout_web_set.append(taux_timeout_web)
                                                nb_timeout_web_set.append(nb_timeout_web)
                                                taux_timeout_web = 0.0
                                                nb_timeout_web = 0.0
                                                taux_failure_web = 0.0
                                                nb_failure_web = 0.0
                                                taux_succes_web = 0.0
                                                nb_succes_web = 0.0
                                            nb_etat = 0.0
                                        var_ajout = var_ajout + 1

                                        # PAGE LOADING TIME SFR
                                        if regex_sfr.search(row[175]) and str(row[202]) == 'Success':
                                            if row[188] != 'NULL':
                                                time_sfr = time_sfr + float(row[188])
                                                nombre_sfr = nombre_sfr + 1
                                        # LES ETATS
                                        if str(row[202]) == 'Success' or str(row[202]) == 'Canceled':
                                            nb_succes_web = nb_succes_web + 1
                                            nb_etat = nb_etat + 1
                                        if str(row[202]) == 'Failure':
                                            nb_failure_web = nb_failure_web + 1
                                            nb_etat = nb_etat + 1
                                        if str(row[202]) == 'Timeout':
                                            nb_timeout_web = nb_timeout_web + 1
                                            nb_etat = nb_etat + 1
                                        else:
                                            if str(row[202]) != 'N/A' and str(row[202]) != 'Success' and str(
                                                    row[202]) != 'Failure' and str(row[202]) != 'Timeout':
                                                nb_etat = nb_etat + 1
                                                var_ajout = var_ajout + 1


                                    else:
                                        var_ajout = var_ajout + 1
                                        # PAGE LOADING TIME SFR
                                        if regex_sfr.search(row[175]) and str(row[202]) == 'Success':
                                            if row[188] != 'NULL':
                                                time_sfr = time_sfr + float(row[188])
                                                nombre_sfr = nombre_sfr + 1
                                        # LES ETATS
                                        if str(row[202]) == 'Success' or str(row[202]) == 'Canceled':
                                            nb_succes_web = nb_succes_web + 1
                                            nb_etat = nb_etat + 1
                                        if str(row[202]) == 'Failure':
                                            nb_failure_web = nb_failure_web + 1
                                            nb_etat = nb_etat + 1
                                        if str(row[202]) == 'Timeout':
                                            nb_timeout_web = nb_timeout_web + 1
                                            nb_etat = nb_etat + 1
                                        else:
                                            if str(row[202]) != 'N/A' and str(row[202]) != 'Success' and str(
                                                    row[202]) != 'Failure' and str(row[202]) != 'Timeout':
                                                nb_etat = nb_etat + 1
                                                var_ajout = var_ajout + 1

                            if datef >= date_debut:
                                if nombre_sfr == 0.0:
                                    sfr.append(0.0)
                                    nb_sfr.append(0.0)
                                else:
                                    time_sfr = (time_sfr / nombre_sfr) / 1000
                                    sfr.append(time_sfr)
                                    nb_sfr.append(nombre_sfr)
                                    time_sfr = 0.0
                                    nombre_sfr = 0.0
                                if nb_etat == 0.0:
                                    taux_succes_web_set.append(0.0)
                                    nb_succes_web_set.append(0.0)

                                    taux_failure_web_set.append(0.0)
                                    nb_failure_web_set.append(0.0)

                                    taux_timeout_web_set.append(0.0)
                                    nb_timeout_web_set.append(0.0)
                                else:
                                    taux_succes_web = (nb_succes_web / nb_etat)
                                    taux_succes_web_set.append(taux_succes_web)
                                    nb_succes_web_set.append(nb_succes_web)
                                    taux_failure_web = (nb_failure_web / nb_etat)
                                    taux_failure_web_set.append(taux_failure_web)
                                    nb_failure_web_set.append(nb_failure_web)
                                    taux_timeout_web = (nb_timeout_web / nb_etat)
                                    taux_timeout_web_set.append(taux_timeout_web)
                                    nb_timeout_web_set.append(nb_timeout_web)
                                    taux_timeout_web = 0.0
                                    nb_timeout_web = 0.0
                                    taux_failure_web = 0.0
                                    nb_failure_web = 0.0
                                    taux_succes_web = 0.0
                                    nb_succes_web = 0.0

                            date.reverse()
                            sfr.reverse()
                            nb_sfr.reverse()
                            taux_succes_web_set.reverse()
                            nb_succes_web_set.reverse()
                            taux_failure_web_set.reverse()
                            nb_failure_web_set.reverse()
                            taux_timeout_web_set.reverse()
                            nb_timeout_web_set.reverse()
                            date_web = date

                            if len(date) > 0:
                                # ________________________________________________--___**_ PAGE_LOADING_TIME _**___--___________________________________________________
                                # _____________________***PARAMS***________________________________________

                                ax1 = plt.subplot2grid((22, 9), (6, 0), colspan=4)
                                plt.xticks(rotation='vertical', fontsize=8)
                                plt.title('Page loading time -sfr.fr- (s) ')
                                params = {'legend.fontsize': 10,
                                          'legend.linewidth': 0, }
                                plt.gca().xaxis.set_major_formatter(mdates.DateFormatter(format_date_generale))
                                plt.gca().xaxis.set_major_locator(mdates.DayLocator())

                                # _____________________***AXE 1***________________________________________


                                x = [datetime.datetime.strptime(d, format_date_generale).date() for d in date]
                                y = nb_sfr
                                ax1.bar(x, y, color='navy', zorder=1)
                                ax1.set_ylabel('Nb Resultats', color='navy')
                                for tl in ax1.get_yticklabels():
                                    tl.set_color('navy')

                                    # _____________________***AXE 2***________________________________________

                                ax2 = ax1.twinx()
                                x = [datetime.datetime.strptime(d, format_date_generale).date() for d in date]
                                y = sfr
                                ax2.plot(x, y, color='grey', zorder=2)
                                plt.legend(loc='best')
                                ax2.set_xlabel('Jour')
                                ax2.set_ylabel('Temps Moyen (s)', color='grey')
                                ax2.grid(True)
                                ax2.xaxis_date()
                                for t2 in ax2.get_yticklabels():
                                    t2.set_color('grey')

                                    # ________________________________________________--___**_ FIN_PAGE_LOADING_TIME _**___--___________________________________________________

                                    # ________________________________________________--___**_ SUCCES_WEB _**___--___________________________________________________
                                # _____________________***PARAMS***________________________________________

                                ax1 = plt.subplot2grid((22, 9), (6, 5), colspan=4)
                                plt.xticks(rotation='vertical', fontsize=8)
                                plt.title('SUCCESS RATIO WEB ' + date[0] + ' au ' + date[len(date) - 1])
                                params = {'legend.fontsize': 10,
                                          'legend.linewidth': 0, }
                                plt.gca().xaxis.set_major_formatter(mdates.DateFormatter(format_date_generale))
                                plt.gca().xaxis.set_major_locator(mdates.DayLocator())

                                # _____________________***AXE 1***________________________________________


                                x = [datetime.datetime.strptime(d, format_date_generale).date() for d in date]
                                y = nb_succes_web_set
                                ax1.bar(x, y, color='seagreen', zorder=1)
                                ax1.set_ylabel('Nb Succes', color='seagreen')
                                for tl in ax1.get_yticklabels():
                                    tl.set_color('seagreen')

                                # _____________________***AXE 2***________________________________________

                                ax2 = ax1.twinx()
                                x = [datetime.datetime.strptime(d, format_date_generale).date() for d in date]
                                y = taux_succes_web_set
                                ax2.plot(x, y, color='red', zorder=2)
                                plt.legend(loc='best')
                                ax2.set_xlabel('Jour')
                                ax2.set_ylabel('Taux Succes %', color='red')
                                ax2.grid(True)
                                ax2.xaxis_date()
                                for t2 in ax2.get_yticklabels():
                                    t2.set_color('red')
                                    # ________________________________________________--___**_ FIN_SUCCES_WEB _**___--___________________________________________________

                                    # ________________________________________________--___**_ FAILURE_WEB _**___--___________________________________________________
                                # _____________________***PARAMS***________________________________________

                                ax1 = plt.subplot2grid((22, 9), (8, 0), colspan=4)
                                plt.xticks(rotation='vertical', fontsize=8)
                                plt.title('FAILURE RATIO WEB ' + date[0] + ' au ' + date[len(date) - 1])
                                params = {'legend.fontsize': 10,
                                          'legend.linewidth': 0, }
                                plt.gca().xaxis.set_major_formatter(mdates.DateFormatter(format_date_generale))
                                plt.gca().xaxis.set_major_locator(mdates.DayLocator())

                                # _____________________***AXE 1***________________________________________


                                x = [datetime.datetime.strptime(d, format_date_generale).date() for d in date]
                                y = nb_failure_web_set
                                ax1.bar(x, y, color='red', zorder=1)
                                ax1.set_ylabel('Nb Failure', color='red')
                                for tl in ax1.get_yticklabels():
                                    tl.set_color('red')

                                # _____________________***AXE 2***________________________________________

                                ax2 = ax1.twinx()
                                x = [datetime.datetime.strptime(d, format_date_generale).date() for d in date]
                                y = taux_failure_web_set
                                ax2.plot(x, y, color='green', zorder=2)
                                plt.legend(loc='best')
                                ax2.set_xlabel('Jour')
                                ax2.set_ylabel('Taux Echec %', color='green')
                                ax2.grid(True)
                                ax2.xaxis_date()
                                for t2 in ax2.get_yticklabels():
                                    t2.set_color('green')
                                    # ___________________________________________________________________________________________________
                                    # ________________________________________________--___**_ FIN_failure_WEB _**___--___________________________________________________


                                    # ________________________________________________--___**_ TIMEOUT_WEB _**___--___________________________________________________
                                # _____________________***PARAMS***________________________________________

                                ax1 = plt.subplot2grid((22, 9), (8, 5), colspan=4)
                                plt.xticks(rotation='vertical', fontsize=8)
                                plt.title('TIMEOUT RATIO WEB ' + date[0] + ' au ' + date[len(date) - 1])
                                params = {'legend.fontsize': 10,
                                          'legend.linewidth': 0, }
                                plt.gca().xaxis.set_major_formatter(mdates.DateFormatter(format_date_generale))
                                plt.gca().xaxis.set_major_locator(mdates.DayLocator())

                                # _____________________***AXE 1***________________________________________


                                x = [datetime.datetime.strptime(d, format_date_generale).date() for d in date]
                                y = nb_timeout_web_set
                                ax1.bar(x, y, color='grey', zorder=1)
                                ax1.set_ylabel('Nb Timeout', color='grey')
                                for tl in ax1.get_yticklabels():
                                    tl.set_color('grey')

                                # _____________________***AXE 2***________________________________________

                                ax2 = ax1.twinx()
                                x = [datetime.datetime.strptime(d, format_date_generale).date() for d in date]
                                y = taux_timeout_web_set
                                ax2.plot(x, y, color='k', zorder=2)
                                plt.legend(loc='best')
                                ax2.set_xlabel('Jour')
                                ax2.set_ylabel('Taux Timeout %', color='k')
                                ax2.grid(True)
                                ax2.xaxis_date()
                                for t2 in ax2.get_yticklabels():
                                    t2.set_color('k')
                                    # ___________________________________________________________________________________________________
                                    # ________________________________________________--___**_ FIN_TIMEOUT_WEB _**___--___________________________________________________


                            else:
                                date = ['05/04/2017']
                                sfr = [0]
                                nb_sfr = [0]
                                taux_succes_web_set = [0]
                                nb_succes_web_set = [0]
                                taux_failure_web_set = [0]
                                nb_failure_web_set = [0]
                                taux_timeout_web_set = [0]
                                nb_timeout_web_set = [0]
                                # ________________________________________________--___**_ PAGE_LOADING_TIME _**___--___________________________________________________
                                # _____________________***PARAMS***________________________________________

                                ax1 = plt.subplot2grid((22, 9), (6, 0), colspan=4)
                                plt.xticks(rotation='vertical', fontsize=8)
                                plt.title('Page loading time -sfr.fr- (s) ')
                                params = {'legend.fontsize': 10,
                                          'legend.linewidth': 0, }
                                plt.gca().xaxis.set_major_formatter(mdates.DateFormatter(format_date_generale))
                                plt.gca().xaxis.set_major_locator(mdates.DayLocator())

                                # _____________________***AXE 1***________________________________________


                                x = [datetime.datetime.strptime(d, format_date_generale).date() for d in date]
                                y = nb_sfr
                                ax1.bar(x, y, color='navy', zorder=1)
                                ax1.set_ylabel('Nb Resultats', color='navy')
                                for tl in ax1.get_yticklabels():
                                    tl.set_color('navy')

                                    # _____________________***AXE 2***________________________________________

                                ax2 = ax1.twinx()
                                x = [datetime.datetime.strptime(d, format_date_generale).date() for d in date]
                                y = sfr
                                ax2.plot(x, y, color='grey', zorder=2)
                                plt.legend(loc='best')
                                ax2.set_xlabel('Jour')
                                ax2.set_ylabel('Temps Moyen (s)', color='grey')
                                ax2.grid(True)
                                ax2.xaxis_date()
                                for t2 in ax2.get_yticklabels():
                                    t2.set_color('grey')

                                    # ________________________________________________--___**_ FIN_PAGE_LOADING_TIME _**___--___________________________________________________

                                    # ________________________________________________--___**_ SUCCES_WEB _**___--___________________________________________________
                                # _____________________***PARAMS***________________________________________

                                ax1 = plt.subplot2grid((22, 9), (6, 5), colspan=4)
                                plt.xticks(rotation='vertical', fontsize=8)
                                plt.title('SUCCESS RATIO WEB ')
                                params = {'legend.fontsize': 10,
                                          'legend.linewidth': 0, }
                                plt.gca().xaxis.set_major_formatter(mdates.DateFormatter(format_date_generale))
                                plt.gca().xaxis.set_major_locator(mdates.DayLocator())

                                # _____________________***AXE 1***________________________________________


                                x = [datetime.datetime.strptime(d, format_date_generale).date() for d in date]
                                y = nb_succes_web_set
                                ax1.bar(x, y, color='seagreen', zorder=1)
                                ax1.set_ylabel('Nb Succes', color='seagreen')
                                for tl in ax1.get_yticklabels():
                                    tl.set_color('seagreen')

                                # _____________________***AXE 2***________________________________________

                                ax2 = ax1.twinx()
                                x = [datetime.datetime.strptime(d, format_date_generale).date() for d in date]
                                y = taux_succes_web_set
                                ax2.plot(x, y, color='red', zorder=2)
                                plt.legend(loc='best')
                                ax2.set_xlabel('Jour')
                                ax2.set_ylabel('Taux Succes %', color='red')
                                ax2.grid(True)
                                ax2.xaxis_date()
                                for t2 in ax2.get_yticklabels():
                                    t2.set_color('red')
                                    # ________________________________________________--___**_ FIN_SUCCES_WEB _**___--___________________________________________________

                                    # ________________________________________________--___**_ FAILURE_WEB _**___--___________________________________________________
                                # _____________________***PARAMS***________________________________________

                                ax1 = plt.subplot2grid((22, 9), (8, 0), colspan=4)
                                plt.xticks(rotation='vertical', fontsize=8)
                                plt.title('FAILURE RATIO WEB ')
                                params = {'legend.fontsize': 10,
                                          'legend.linewidth': 0, }
                                plt.gca().xaxis.set_major_formatter(mdates.DateFormatter(format_date_generale))
                                plt.gca().xaxis.set_major_locator(mdates.DayLocator())

                                # _____________________***AXE 1***________________________________________


                                x = [datetime.datetime.strptime(d, format_date_generale).date() for d in date]
                                y = nb_failure_web_set
                                ax1.bar(x, y, color='red', zorder=1)
                                ax1.set_ylabel('Nb Failure', color='red')
                                for tl in ax1.get_yticklabels():
                                    tl.set_color('red')

                                # _____________________***AXE 2***________________________________________

                                ax2 = ax1.twinx()
                                x = [datetime.datetime.strptime(d, format_date_generale).date() for d in date]
                                y = taux_failure_web_set
                                ax2.plot(x, y, color='green', zorder=2)
                                plt.legend(loc='best')
                                ax2.set_xlabel('Jour')
                                ax2.set_ylabel('Taux Echec %', color='green')
                                ax2.grid(True)
                                ax2.xaxis_date()
                                for t2 in ax2.get_yticklabels():
                                    t2.set_color('green')
                                    # ___________________________________________________________________________________________________
                                    # ________________________________________________--___**_ FIN_failure_WEB _**___--___________________________________________________


                                    # ________________________________________________--___**_ TIMEOUT_WEB _**___--___________________________________________________
                                # _____________________***PARAMS***________________________________________

                                ax1 = plt.subplot2grid((22, 9), (8, 5), colspan=4)
                                plt.xticks(rotation='vertical', fontsize=8)
                                plt.title('TIMEOUT RATIO WEB ')
                                params = {'legend.fontsize': 10,
                                          'legend.linewidth': 0, }
                                plt.gca().xaxis.set_major_formatter(mdates.DateFormatter(format_date_generale))
                                plt.gca().xaxis.set_major_locator(mdates.DayLocator())

                                # _____________________***AXE 1***________________________________________


                                x = [datetime.datetime.strptime(d, format_date_generale).date() for d in date]
                                y = nb_timeout_web_set
                                ax1.bar(x, y, color='grey', zorder=1)
                                ax1.set_ylabel('Nb Timeout', color='grey')
                                for tl in ax1.get_yticklabels():
                                    tl.set_color('grey')

                                # _____________________***AXE 2***________________________________________

                                ax2 = ax1.twinx()
                                x = [dt.datetime.strptime(d, format_date_generale).date() for d in date]
                                y = taux_timeout_web_set
                                ax2.plot(x, y, color='k', zorder=2)
                                plt.legend(loc='best')
                                ax2.set_xlabel('Jour')
                                ax2.set_ylabel('Taux Timeout %', color='k')
                                ax2.grid(True)
                                ax2.xaxis_date()
                                for t2 in ax2.get_yticklabels():
                                    t2.set_color('k')
                                    # ___________________________________________________________________________________________________
                                    # ________________________________________________--___**_ FIN_TIMEOUT_WEB _**___--___________________________________________________

                            return date_web, sfr, nb_sfr, taux_succes_web_set, nb_succes_web_set, taux_failure_web_set, nb_failure_web_set, taux_timeout_web_set, nb_timeout_web_set



                            # ________________________________________________--___**_FIN MATPLOTLIB _**___--___________________________________________________

                        # VIDEO
                        def buffering_time_video(fichier, val1, val2, val3, val4, val5, tech):
                            import datetime
                            print('\n  JE SUIS DANS VIDEO \n')
                            format_date_generale = "%Y-%m-%d"
                            date_debut = datetime.datetime.strptime(val1, format_date_generale)
                            date_fin = datetime.datetime.strptime(val2, format_date_generale)
                            fichier = fichier
                            date = []
                            csvfile = open(fichier, 'r')
                            reader = csv.reader(csvfile)

                            b = ''

                            global nb_test_video_set
                            global nb_tst_time_video
                            global time_video_buffering
                            global time_video_buffering_set
                            global drop_video_set
                            global nb_drop_video
                            global drop_video_taux
                            global nb_drop_video_set
                            global nb_etats
                            global timeout_set
                            global nb_timeout
                            global timeout_taux
                            global nb_timeout_set
                            global nb_etats
                            global date_video
                            date_video = []

                            nb_test_video_set = []
                            nb_tst_time_video = 0.0
                            time_video_buffering = 0.0
                            time_video_buffering_set = []

                            drop_video_set = []
                            nb_drop_video = 0.0
                            drop_video_taux = 0.0
                            nb_drop_video_set = []
                            nb_etats = 0.0

                            timeout_set = []
                            nb_timeout = 0.0
                            timeout_taux = 0.0
                            nb_timeout_set = []
                            nb_etats = 0.0

                            row_check = 0.0
                            check_decalage = 0.0

                            for row in reader:
                                row_check = row_check + 1
                                f = row[1][0:10]
                                tecc = row[241]
                                ci_video = row[42]
                                lac_video = row[43]
                                temps_bufferisation = row[222]
                                if f == 'date_utc_a':
                                    continue

                                datef = datetime.datetime.strptime(f, format_date_generale)

                                if datef > date_fin:
                                    continue
                                if datef < date_debut:
                                    if nb_tst_time_video == 0.0:
                                        nb_test_video_set.append(0.0)
                                        time_video_buffering_set.append(0.0)
                                    else:
                                        time_video_buffering = time_video_buffering / (nb_tst_time_video * 1000)
                                        nb_test_video_set.append(nb_tst_time_video)
                                        time_video_buffering_set.append(time_video_buffering)
                                        nb_tst_time_video = 0.0
                                        time_video_buffering = 0.0
                                    if nb_etats > 0:
                                        drop_video_taux = nb_drop_video / nb_etats
                                        drop_video_set.append(drop_video_taux)
                                        nb_drop_video_set.append(nb_drop_video)
                                        nb_drop_video = 0.0

                                        timeout_taux = nb_timeout / nb_etats
                                        timeout_set.append(timeout_taux)
                                        nb_timeout_set.append(nb_timeout)
                                        nb_timeout = 0.0
                                    else:
                                        drop_video_set.append(0.0)
                                        nb_drop_video_set.append(0.0)

                                    break
                                """
                                                   if row_check==val4:
                                                       if nb_tst_time_video == 0.0:
                                                           nb_test_video_set.append(0.0)
                                                           time_video_buffering_set.append(0.0)
                                                       else:
                                                           time_video_buffering = time_video_buffering / (nb_tst_time_video * 1000)
                                                           nb_test_video_set.append(nb_tst_time_video)
                                                           time_video_buffering_set.append(time_video_buffering)
                                                           nb_tst_time_video = 0.0
                                                           time_video_buffering = 0.0
                                                       if nb_etats > 0:
                                                           drop_video_taux = nb_drop_video / nb_etats
                                                           drop_video_set.append(drop_video_taux)
                                                           nb_drop_video_set.append(nb_drop_video)
                                                           nb_drop_video = 0.0

                                                           timeout_taux = nb_timeout / nb_etats
                                                           timeout_set.append(timeout_taux)
                                                           nb_timeout_set.append(nb_timeout)
                                                           nb_timeout = 0.0
                                                       else:
                                                           drop_video_set.append(0.0)
                                                           nb_drop_video_set.append(0.0)

                                                       break
                                                   """

                                row[246] = '_'.join(row[246].split(" "))
                                if row[239] == 'SFR' and row[246] in val3 and row[245] in val5 and tecc in tech:
                                    if b != str(f):
                                        date.append(str(f))
                                        b = str(f)
                                        if check_decalage > 0:
                                            if nb_tst_time_video == 0.0:
                                                nb_test_video_set.append(0.0)
                                                time_video_buffering_set.append(0.0)
                                            else:
                                                time_video_buffering = time_video_buffering / (nb_tst_time_video * 1000)
                                                nb_test_video_set.append(nb_tst_time_video)
                                                time_video_buffering_set.append(time_video_buffering)
                                                nb_tst_time_video = 0.0
                                                time_video_buffering = 0.0
                                            if nb_etats > 0:
                                                drop_video_taux = nb_drop_video * 100 / nb_etats
                                                drop_video_set.append(drop_video_taux)
                                                nb_drop_video_set.append(nb_drop_video)
                                                nb_drop_video = 0.0

                                                timeout_taux = nb_timeout * 100 / nb_etats
                                                timeout_set.append(timeout_taux)
                                                nb_timeout_set.append(nb_timeout)
                                                nb_timeout = 0.0
                                            else:
                                                drop_video_set.append(0.0)
                                                nb_drop_video_set.append(0.0)

                                            nb_etats = 0.0
                                        check_decalage = check_decalage + 1

                                    check_decalage = check_decalage + 1
                                    if temps_bufferisation != 'NULL' and row[168] != 'NULL' and float(
                                            row[168]) >= 512 and row[244] == 'Success':
                                        nb_tst_time_video = nb_tst_time_video + 1
                                        time_video_buffering = time_video_buffering + float(temps_bufferisation)
                                    if str(row[244]) == 'Drop':
                                        nb_drop_video = nb_drop_video + 1
                                        nb_etats = nb_etats + 1
                                    if str(row[244]) == 'Timeout':
                                        nb_timeout = nb_timeout + 1
                                        nb_etats = nb_etats + 1
                                    else:
                                        if row[244] != 'N/A':
                                            nb_etats = nb_etats + 1

                            if datef >= date_debut:
                                if nb_tst_time_video == 0.0:
                                    nb_test_video_set.append(0.0)
                                    time_video_buffering_set.append(0.0)
                                else:
                                    time_video_buffering = time_video_buffering / (nb_tst_time_video * 1000)
                                    nb_test_video_set.append(nb_tst_time_video)
                                    time_video_buffering_set.append(time_video_buffering)
                                    nb_tst_time_video = 0.0
                                    time_video_buffering = 0.0
                                if nb_etats > 0:
                                    drop_video_taux = nb_drop_video / nb_etats
                                    drop_video_set.append(drop_video_taux)
                                    nb_drop_video_set.append(nb_drop_video)
                                    nb_drop_video = 0.0

                                    timeout_taux = nb_timeout / nb_etats
                                    timeout_set.append(timeout_taux)
                                    nb_timeout_set.append(nb_timeout)
                                    nb_timeout = 0.0
                                else:
                                    drop_video_set.append(0.0)
                                    nb_drop_video_set.append(0.0)

                            date.reverse()
                            nb_test_video_set.reverse()
                            time_video_buffering_set.reverse()
                            drop_video_set.reverse()
                            nb_drop_video_set.reverse()
                            timeout_set.reverse()
                            nb_timeout_set.reverse()
                            date_video = date
                            if len(date) > 0:
                                # ________________________________________________--___**_ MATPLOTLIB _**___--___________________________________________________

                                # ________________________________________________--___**_ VIDEO BUFFERING TIME _**___--___________________________________________________

                                # _____________________***PARAMS***________________________________________

                                ax1 = plt.subplot2grid((22, 9), (10, 0), colspan=4)
                                plt.xticks(rotation='vertical', fontsize=8)
                                plt.title('Video Buffering TIME (s) ' + date[0] + ' au ' + date[len(date) - 1])
                                params = {'legend.fontsize': 10,
                                          'legend.linewidth': 0, }
                                plt.gca().xaxis.set_major_formatter(mdates.DateFormatter(format_date_generale))
                                plt.gca().xaxis.set_major_locator(mdates.DayLocator())

                                # _____________________***AXE 1***________________________________________


                                x = [datetime.datetime.strptime(d, format_date_generale).date() for d in date]
                                y = nb_test_video_set
                                ax1.bar(x, y, color='lightgreen', zorder=1)
                                ax1.set_ylabel('Nb tests', color='forestgreen')
                                for tl in ax1.get_yticklabels():
                                    tl.set_color('forestgreen')

                                    # _____________________***AXE 2***________________________________________

                                ax2 = ax1.twinx()
                                x = [datetime.datetime.strptime(d, format_date_generale).date() for d in date]
                                y = time_video_buffering_set
                                ax2.plot(x, y, color='crimson', zorder=2)
                                plt.legend(loc='best')
                                ax2.set_xlabel('Jour')
                                ax2.set_ylabel('Tmp Moy (s)', color='crimson')
                                ax2.grid(True)
                                ax2.xaxis_date()
                                for t2 in ax2.get_yticklabels():
                                    t2.set_color('crimson')

                                    # ________________________________________________--___**_ DROP RATIO VIDEO _**___--___________________________________________________

                                # _____________________***PARAMS***________________________________________

                                ax1 = plt.subplot2grid((22, 9), (10, 5), colspan=4)
                                plt.xticks(rotation='vertical', fontsize=8)
                                plt.title('DROP RATIO VIDEO ' + date[0] + ' au ' + date[len(date) - 1])
                                params = {'legend.fontsize': 10,
                                          'legend.linewidth': 0, }
                                plt.gca().xaxis.set_major_formatter(mdates.DateFormatter(format_date_generale))
                                plt.gca().xaxis.set_major_locator(mdates.DayLocator())

                                # _____________________***AXE 1***________________________________________


                                x = [datetime.datetime.strptime(d, format_date_generale).date() for d in date]
                                y = nb_drop_video_set
                                ax1.bar(x, y, color='orangered', zorder=1)
                                ax1.set_ylabel('Nb Drop', color='orangered')
                                for tl in ax1.get_yticklabels():
                                    tl.set_color('orangered')

                                # _____________________***AXE 2***________________________________________

                                ax2 = ax1.twinx()
                                x = [datetime.datetime.strptime(d, format_date_generale).date() for d in date]
                                y = drop_video_set
                                ax2.plot(x, y, color='darkblue', zorder=2)
                                plt.legend(loc='best')
                                ax2.set_xlabel('Jour')
                                ax2.set_ylabel('Taux drop %', color='darkblue')
                                ax2.grid(True)
                                ax2.xaxis_date()
                                for t2 in ax2.get_yticklabels():
                                    t2.set_color('darkblue')
                                    # ____________________________________________________________
                                    # ________________________________________________--___**_ FIN DROP RATIO VIDEO _**___--___________________________________________________

                                # ________________________________________________--___**_ timeout RATIO VIDEO _**___--___________________________________________________

                                # _____________________***PARAMS***________________________________________

                                ax1 = plt.subplot2grid((22, 9), (12, 0), colspan=4)
                                plt.xticks(rotation='vertical', fontsize=8)
                                plt.title('TIMEOUT RATIO VIDEO ' + date[0] + ' au ' + date[len(date) - 1])
                                params = {'legend.fontsize': 10,
                                          'legend.linewidth': 0, }
                                plt.gca().xaxis.set_major_formatter(mdates.DateFormatter(format_date_generale))
                                plt.gca().xaxis.set_major_locator(mdates.DayLocator())

                                # _____________________***AXE 1***________________________________________


                                x = [datetime.datetime.strptime(d, format_date_generale).date() for d in date]
                                y = nb_timeout_set
                                ax1.bar(x, y, color='grey', zorder=1)
                                ax1.set_ylabel('Nb Timeout', color='grey')
                                for tl in ax1.get_yticklabels():
                                    tl.set_color('grey')

                                # _____________________***AXE 2***________________________________________

                                ax2 = ax1.twinx()
                                x = [datetime.datetime.strptime(d, format_date_generale).date() for d in date]
                                y = timeout_set
                                ax2.plot(x, y, color='k', zorder=2)
                                plt.legend(loc='best')
                                ax2.set_xlabel('Jour')
                                ax2.set_ylabel('Taux Timeout %', color='k')
                                ax2.grid(True)
                                ax2.xaxis_date()
                                for t2 in ax2.get_yticklabels():
                                    t2.set_color('k')

                                    # ____________________________________________________________
                                    # ________________________________________________--___**_ FIN timeout RATIO VIDEO _**___--___________________________________________________

                            else:
                                date = ['05/04/2017']
                                nb_test_video_set = [0]
                                time_video_buffering_set = [0]
                                drop_video_set = [0]
                                nb_drop_video_set = [0]
                                timeout_set = [0]
                                nb_timeout_set = [0]
                                # ________________________________________________--___**_ MATPLOTLIB _**___--___________________________________________________

                                # ________________________________________________--___**_ VIDEO BUFFERING TIME _**___--___________________________________________________

                                # _____________________***PARAMS***________________________________________

                                ax1 = plt.subplot2grid((22, 9), (10, 0), colspan=4)
                                plt.xticks(rotation='vertical', fontsize=8)
                                plt.title('Video Buffering TIME (s) ')
                                params = {'legend.fontsize': 10,
                                          'legend.linewidth': 0, }
                                plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%d/%m/%Y'))
                                plt.gca().xaxis.set_major_locator(mdates.DayLocator())

                                # _____________________***AXE 1***________________________________________


                                x = [datetime.datetime.strptime(d, '%d/%m/%Y').date() for d in date]
                                y = nb_test_video_set
                                ax1.bar(x, y, color='lightgreen', zorder=1)
                                ax1.set_ylabel('Nb tests', color='forestgreen')
                                for tl in ax1.get_yticklabels():
                                    tl.set_color('forestgreen')

                                    # _____________________***AXE 2***________________________________________

                                ax2 = ax1.twinx()
                                x = [datetime.datetime.strptime(d, '%d/%m/%Y').date() for d in date]
                                y = time_video_buffering_set
                                ax2.plot(x, y, color='crimson', zorder=2)
                                plt.legend(loc='best')
                                ax2.set_xlabel('Jour')
                                ax2.set_ylabel('Tmp Moy (s)', color='crimson')
                                ax2.grid(True)
                                ax2.xaxis_date()
                                for t2 in ax2.get_yticklabels():
                                    t2.set_color('crimson')

                                    # ________________________________________________--___**_ DROP RATIO VIDEO _**___--___________________________________________________

                                # _____________________***PARAMS***________________________________________

                                ax1 = plt.subplot2grid((22, 9), (10, 5), colspan=4)
                                plt.xticks(rotation='vertical', fontsize=8)
                                plt.title('DROP RATIO VIDEO ')
                                params = {'legend.fontsize': 10,
                                          'legend.linewidth': 0, }
                                plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%d/%m/%Y'))
                                plt.gca().xaxis.set_major_locator(mdates.DayLocator())

                                # _____________________***AXE 1***________________________________________


                                x = [datetime.datetime.strptime(d, '%d/%m/%Y').date() for d in date]
                                y = nb_drop_video_set
                                ax1.bar(x, y, color='orangered', zorder=1)
                                ax1.set_ylabel('Nb Drop', color='orangered')
                                for tl in ax1.get_yticklabels():
                                    tl.set_color('orangered')

                                # _____________________***AXE 2***________________________________________

                                ax2 = ax1.twinx()
                                x = [datetime.datetime.strptime(d, '%d/%m/%Y').date() for d in date]
                                y = drop_video_set
                                ax2.plot(x, y, color='darkblue', zorder=2)
                                plt.legend(loc='best')
                                ax2.set_xlabel('Jour')
                                ax2.set_ylabel('Taux drop %', color='darkblue')
                                ax2.grid(True)
                                ax2.xaxis_date()
                                for t2 in ax2.get_yticklabels():
                                    t2.set_color('darkblue')
                                    # ____________________________________________________________
                                    # ________________________________________________--___**_ FIN DROP RATIO VIDEO _**___--___________________________________________________

                                # ________________________________________________--___**_ timeout RATIO VIDEO _**___--___________________________________________________

                                # _____________________***PARAMS***________________________________________

                                ax1 = plt.subplot2grid((22, 9), (12, 0), colspan=4)
                                plt.xticks(rotation='vertical', fontsize=8)
                                plt.title('TIMEOUT RATIO VIDEO ')
                                params = {'legend.fontsize': 10,
                                          'legend.linewidth': 0, }
                                plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%d/%m/%Y'))
                                plt.gca().xaxis.set_major_locator(mdates.DayLocator())

                                # _____________________***AXE 1***________________________________________


                                x = [datetime.datetime.strptime(d, '%d/%m/%Y').date() for d in date]
                                y = nb_timeout_set
                                ax1.bar(x, y, color='grey', zorder=1)
                                ax1.set_ylabel('Nb Timeout', color='grey')
                                for tl in ax1.get_yticklabels():
                                    tl.set_color('grey')

                                # _____________________***AXE 2***________________________________________

                                ax2 = ax1.twinx()
                                x = [datetime.datetime.strptime(d, '%d/%m/%Y').date() for d in date]
                                y = timeout_set
                                ax2.plot(x, y, color='k', zorder=2)
                                plt.legend(loc='best')
                                ax2.set_xlabel('Jour')
                                ax2.set_ylabel('Taux Timeout %', color='k')
                                ax2.grid(True)
                                ax2.xaxis_date()
                                for t2 in ax2.get_yticklabels():
                                    t2.set_color('k')

                                    # ____________________________________________________________
                                    # ________________________________________________--___**_ FIN timeout RATIO VIDEO _**___--___________________________________________________

                            return date_video, nb_test_video_set, time_video_buffering_set, drop_video_set, nb_drop_video_set, timeout_set, nb_timeout_set
                            # ________________________________________________--___**_FIN MATPLOTLIB _**___--___________________________________________________

                        # USAGE
                        def usage_ul_dl(fichier_web, val1, val2, val3, val4, val5, tech):
                            print('\n  JE SUIS DANS USAGE  \n')
                            # print(val3)
                            # print('Tu es dans la fonction Succes et tu as VAL1: '+val1)
                            # print('Tu es dans la fonction Succes et tu as VAL2: '+val2)
                            # print(val1)
                            # print(val2)
                            # print(val3)
                            # print(val4)
                            # print(val5)
                            # print(tech)
                            # print(val3)
                            # print('Tu es dans la fonction Succes et tu as VAL1: '+val1)
                            # print('Tu es dans la fonction Succes et tu as VAL2: '+val2)
                            format_date_generale = "%Y-%m-%d"
                            date_debut = datetime.datetime.strptime(val1, format_date_generale)
                            date_fin = datetime.datetime.strptime(val2, format_date_generale)
                            succes = 0.0
                            success_set = []
                            success_taux = []
                            fichier_web = fichier_web
                            nb = 0.0
                            nb_set = []
                            date = []
                            csvfile = open(fichier_web, 'r')
                            # print(csvfile)
                            reader = csv.reader(csvfile)

                            b = ''
                            var_ajout = 0.0
                            variable = ''

                            # LISTES DES INFOS DES PAGES CONSULTES
                            global google_up
                            global google_down
                            global google_var_up
                            global google_var_down
                            global youtube_up
                            global youtube_down
                            global youtube_var_up
                            global youtube_var_down
                            global facebook_up
                            global facebook_down
                            global facebook_var_up
                            global facebook_var_down
                            global leboncoin_up
                            global leboncoin_down
                            global leboncoin_var_up
                            global leboncoin_var_down
                            global nb_google_up
                            global nb_google_down
                            global nb_youtube_up
                            global nb_youtube_down
                            global nb_facebook_up
                            global nb_facebook_down
                            global nb_leboncoin_up
                            global nb_leboncoin_down
                            global nb_google_up_set
                            global nb_google_down_set
                            global nb_youtube_up_set
                            global nb_youtube_down_set
                            global nb_facebook_up_set
                            global nb_facebook_down_set
                            global nb_leboncoin_up_set
                            global nb_leboncoin_down_set
                            global date_usage
                            date_usage = []

                            google_up = []
                            google_down = []
                            google_var_up = 0.0
                            google_var_down = 0.0

                            youtube_up = []
                            youtube_down = []
                            youtube_var_up = 0.0
                            youtube_var_down = 0.0

                            facebook_up = []
                            facebook_down = []
                            facebook_var_up = 0.0
                            facebook_var_down = 0.0

                            leboncoin_up = []
                            leboncoin_down = []
                            leboncoin_var_up = 0.0
                            leboncoin_var_down = 0.0

                            nb_google_up = 0.0
                            nb_google_down = 0.0
                            nb_youtube_up = 0.0
                            nb_youtube_down = 0.0
                            nb_facebook_up = 0.0
                            nb_facebook_down = 0.0
                            nb_leboncoin_up = 0.0
                            nb_leboncoin_down = 0.0

                            nb_google_up_set = []
                            nb_google_down_set = []
                            nb_youtube_up_set = []
                            nb_youtube_down_set = []
                            nb_facebook_up_set = []
                            nb_facebook_down_set = []
                            nb_leboncoin_up_set = []
                            nb_leboncoin_down_set = []

                            # rechercher SFR.FR
                            regex_sfr = re.compile(r".*(sfr\.fr).*", re.IGNORECASE)

                            # TEST FIN FICHIER
                            row_check = 0.0

                            for row in reader:
                                row_check = row_check + 1
                                # print(row_check)
                                f = row[1][0:10]
                                ci_usage = row[35]
                                lac_usage = row[36]
                                # if regex_sfr.search(row[175]):
                                # sfr_trouve=regex_sfr.search(row[175])
                                # print(sfr_trouve.group(1))

                                tecc = row[161]
                                if f == 'date_utc_a':
                                    continue
                                datef = datetime.datetime.strptime(f, "%Y-%m-%d")
                                if datef > date_fin:
                                    # print(datef)
                                    continue

                                if datef < date_debut:
                                    # print("je sors la 1")
                                    if nb_google_up == 0.0:
                                        google_up.append(0.0)
                                        nb_google_up_set.append(0.0)
                                    else:
                                        google_var_up = google_var_up / nb_google_up / 1000000
                                        google_up.append(google_var_up)
                                        nb_google_up_set.append(nb_google_up)
                                    if nb_google_down == 0.0:
                                        google_down.append(0.0)
                                        nb_google_down_set.append(0.0)
                                    else:
                                        google_var_down = google_var_down / nb_google_down / 1000000
                                        google_down.append(google_var_down)
                                        nb_google_down_set.append(nb_google_down)

                                    if nb_youtube_down == 0.0:
                                        nb_youtube_down_set.append(0.0)
                                        youtube_down.append(0.0)
                                    else:
                                        youtube_var_down = youtube_var_down / nb_youtube_down / 1000000
                                        youtube_down.append(youtube_var_down)
                                        nb_youtube_down_set.append(nb_youtube_down)
                                    if nb_youtube_up == 0.0:
                                        nb_youtube_up_set.append(0.0)
                                        youtube_up.append(0.0)
                                    else:
                                        youtube_var_up = youtube_var_up / nb_youtube_up / 1000000
                                        youtube_up.append(youtube_var_up)
                                        nb_youtube_up_set.append(nb_youtube_up)

                                    if nb_facebook_up == 0.0:
                                        nb_facebook_up_set.append(0.0)
                                        facebook_up.append(0.0)
                                    else:
                                        facebook_var_up = facebook_var_up / nb_facebook_up / 1000000
                                        facebook_up.append(facebook_var_up)
                                        nb_facebook_up_set.append(nb_facebook_up)
                                    if nb_facebook_down == 0.0:
                                        facebook_down.append(0.0)
                                        nb_facebook_down_set.append(0.0)
                                    else:
                                        facebook_var_down = facebook_var_down / nb_facebook_down / 1000000
                                        facebook_down.append(facebook_var_down)
                                        nb_facebook_down_set.append(nb_facebook_down)

                                    if nb_leboncoin_up == 0.0:
                                        leboncoin_up.append(0.0)
                                        nb_leboncoin_up_set.append(0.0)
                                    else:
                                        leboncoin_var_up = leboncoin_var_up / leboncoin_var_up / 1000000
                                        leboncoin_up.append(leboncoin_var_up)
                                        nb_leboncoin_up_set.append(nb_leboncoin_up)
                                    if nb_leboncoin_down == 0.0:
                                        leboncoin_down.append(0.0)
                                        nb_leboncoin_down_set.append(0.0)
                                    else:
                                        leboncoin_var_down = leboncoin_var_down / nb_leboncoin_down / 1000000
                                        leboncoin_down.append(leboncoin_var_down)
                                        nb_leboncoin_down_set.append(nb_leboncoin_down)
                                    break

                                """
                                                   if row_check==val4:
                                                       #print("je sors la 2")
                                                       if nb_google_up == 0.0:
                                                           google_up.append(0.0)
                                                           nb_google_up_set.append(0.0)
                                                       else:
                                                           google_var_up = google_var_up / nb_google_up/1000000
                                                           google_up.append(google_var_up)
                                                           nb_google_up_set.append(nb_google_up)
                                                       if nb_google_down == 0.0:
                                                           google_down.append(0.0)
                                                           nb_google_down_set.append(0.0)
                                                       else:
                                                           google_var_down = google_var_down / nb_google_down/1000000
                                                           google_down.append(google_var_down)
                                                           nb_google_down_set.append(nb_google_down)

                                                       if nb_youtube_down == 0.0:
                                                           nb_youtube_down_set.append(0.0)
                                                           youtube_down.append(0.0)
                                                       else:
                                                           youtube_var_down = youtube_var_down / nb_youtube_down/1000000
                                                           youtube_down.append(youtube_var_down)
                                                           nb_youtube_down_set.append(nb_youtube_down)
                                                       if nb_youtube_up == 0.0:
                                                           nb_youtube_up_set.append(0.0)
                                                           youtube_up.append(0.0)
                                                       else:
                                                           youtube_var_up = youtube_var_up / nb_youtube_up/1000000
                                                           youtube_up.append(youtube_var_up)
                                                           nb_youtube_up_set.append(nb_youtube_up)

                                                       if nb_facebook_up == 0.0:
                                                           nb_facebook_up_set.append(0.0)
                                                           facebook_up.append(0.0)
                                                       else:
                                                           facebook_var_up = facebook_var_up / nb_facebook_up/1000000
                                                           facebook_up.append(facebook_var_up)
                                                           nb_facebook_up_set.append(nb_facebook_up)
                                                       if nb_facebook_down == 0.0:
                                                           facebook_down.append(0.0)
                                                           nb_facebook_down_set.append(0.0)
                                                       else:
                                                           facebook_var_down = facebook_var_down / nb_facebook_down/1000000
                                                           facebook_down.append(facebook_var_down)
                                                           nb_facebook_down_set.append(nb_facebook_down)

                                                       if nb_leboncoin_up == 0.0:
                                                           leboncoin_up.append(0.0)
                                                           nb_leboncoin_up_set.append(0.0)
                                                       else:
                                                           leboncoin_var_up = leboncoin_var_up / leboncoin_var_up/1000000
                                                           leboncoin_up.append(leboncoin_var_up)
                                                           nb_leboncoin_up_set.append(nb_leboncoin_up)
                                                       if nb_leboncoin_down == 0.0:
                                                           leboncoin_down.append(0.0)
                                                           nb_leboncoin_down_set.append(0.0)
                                                       else:
                                                           leboncoin_var_down = leboncoin_var_down / nb_leboncoin_down/1000000
                                                           leboncoin_down.append(leboncoin_var_down)
                                                           nb_leboncoin_down_set.append(nb_leboncoin_down)
                                                       break
                                                   """

                                row[165] = '_'.join(row[165].split(" "))

                                if str(row[159]) == 'SFR' and str(row[165]) in val3 and row[164] in val5 and tecc in tech:

                                    variable = val2

                                    if b != str(f):

                                        # Graphes independants

                                        date.append(str(f))
                                        b = str(f)
                                        # a chaque nouvelle date je met le nombre de succes a 0 ainsi que le nombre total succes et autres inclus
                                        if var_ajout > 0:
                                            if nb_google_up == 0.0:
                                                google_up.append(0.0)
                                                nb_google_up_set.append(0.0)
                                            else:
                                                google_var_up = google_var_up / nb_google_up / 1000000
                                                google_up.append(google_var_up)
                                                nb_google_up_set.append(nb_google_up)
                                            if nb_google_down == 0.0:
                                                google_down.append(0.0)
                                                nb_google_down_set.append(0.0)
                                            else:
                                                google_var_down = google_var_down / nb_google_down / 1000000
                                                google_down.append(google_var_down)
                                                nb_google_down_set.append(nb_google_down)

                                            if nb_youtube_down == 0.0:
                                                nb_youtube_down_set.append(0.0)
                                                youtube_down.append(0.0)
                                            else:
                                                youtube_var_down = youtube_var_down / nb_youtube_down / 1000000
                                                youtube_down.append(youtube_var_down)
                                                nb_youtube_down_set.append(nb_youtube_down)
                                            if nb_youtube_up == 0.0:
                                                nb_youtube_up_set.append(0.0)
                                                youtube_up.append(0.0)
                                            else:
                                                youtube_var_up = youtube_var_up / nb_youtube_up / 1000000
                                                youtube_up.append(youtube_var_up)
                                                nb_youtube_up_set.append(nb_youtube_up)

                                            if nb_facebook_up == 0.0:
                                                nb_facebook_up_set.append(0.0)
                                                facebook_up.append(0.0)
                                            else:
                                                facebook_var_up = facebook_var_up / nb_facebook_up / 1000000
                                                facebook_up.append(facebook_var_up)
                                                nb_facebook_up_set.append(nb_facebook_up)
                                            if nb_facebook_down == 0.0:
                                                facebook_down.append(0.0)
                                                nb_facebook_down_set.append(0.0)
                                            else:
                                                facebook_var_down = facebook_var_down / nb_facebook_down / 1000000
                                                facebook_down.append(facebook_var_down)
                                                nb_facebook_down_set.append(nb_facebook_down)

                                            if nb_leboncoin_up == 0.0:
                                                leboncoin_up.append(0.0)
                                                nb_leboncoin_up_set.append(0.0)
                                            else:
                                                leboncoin_var_up = leboncoin_var_up / leboncoin_var_up / 1000000
                                                leboncoin_up.append(leboncoin_var_up)
                                                nb_leboncoin_up_set.append(nb_leboncoin_up)
                                            if nb_leboncoin_down == 0.0:
                                                leboncoin_down.append(0.0)
                                                nb_leboncoin_down_set.append(0.0)
                                            else:
                                                leboncoin_var_down = leboncoin_var_down / nb_leboncoin_down / 1000000
                                                leboncoin_down.append(leboncoin_var_down)
                                                nb_leboncoin_down_set.append(nb_leboncoin_down)
                                            var_ajout = var_ajout + 1

                                            nb_google_up = 0.0
                                            nb_google_down = 0.0
                                            nb_youtube_up = 0.0
                                            nb_youtube_down = 0.0
                                            nb_facebook_up = 0.0
                                            nb_facebook_down = 0.0
                                            nb_leboncoin_up = 0.0
                                            nb_leboncoin_down = 0.0

                                            google_var_up = 0.0
                                            google_var_down = 0.0
                                            youtube_var_up = 0.0
                                            youtube_var_down = 0.0
                                            facebook_var_up = 0.0
                                            facebook_var_down = 0.0
                                            leboncoin_var_up = 0.0
                                            leboncoin_var_down = 0.0

                                        var_ajout = var_ajout + 1

                                        # GOOGLE
                                        if str(row[148]) == 'Group ID: com.google':
                                            # UPLOAD
                                            if float(row[152]) != 0 or row[152] != 'NULL':
                                                google_var_up = google_var_up + float(row[152])
                                                nb_google_up = nb_google_up + 1
                                            # DOWNLOAD
                                            if float(row[153]) != 0 or row[153] != 'NULL':
                                                google_var_down = google_var_down + float(row[153])
                                                nb_google_down = nb_google_down + 1
                                            var_ajout = var_ajout + 1
                                            continue

                                        # YOUTUBE
                                        if str(row[148]) == 'YouTube':
                                            # UPLOAD
                                            if float(row[152]) != 0 or row[152] != 'NULL':
                                                youtube_var_up = youtube_var_up + float(row[152])
                                                nb_youtube_up = nb_youtube_up + 1
                                            # DOWNLOAD
                                            if float(row[153]) != 0 or row[153] != 'NULL':
                                                youtube_var_down = youtube_var_down + float(row[153])
                                                nb_youtube_down = nb_youtube_down + 1
                                            var_ajout = var_ajout + 1
                                            continue

                                        # FACEBOOK
                                        if str(row[148]) == 'com.facebook.appmanager' or str(
                                                row[148]) == 'Facebook App Manager' or str(row[148]) == 'Facebook':
                                            # UPLOAD
                                            if float(row[152]) != 0 or row[152] != 'NULL':
                                                facebook_var_up = facebook_var_up + float(row[152])
                                                nb_facebook_up = nb_facebook_up + 1
                                            # DOWNLOAD
                                            if float(row[153]) != 0 or row[153] != 'NULL':
                                                facebook_var_down = facebook_var_down + float(row[153])
                                                nb_facebook_down = nb_facebook_down + 1
                                            var_ajout = var_ajout + 1
                                            continue

                                        # LEBONCOIN
                                        if str(row[148]) == 'Leboncoin':
                                            # UPLOAD
                                            if float(row[152]) != 0 or row[152] != 'NULL':
                                                leboncoin_var_up = leboncoin_var_up + float(row[152])
                                                nb_leboncoin_up = nb_leboncoin_up + 1
                                                # DOWNLOAD
                                            if float(row[153]) != 0 or row[153] != 'NULL':
                                                leboncoin_var_down = leboncoin_var_down + float(row[153])
                                                nb_leboncoin_down = nb_leboncoin_down + 1
                                            var_ajout = var_ajout + 1
                                            continue

                                    else:
                                        # GOOGLE
                                        if str(row[148]) == 'Group ID: com.google':
                                            # UPLOAD
                                            if float(row[152]) != 0 or row[152] != 'NULL':
                                                google_var_up = google_var_up + float(row[152])
                                                nb_google_up = nb_google_up + 1
                                            # DOWNLOAD
                                            if float(row[153]) != 0 or row[153] != 'NULL':
                                                google_var_down = google_var_down + float(row[153])
                                                nb_google_down = nb_google_down + 1
                                            var_ajout = var_ajout + 1
                                            continue

                                        # YOUTUBE
                                        if str(row[148]) == 'YouTube':
                                            # UPLOAD
                                            if float(row[152]) != 0 or row[152] != 'NULL':
                                                youtube_var_up = youtube_var_up + float(row[152])
                                                nb_youtube_up = nb_youtube_up + 1
                                            # DOWNLOAD
                                            if float(row[153]) != 0 or row[153] != 'NULL':
                                                youtube_var_down = youtube_var_down + float(row[153])
                                                nb_youtube_down = nb_youtube_down + 1
                                            var_ajout = var_ajout + 1
                                            continue

                                        # FACEBOOK
                                        if str(row[148]) == 'com.facebook.appmanager' or str(
                                                row[148]) == 'Facebook App Manager' or str(row[148]) == 'Facebook':
                                            # UPLOAD
                                            if float(row[152]) != 0 or row[152] != 'NULL':
                                                facebook_var_up = facebook_var_up + float(row[152])
                                                nb_facebook_up = nb_facebook_up + 1
                                            # DOWNLOAD
                                            if float(row[153]) != 0 or row[153] != 'NULL':
                                                facebook_var_down = facebook_var_down + float(row[153])
                                                nb_facebook_down = nb_facebook_down + 1
                                            var_ajout = var_ajout + 1
                                            continue

                                        # LEBONCOIN
                                        if str(row[148]) == 'Leboncoin':
                                            # UPLOAD
                                            if float(row[152]) != 0 or row[152] != 'NULL':
                                                leboncoin_var_up = leboncoin_var_up + float(row[152])
                                                nb_leboncoin_up = nb_leboncoin_up + 1
                                                # DOWNLOAD
                                            if float(row[153]) != 0 or row[153] != 'NULL':
                                                leboncoin_var_down = leboncoin_var_down + float(row[153])
                                                nb_leboncoin_down = nb_leboncoin_down + 1
                                            var_ajout = var_ajout + 1
                                            continue
                                    var_ajout = var_ajout + 1

                            if datef >= date_debut:
                                # print("je sors la 1")
                                if nb_google_up == 0.0:
                                    google_up.append(0.0)
                                    nb_google_up_set.append(0.0)
                                else:
                                    google_var_up = google_var_up / nb_google_up / 1000000
                                    google_up.append(google_var_up)
                                    nb_google_up_set.append(nb_google_up)
                                if nb_google_down == 0.0:
                                    google_down.append(0.0)
                                    nb_google_down_set.append(0.0)
                                else:
                                    google_var_down = google_var_down / nb_google_down / 1000000
                                    google_down.append(google_var_down)
                                    nb_google_down_set.append(nb_google_down)

                                if nb_youtube_down == 0.0:
                                    nb_youtube_down_set.append(0.0)
                                    youtube_down.append(0.0)
                                else:
                                    youtube_var_down = youtube_var_down / nb_youtube_down / 1000000
                                    youtube_down.append(youtube_var_down)
                                    nb_youtube_down_set.append(nb_youtube_down)
                                if nb_youtube_up == 0.0:
                                    nb_youtube_up_set.append(0.0)
                                    youtube_up.append(0.0)
                                else:
                                    youtube_var_up = youtube_var_up / nb_youtube_up / 1000000
                                    youtube_up.append(youtube_var_up)
                                    nb_youtube_up_set.append(nb_youtube_up)

                                if nb_facebook_up == 0.0:
                                    nb_facebook_up_set.append(0.0)
                                    facebook_up.append(0.0)
                                else:
                                    facebook_var_up = facebook_var_up / nb_facebook_up / 1000000
                                    facebook_up.append(facebook_var_up)
                                    nb_facebook_up_set.append(nb_facebook_up)
                                if nb_facebook_down == 0.0:
                                    facebook_down.append(0.0)
                                    nb_facebook_down_set.append(0.0)
                                else:
                                    facebook_var_down = facebook_var_down / nb_facebook_down / 1000000
                                    facebook_down.append(facebook_var_down)
                                    nb_facebook_down_set.append(nb_facebook_down)

                                if nb_leboncoin_up == 0.0:
                                    leboncoin_up.append(0.0)
                                    nb_leboncoin_up_set.append(0.0)
                                else:
                                    leboncoin_var_up = leboncoin_var_up / leboncoin_var_up / 1000000
                                    leboncoin_up.append(leboncoin_var_up)
                                    nb_leboncoin_up_set.append(nb_leboncoin_up)
                                if nb_leboncoin_down == 0.0:
                                    leboncoin_down.append(0.0)
                                    nb_leboncoin_down_set.append(0.0)
                                else:
                                    leboncoin_var_down = leboncoin_var_down / nb_leboncoin_down / 1000000
                                    leboncoin_down.append(leboncoin_var_down)
                                    nb_leboncoin_down_set.append(nb_leboncoin_down)

                            date.reverse()
                            google_up.reverse()
                            google_down.reverse()
                            youtube_up.reverse()
                            youtube_down.reverse()
                            facebook_up.reverse()
                            facebook_down.reverse()
                            leboncoin_up.reverse()
                            leboncoin_down.reverse()
                            nb_google_up_set.reverse()
                            nb_google_down_set.reverse()
                            nb_youtube_up_set.reverse()
                            nb_youtube_down_set.reverse()
                            nb_facebook_up_set.reverse()
                            nb_facebook_down_set.reverse()
                            nb_leboncoin_up_set.reverse()
                            nb_leboncoin_down_set.reverse()
                            date_usage = date

                            if len(date) > 0:
                                # GOOGLE_________UP
                                # _____________________***PARAMS***________________________________________

                                ax1 = plt.subplot2grid((22, 9), (14, 0), colspan=4)
                                plt.xticks(rotation='vertical', fontsize=8)
                                plt.title('GOOGLE UL MEASUREMENT (MByte)' + date[0] + ' au ' + date[len(date) - 1])
                                params = {'legend.fontsize': 10,
                                          'legend.linewidth': 0, }
                                plt.gca().xaxis.set_major_formatter(mdates.DateFormatter("%Y-%m-%d"))
                                plt.gca().xaxis.set_major_locator(mdates.DayLocator())

                                # _____________________***AXE 1***________________________________________


                                x = [datetime.datetime.strptime(d, "%Y-%m-%d").date() for d in date]
                                y = nb_google_up_set
                                ax1.bar(x, y, color='#4885ed', zorder=1)
                                ax1.set_ylabel('Nb UL Usage', color='#4885ed')
                                for tl in ax1.get_yticklabels():
                                    tl.set_color('#4885ed')

                                    # _____________________***AXE 2***________________________________________

                                ax2 = ax1.twinx()
                                x = [datetime.datetime.strptime(d, "%Y-%m-%d").date() for d in date]
                                y = google_up
                                ax2.plot(x, y, color='#db3236', zorder=2)
                                plt.legend(loc='best')
                                ax2.set_xlabel('Jour')
                                ax2.set_ylabel('Moy DL (MByte)', color='#db3236')
                                ax2.grid(True)
                                ax2.xaxis_date()
                                for t2 in ax2.get_yticklabels():
                                    t2.set_color('#db3236')

                                # GOOGLE_________DOWN
                                # _____________________***PARAMS***________________________________________

                                ax1 = plt.subplot2grid((22, 9), (14, 5), colspan=4)
                                plt.xticks(rotation='vertical', fontsize=8)
                                plt.title('GOOGLE DL MEASUREMENT (MByte)' + date[0] + ' au ' + date[len(date) - 1])
                                params = {'legend.fontsize': 10,
                                          'legend.linewidth': 0, }
                                plt.gca().xaxis.set_major_formatter(mdates.DateFormatter(format_date_generale))
                                plt.gca().xaxis.set_major_locator(mdates.DayLocator())

                                # _____________________***AXE 1***________________________________________


                                x = [datetime.datetime.strptime(d, format_date_generale).date() for d in date]
                                y = nb_google_down_set
                                ax1.bar(x, y, color='#4885ed', zorder=1)
                                ax1.set_ylabel('Nb DL Usage', color='#4885ed')
                                for tl in ax1.get_yticklabels():
                                    tl.set_color('#4885ed')

                                    # _____________________***AXE 2***________________________________________

                                ax2 = ax1.twinx()
                                x = [datetime.datetime.strptime(d, '%Y-%m-%d').date() for d in date]
                                y = google_down
                                ax2.plot(x, y, color='#db3236', zorder=2)
                                plt.legend(loc='best')
                                ax2.set_xlabel('Jour')
                                ax2.set_ylabel('Moy DL (MByte)', color='#db3236')
                                ax2.grid(True)
                                ax2.xaxis_date()
                                for t2 in ax2.get_yticklabels():
                                    t2.set_color('#db3236')

                                    # ________________________________________________--___**_YOUTUBE _**___--___________________________________________________
                                # YOUTUBE_________UP
                                # _____________________***PARAMS***________________________________________

                                ax1 = plt.subplot2grid((22, 9), (16, 0), colspan=4)
                                plt.xticks(rotation='vertical', fontsize=8)
                                plt.title('YOUTUBE UL MEASUREMENT (MByte)' + date[0] + ' au ' + date[len(date) - 1])
                                params = {'legend.fontsize': 10,
                                          'legend.linewidth': 0, }
                                plt.gca().xaxis.set_major_formatter(mdates.DateFormatter("%Y-%m-%d"))
                                plt.gca().xaxis.set_major_locator(mdates.DayLocator())

                                # _____________________***AXE 1***________________________________________


                                x = [datetime.datetime.strptime(d, "%Y-%m-%d").date() for d in date]
                                y = nb_youtube_up_set
                                ax1.bar(x, y, color='#b31217', zorder=1)
                                ax1.set_ylabel('Nb UL Usage', color='#b31217')
                                for tl in ax1.get_yticklabels():
                                    tl.set_color('#b31217')

                                    # _____________________***AXE 2***________________________________________

                                ax2 = ax1.twinx()
                                x = [datetime.datetime.strptime(d, "%Y-%m-%d").date() for d in date]
                                y = youtube_up
                                ax2.plot(x, y, color='black', zorder=2)
                                plt.legend(loc='best')
                                ax2.set_xlabel('Jour')
                                ax2.set_ylabel('Moy UL (MByte)', color='black')
                                ax2.grid(True)
                                ax2.xaxis_date()
                                for t2 in ax2.get_yticklabels():
                                    t2.set_color('black')

                                # YOUTUBE_________DOWN
                                # _____________________***PARAMS***________________________________________

                                ax1 = plt.subplot2grid((22, 9), (16, 5), colspan=4)
                                plt.xticks(rotation='vertical', fontsize=8)
                                plt.title('YOUTUBE DL MEASUREMENT (MByte)' + date[0] + ' au ' + date[len(date) - 1])
                                params = {'legend.fontsize': 10,
                                          'legend.linewidth': 0, }
                                plt.gca().xaxis.set_major_formatter(mdates.DateFormatter("%Y-%m-%d"))
                                plt.gca().xaxis.set_major_locator(mdates.DayLocator())

                                # _____________________***AXE 1***________________________________________


                                x = [datetime.datetime.strptime(d, "%Y-%m-%d").date() for d in date]
                                y = nb_youtube_down_set
                                ax1.bar(x, y, color='#b31217', zorder=1)
                                ax1.set_ylabel('Nb DL Usage', color='#b31217')
                                for tl in ax1.get_yticklabels():
                                    tl.set_color('#b31217')

                                    # _____________________***AXE 2***________________________________________

                                ax2 = ax1.twinx()
                                x = [datetime.datetime.strptime(d, "%Y-%m-%d").date() for d in date]
                                y = youtube_down
                                ax2.plot(x, y, color='black', zorder=2)
                                plt.legend(loc='best')
                                ax2.set_xlabel('Jour')
                                ax2.set_ylabel('Moy DL (MByte)', color='black')
                                ax2.grid(True)
                                ax2.xaxis_date()
                                for t2 in ax2.get_yticklabels():
                                    t2.set_color('black')

                                # ________________________________________________--___**_FACEBOOK _**___--___________________________________________________
                                # FACEBOOK_________UP
                                # _____________________***PARAMS***________________________________________

                                ax1 = plt.subplot2grid((22, 9), (18, 0), colspan=4)
                                plt.xticks(rotation='vertical', fontsize=8)
                                plt.title('Facebook UL MEASUREMENT (MByte)' + date[0] + ' au ' + date[len(date) - 1])
                                params = {'legend.fontsize': 10,
                                          'legend.linewidth': 0, }
                                plt.gca().xaxis.set_major_formatter(mdates.DateFormatter("%Y-%m-%d"))
                                plt.gca().xaxis.set_major_locator(mdates.DayLocator())

                                # _____________________***AXE 1***________________________________________


                                x = [datetime.datetime.strptime(d, "%Y-%m-%d").date() for d in date]
                                y = nb_facebook_up_set
                                ax1.bar(x, y, color='#3b5998', zorder=1)
                                ax1.set_ylabel('Nb UL Usage', color='#3b5998')
                                for tl in ax1.get_yticklabels():
                                    tl.set_color('#3b5998')

                                    # _____________________***AXE 2***________________________________________

                                ax2 = ax1.twinx()
                                x = [datetime.datetime.strptime(d, "%Y-%m-%d").date() for d in date]
                                y = facebook_up
                                ax2.plot(x, y, color='#8b9dc3', zorder=2)
                                plt.legend(loc='best')
                                ax2.set_xlabel('Jour')
                                ax2.set_ylabel('Moy UL (MByte)', color='#8b9dc3')
                                ax2.grid(True)
                                ax2.xaxis_date()
                                for t2 in ax2.get_yticklabels():
                                    t2.set_color('#8b9dc3')

                                # FACEBOOK_________DOWN
                                # _____________________***PARAMS***________________________________________

                                ax1 = plt.subplot2grid((22, 9), (18, 5), colspan=4)
                                plt.xticks(rotation='vertical', fontsize=8)
                                plt.title('Facebook DL MEASUREMENT (MByte)' + date[0] + ' au ' + date[len(date) - 1])
                                params = {'legend.fontsize': 10,
                                          'legend.linewidth': 0, }
                                plt.gca().xaxis.set_major_formatter(mdates.DateFormatter("%Y-%m-%d"))
                                plt.gca().xaxis.set_major_locator(mdates.DayLocator())

                                # _____________________***AXE 1***________________________________________


                                x = [datetime.datetime.strptime(d, "%Y-%m-%d").date() for d in date]
                                y = nb_facebook_down_set
                                ax1.bar(x, y, color='#3b5998', zorder=1)
                                ax1.set_ylabel('Nb DL Usage', color='#3b5998')
                                for tl in ax1.get_yticklabels():
                                    tl.set_color('#3b5998')

                                    # _____________________***AXE 2***________________________________________

                                ax2 = ax1.twinx()
                                x = [datetime.datetime.strptime(d, "%Y-%m-%d").date() for d in date]
                                y = facebook_down
                                ax2.plot(x, y, color='#8b9dc3', zorder=2)
                                plt.legend(loc='best')
                                ax2.set_xlabel('Jour')
                                ax2.set_ylabel('Moy DL (MByte)', color='#8b9dc3')
                                ax2.grid(True)
                                ax2.xaxis_date()
                                for t2 in ax2.get_yticklabels():
                                    t2.set_color('#8b9dc3')

                                # ________________________________________________--___**LEBONCOIN _**___--___________________________________________________
                                # LEBONCOIN_________UP
                                # _____________________***PARAMS***________________________________________

                                ax1 = plt.subplot2grid((22, 9), (20, 0), colspan=4)
                                plt.xticks(rotation='vertical', fontsize=8)
                                plt.title('Leboncoin UL MEASUREMENT (MByte)' + date[0] + ' au ' + date[len(date) - 1])
                                params = {'legend.fontsize': 10,
                                          'legend.linewidth': 0, }
                                plt.gca().xaxis.set_major_formatter(mdates.DateFormatter("%Y-%m-%d"))
                                plt.gca().xaxis.set_major_locator(mdates.DayLocator())

                                # _____________________***AXE 1***________________________________________


                                x = [datetime.datetime.strptime(d, "%Y-%m-%d").date() for d in date]
                                y = nb_leboncoin_up_set
                                ax1.bar(x, y, color='#D97114', zorder=1)
                                ax1.set_ylabel('Nb UL Usage', color='#D97114')
                                for tl in ax1.get_yticklabels():
                                    tl.set_color('#D97114')

                                    # _____________________***AXE 2***________________________________________

                                ax2 = ax1.twinx()
                                x = [datetime.datetime.strptime(d, "%Y-%m-%d").date() for d in date]
                                y = leboncoin_up
                                ax2.plot(x, y, color='black', zorder=2)
                                plt.legend(loc='best')
                                ax2.set_xlabel('Jour')
                                ax2.set_ylabel('Moy UL (MByte)', color='black')
                                ax2.grid(True)
                                ax2.xaxis_date()
                                for t2 in ax2.get_yticklabels():
                                    t2.set_color('black')

                                # LEBONCOIN_________DOWN
                                # _____________________***PARAMS***________________________________________

                                ax1 = plt.subplot2grid((22, 9), (20, 5), colspan=4)
                                plt.xticks(rotation='vertical', fontsize=8)
                                plt.title('Leboncoin DL MEASUREMENT (MByte)' + date[0] + ' au ' + date[len(date) - 1])
                                params = {'legend.fontsize': 10,
                                          'legend.linewidth': 0, }
                                plt.gca().xaxis.set_major_formatter(mdates.DateFormatter("%Y-%m-%d"))
                                plt.gca().xaxis.set_major_locator(mdates.DayLocator())

                                # _____________________***AXE 1***________________________________________


                                x = [datetime.datetime.strptime(d, "%Y-%m-%d").date() for d in date]
                                y = nb_leboncoin_down_set
                                ax1.bar(x, y, color='#D97114', zorder=1)
                                ax1.set_ylabel('Nb DL Usage', color='#D97114')
                                for tl in ax1.get_yticklabels():
                                    tl.set_color('#D97114')

                                    # _____________________***AXE 2***________________________________________

                                ax2 = ax1.twinx()
                                x = [datetime.datetime.strptime(d, "%Y-%m-%d").date() for d in date]
                                y = leboncoin_down
                                ax2.plot(x, y, color='black', zorder=2)
                                plt.legend(loc='best')
                                ax2.set_xlabel('Jour')
                                ax2.set_ylabel('Moy DL (MByte)', color='black')
                                ax2.grid(True)
                                ax2.xaxis_date()
                                for t2 in ax2.get_yticklabels():
                                    t2.set_color('black')

                            else:
                                date = ['2017-04-05']
                                google_up = [0]
                                google_down = [0]
                                youtube_up = [0]
                                youtube_down = [0]
                                facebook_up = [0]
                                facebook_down = [0]
                                leboncoin_up = [0]
                                leboncoin_down = [0]
                                nb_google_up_set = [0]
                                nb_google_down_set = [0]
                                nb_youtube_up_set = [0]
                                nb_youtube_down_set = [0]
                                nb_facebook_up_set = [0]
                                nb_facebook_down_set = [0]
                                nb_leboncoin_up_set = [0]
                                nb_leboncoin_down_set = [0]

                                # GOOGLE_________UP
                                # _____________________***PARAMS***________________________________________

                                ax1 = plt.subplot2grid((22, 9), (14, 0), colspan=4)
                                plt.xticks(rotation='vertical', fontsize=8)
                                plt.title('GOOGLE UL MEASUREMENT (MByte)')
                                params = {'legend.fontsize': 10,
                                          'legend.linewidth': 0, }
                                plt.gca().xaxis.set_major_formatter(mdates.DateFormatter("%Y-%m-%d"))
                                plt.gca().xaxis.set_major_locator(mdates.DayLocator())

                                # _____________________***AXE 1***________________________________________


                                x = [datetime.datetime.strptime(d, "%Y-%m-%d").date() for d in date]
                                y = nb_google_up_set
                                ax1.bar(x, y, color='#4885ed', zorder=1)
                                ax1.set_ylabel('Nb UL Usage', color='#4885ed')
                                for tl in ax1.get_yticklabels():
                                    tl.set_color('#4885ed')

                                    # _____________________***AXE 2***________________________________________

                                ax2 = ax1.twinx()
                                x = [datetime.datetime.strptime(d, "%Y-%m-%d").date() for d in date]
                                y = google_up
                                ax2.plot(x, y, color='#db3236', zorder=2)
                                plt.legend(loc='best')
                                ax2.set_xlabel('Jour')
                                ax2.set_ylabel('Moy DL (MByte)', color='#db3236')
                                ax2.grid(True)
                                ax2.xaxis_date()
                                for t2 in ax2.get_yticklabels():
                                    t2.set_color('#db3236')

                                # GOOGLE_________DOWN
                                # _____________________***PARAMS***________________________________________

                                ax1 = plt.subplot2grid((22, 9), (14, 5), colspan=4)
                                plt.xticks(rotation='vertical', fontsize=8)
                                plt.title('GOOGLE DL MEASUREMENT (MByte)')
                                params = {'legend.fontsize': 10,
                                          'legend.linewidth': 0, }
                                plt.gca().xaxis.set_major_formatter(mdates.DateFormatter(format_date_generale))
                                plt.gca().xaxis.set_major_locator(mdates.DayLocator())

                                # _____________________***AXE 1***________________________________________


                                x = [datetime.datetime.strptime(d, "%Y-%m-%d").date() for d in date]
                                y = nb_google_down_set
                                ax1.bar(x, y, color='#4885ed', zorder=1)
                                ax1.set_ylabel('Nb DL Usage', color='#4885ed')
                                for tl in ax1.get_yticklabels():
                                    tl.set_color('#4885ed')

                                    # _____________________***AXE 2***________________________________________

                                ax2 = ax1.twinx()
                                x = [datetime.datetime.strptime(d, '%Y-%m-%d').date() for d in date]
                                y = google_down
                                ax2.plot(x, y, color='#db3236', zorder=2)
                                plt.legend(loc='best')
                                ax2.set_xlabel('Jour')
                                ax2.set_ylabel('Moy DL (MByte)', color='#db3236')
                                ax2.grid(True)
                                ax2.xaxis_date()
                                for t2 in ax2.get_yticklabels():
                                    t2.set_color('#db3236')

                                    # ________________________________________________--___**_YOUTUBE _**___--___________________________________________________
                                # YOUTUBE_________UP
                                # _____________________***PARAMS***________________________________________

                                ax1 = plt.subplot2grid((22, 9), (16, 0), colspan=4)
                                plt.xticks(rotation='vertical', fontsize=8)
                                plt.title('YOUTUBE UL MEASUREMENT (MByte)')
                                params = {'legend.fontsize': 10,
                                          'legend.linewidth': 0, }
                                plt.gca().xaxis.set_major_formatter(mdates.DateFormatter("%Y-%m-%d"))
                                plt.gca().xaxis.set_major_locator(mdates.DayLocator())

                                # _____________________***AXE 1***________________________________________


                                x = [datetime.datetime.strptime(d, "%Y-%m-%d").date() for d in date]
                                y = nb_youtube_up_set
                                ax1.bar(x, y, color='#b31217', zorder=1)
                                ax1.set_ylabel('Nb UL Usage', color='#b31217')
                                for tl in ax1.get_yticklabels():
                                    tl.set_color('#b31217')

                                    # _____________________***AXE 2***________________________________________

                                ax2 = ax1.twinx()
                                x = [datetime.datetime.strptime(d, "%Y-%m-%d").date() for d in date]
                                y = youtube_up
                                ax2.plot(x, y, color='black', zorder=2)
                                plt.legend(loc='best')
                                ax2.set_xlabel('Jour')
                                ax2.set_ylabel('Moy UL (MByte)', color='black')
                                ax2.grid(True)
                                ax2.xaxis_date()
                                for t2 in ax2.get_yticklabels():
                                    t2.set_color('black')

                                # YOUTUBE_________DOWN
                                # _____________________***PARAMS***________________________________________

                                ax1 = plt.subplot2grid((22, 9), (16, 5), colspan=4)
                                plt.xticks(rotation='vertical', fontsize=8)
                                plt.title('YOUTUBE DL MEASUREMENT (MByte)')
                                params = {'legend.fontsize': 10,
                                          'legend.linewidth': 0, }
                                plt.gca().xaxis.set_major_formatter(mdates.DateFormatter("%Y-%m-%d"))
                                plt.gca().xaxis.set_major_locator(mdates.DayLocator())

                                # _____________________***AXE 1***________________________________________


                                x = [datetime.datetime.strptime(d, "%Y-%m-%d").date() for d in date]
                                y = nb_youtube_down_set
                                ax1.bar(x, y, color='#b31217', zorder=1)
                                ax1.set_ylabel('Nb DL Usage', color='#b31217')
                                for tl in ax1.get_yticklabels():
                                    tl.set_color('#b31217')

                                    # _____________________***AXE 2***________________________________________

                                ax2 = ax1.twinx()
                                x = [datetime.datetime.strptime(d, "%Y-%m-%d").date() for d in date]
                                y = youtube_down
                                ax2.plot(x, y, color='black', zorder=2)
                                plt.legend(loc='best')
                                ax2.set_xlabel('Jour')
                                ax2.set_ylabel('Moy DL (MByte)', color='black')
                                ax2.grid(True)
                                ax2.xaxis_date()
                                for t2 in ax2.get_yticklabels():
                                    t2.set_color('black')

                                # ________________________________________________--___**_FACEBOOK _**___--___________________________________________________
                                # FACEBOOK_________UP
                                # _____________________***PARAMS***________________________________________

                                ax1 = plt.subplot2grid((22, 9), (18, 0), colspan=4)
                                plt.xticks(rotation='vertical', fontsize=8)
                                plt.title('Facebook UL MEASUREMENT (MByte)')
                                params = {'legend.fontsize': 10,
                                          'legend.linewidth': 0, }
                                plt.gca().xaxis.set_major_formatter(mdates.DateFormatter("%Y-%m-%d"))
                                plt.gca().xaxis.set_major_locator(mdates.DayLocator())

                                # _____________________***AXE 1***________________________________________


                                x = [datetime.datetime.strptime(d, "%Y-%m-%d").date() for d in date]
                                y = nb_facebook_up_set
                                ax1.bar(x, y, color='#3b5998', zorder=1)
                                ax1.set_ylabel('Nb UL Usage', color='#3b5998')
                                for tl in ax1.get_yticklabels():
                                    tl.set_color('#3b5998')

                                    # _____________________***AXE 2***________________________________________

                                ax2 = ax1.twinx()
                                x = [datetime.datetime.strptime(d, "%Y-%m-%d").date() for d in date]
                                y = facebook_up
                                ax2.plot(x, y, color='#8b9dc3', zorder=2)
                                plt.legend(loc='best')
                                ax2.set_xlabel('Jour')
                                ax2.set_ylabel('Moy UL (MByte)', color='#8b9dc3')
                                ax2.grid(True)
                                ax2.xaxis_date()
                                for t2 in ax2.get_yticklabels():
                                    t2.set_color('#8b9dc3')

                                # FACEBOOK_________DOWN
                                # _____________________***PARAMS***________________________________________

                                ax1 = plt.subplot2grid((22, 9), (18, 5), colspan=4)
                                plt.xticks(rotation='vertical', fontsize=8)
                                plt.title('Facebook DL MEASUREMENT (MByte)')
                                params = {'legend.fontsize': 10,
                                          'legend.linewidth': 0, }
                                plt.gca().xaxis.set_major_formatter(mdates.DateFormatter("%Y-%m-%d"))
                                plt.gca().xaxis.set_major_locator(mdates.DayLocator())

                                # _____________________***AXE 1***________________________________________


                                x = [datetime.datetime.strptime(d, "%Y-%m-%d").date() for d in date]
                                y = nb_facebook_down_set
                                ax1.bar(x, y, color='#3b5998', zorder=1)
                                ax1.set_ylabel('Nb DL Usage', color='#3b5998')
                                for tl in ax1.get_yticklabels():
                                    tl.set_color('#3b5998')

                                    # _____________________***AXE 2***________________________________________

                                ax2 = ax1.twinx()
                                x = [datetime.datetime.strptime(d, "%Y-%m-%d").date() for d in date]
                                y = facebook_down
                                ax2.plot(x, y, color='#8b9dc3', zorder=2)
                                plt.legend(loc='best')
                                ax2.set_xlabel('Jour')
                                ax2.set_ylabel('Moy DL (MByte)', color='#8b9dc3')
                                ax2.grid(True)
                                ax2.xaxis_date()
                                for t2 in ax2.get_yticklabels():
                                    t2.set_color('#8b9dc3')

                                # ________________________________________________--___**LEBONCOIN _**___--___________________________________________________
                                # LEBONCOIN_________UP
                                # _____________________***PARAMS***________________________________________

                                ax1 = plt.subplot2grid((22, 9), (20, 0), colspan=4)
                                plt.xticks(rotation='vertical', fontsize=8)
                                plt.title('Leboncoin UL MEASUREMENT (MByte)')
                                params = {'legend.fontsize': 10,
                                          'legend.linewidth': 0, }
                                plt.gca().xaxis.set_major_formatter(mdates.DateFormatter("%Y-%m-%d"))
                                plt.gca().xaxis.set_major_locator(mdates.DayLocator())

                                # _____________________***AXE 1***________________________________________


                                x = [datetime.datetime.strptime(d, "%Y-%m-%d").date() for d in date]
                                y = nb_leboncoin_up_set
                                ax1.bar(x, y, color='#D97114', zorder=1)
                                ax1.set_ylabel('Nb UL Usage', color='#D97114')
                                for tl in ax1.get_yticklabels():
                                    tl.set_color('#D97114')

                                    # _____________________***AXE 2***________________________________________

                                ax2 = ax1.twinx()
                                x = [datetime.datetime.strptime(d, "%Y-%m-%d").date() for d in date]
                                y = leboncoin_up
                                ax2.plot(x, y, color='black', zorder=2)
                                plt.legend(loc='best')
                                ax2.set_xlabel('Jour')
                                ax2.set_ylabel('Moy UL (MByte)', color='black')
                                ax2.grid(True)
                                ax2.xaxis_date()
                                for t2 in ax2.get_yticklabels():
                                    t2.set_color('black')

                                # LEBONCOIN_________DOWN
                                # _____________________***PARAMS***________________________________________

                                ax1 = plt.subplot2grid((22, 9), (20, 5), colspan=4)
                                plt.xticks(rotation='vertical', fontsize=8)
                                plt.title('Leboncoin DL MEASUREMENT (MByte)')
                                params = {'legend.fontsize': 10,
                                          'legend.linewidth': 0, }
                                plt.gca().xaxis.set_major_formatter(mdates.DateFormatter("%Y-%m-%d"))
                                plt.gca().xaxis.set_major_locator(mdates.DayLocator())

                                # _____________________***AXE 1***________________________________________


                                x = [datetime.datetime.strptime(d, "%Y-%m-%d").date() for d in date]
                                y = nb_leboncoin_down_set
                                ax1.bar(x, y, color='#D97114', zorder=1)
                                ax1.set_ylabel('Nb DL Usage', color='#D97114')
                                for tl in ax1.get_yticklabels():
                                    tl.set_color('#D97114')

                                    # _____________________***AXE 2***________________________________________

                                ax2 = ax1.twinx()
                                x = [datetime.datetime.strptime(d, "%Y-%m-%d").date() for d in date]
                                y = leboncoin_down
                                ax2.plot(x, y, color='black', zorder=2)
                                plt.legend(loc='best')
                                ax2.set_xlabel('Jour')
                                ax2.set_ylabel('Moy DL (MByte)', color='black')
                                ax2.grid(True)
                                ax2.xaxis_date()
                                for t2 in ax2.get_yticklabels():
                                    t2.set_color('black')

                            return date_usage, google_up, google_down, youtube_up, youtube_down, facebook_up, facebook_down, leboncoin_up, leboncoin_down, nb_google_up_set, nb_google_down_set, nb_youtube_up_set, nb_youtube_down_set, nb_facebook_up_set, nb_facebook_down_set, nb_leboncoin_up_set, nb_leboncoin_down_set


                            # ________________________________________________--___**_FIN MATPLOTLIB _**___--___________________________________________________

                        # PYGAL

                        def taux_incoming2(fichier, val1, val2, val3, val4, val5, tech, event):
                            # print(val3)
                            one_ex = []
                            two_ex = []
                            fichier = fichier
                            three_ex = []
                            four_ex = []
                            five_ex = []
                            six_ex = []
                            seven_ex = []
                            eight_ex = []
                            other_one_ex = []
                            other_two_ex = []
                            date_ex = []
                            one_cumul_exe = 0.0
                            two_cumul_exe = 0.0
                            three_cumul_exe = 0.0
                            four_cumul_exe = 0.0
                            five_cumul_exe = 0.0
                            six_cumul_exe = 0.0
                            seven_cumul_exe = 0.0
                            eight_cumul_exe = 0.0
                            other_one_cumul_exe = 0.0  # Succes comul
                            other_two_cumul_exe = 0.0  # Not Connected cumul
                            taux_one = 0.0
                            taux_two = 0.0
                            taux_three = 0.0
                            taux_five = 0.0
                            taux_six = 0.0
                            taux_seven = 0.0
                            taux_eight = 0.0
                            taux_succes = 0.0
                            taux_notconnected = 0.0
                            valeur_totale = 0.0
                            drop_total = 0.0
                            caf_cumul_exe = 0.0
                            connected_cumul_exe = 0.0
                            connected_set_exe = []
                            caf_sef_exe = []
                            drop_exe = []
                            legende = []

                            # Incoming
                            one_ex_incoming = []
                            two_ex_incoming = []
                            three_ex_incoming = []
                            four_ex_incoming = []
                            five_ex_incoming = []
                            six_ex_incoming = []
                            seven_ex_incoming = []
                            eight_ex_incoming = []
                            other_one_ex_incoming = []
                            other_two_ex_incoming = []
                            date_ex_incoming = []
                            one_cumul_exe_incoming = 0.0
                            two_cumul_exe_incoming = 0.0
                            three_cumul_exe_incoming = 0.0
                            four_cumul_exe_incoming = 0.0
                            five_cumul_exe_incoming = 0.0
                            six_cumul_exe_incoming = 0.0
                            seven_cumul_exe_incoming = 0.0
                            eight_cumul_exe_incoming = 0.0
                            other_one_cumul_exe_incoming = 0.0  # Succes comul
                            other_two_cumul_exe_incoming = 0.0  # Not Connected cumul
                            taux_one_incoming = 0.0
                            taux_two_incoming = 0.0
                            taux_three_incoming = 0.0
                            taux_four_incoming = 0.0
                            taux_five_incoming = 0.0
                            taux_six_incoming = 0.0
                            taux_seven_incoming = 0.0
                            taux_eight_incoming = 0.0
                            taux_succes_incoming = 0.0
                            taux_notconnected_incoming = 0.0
                            taux_connected_incoming = 0.0
                            valeur_totale_incoming = 0.0
                            drop_total_incoming = 0.0
                            caf_taux = 0.0
                            drop_exe_incoming = []
                            legende = []

                            # one_ex, two_ex, three_ex, four_ex, five_ex, six_ex, seven_ex, eight_ex, other_one_ex, other_two_ex, date_ex, one_cumul_exe, two_cumul_exe, three_cumul_exe, four_cumul_exe, five_cumul_exe, six_cumul_exe, seven_cumul_exe, eight_cumul_exe, other_one_cumul_exe, other_two_cumul_exe, drop_exe, drop_total, caf_cumul_exe, caf_sef_exe = etat_par_date(fichier,val1,val2,val3)
                            # valeur_totale = caf_cumul_exe + one_cumul_exe + two_cumul_exe + three_cumul_exe + four_cumul_exe + five_cumul_exe + six_cumul_exe + seven_cumul_exe + eight_cumul_exe + other_one_cumul_exe + other_two_cumul_exe

                            one_ex_incoming, two_ex_incoming, three_ex_incoming, four_ex_incoming, five_ex_incoming, six_ex_incoming, seven_ex_incoming, eight_ex_incoming, other_one_ex_incoming, other_two_ex_incoming, date_ex_incoming, one_cumul_exe_incoming, two_cumul_exe_incoming, three_cumul_exe_incoming, four_cumul_exe_incoming, five_cumul_exe_incoming, six_cumul_exe_incoming, seven_cumul_exe_incoming, eight_cumul_exe_incoming, other_one_cumul_exe_incoming, other_two_cumul_exe_incoming, drop_exe_incoming, drop_total_incoming, caf_cumul_exe, caf_sef_exe, connected_cumul_exe, connected_set_exe = etat_par_date_incoming(
                                fichier, val1, val2, val3, val4, val5, tech)
                            valeur_totale_incoming = caf_cumul_exe + one_cumul_exe_incoming + two_cumul_exe_incoming + three_cumul_exe_incoming + four_cumul_exe_incoming + five_cumul_exe_incoming + six_cumul_exe_incoming + seven_cumul_exe_incoming + eight_cumul_exe_incoming + other_one_cumul_exe_incoming + other_two_cumul_exe_incoming + connected_cumul_exe
                            date_ex.reverse()

                            # print(valeur_totale_incoming)
                            # Incoming taux
                            taux_one_incoming = (one_cumul_exe_incoming * 100.0) / valeur_totale_incoming  # ERROR
                            taux_two_incoming = (two_cumul_exe_incoming * 100.0) / valeur_totale_incoming
                            taux_three_incoming = (three_cumul_exe_incoming * 100.0) / valeur_totale_incoming
                            taux_four_incoming = (four_cumul_exe_incoming * 100.0) / valeur_totale_incoming
                            taux_five_incoming = (five_cumul_exe_incoming * 100.0) / valeur_totale_incoming
                            taux_six_incoming = (six_cumul_exe_incoming * 100.0) / valeur_totale_incoming
                            taux_seven_incoming = (seven_cumul_exe_incoming * 100.0) / valeur_totale_incoming
                            taux_eight_incoming = (eight_cumul_exe_incoming * 100.0) / valeur_totale_incoming
                            taux_succes_incoming = (other_one_cumul_exe_incoming * 100.0) / valeur_totale_incoming
                            taux_notconnected_incoming = (other_two_cumul_exe_incoming * 100.0) / valeur_totale_incoming
                            drop_total_incoming = (drop_total_incoming * 100) / valeur_totale_incoming
                            caf_taux = (caf_cumul_exe * 100) / valeur_totale_incoming
                            taux_connected_incoming = (connected_cumul_exe * 100.0) / valeur_totale_incoming

                            # ____________________________________--Pygal--________________________________________________________

                            pie_chart2 = pygal.Pie(height=400)
                            pie_chart2.title = 'Voix Incoming'
                            pie_chart2.add('Succes: ' + str(round(taux_succes_incoming, 1)) + '%', taux_succes_incoming)
                            pie_chart2.add('NotCon: ' + str(round(taux_notconnected_incoming, 1)) + '%',
                                           taux_notconnected_incoming)
                            pie_chart2.add('Drop: ' + str(round(drop_total_incoming, 1)) + '%', drop_total_incoming)
                            pie_chart2.add('Failure: ' + str(round(caf_taux, 1)) + '%', caf_taux)
                            pie_chart2.render_in_browser()
                            pie_chart2.render_to_file("INCOMING.svg")

                            # __________________________________--Pygal--_____________________________________________________________

                        def taux_outgoing2(fichier, val1, val2, val3, val4, val5, tech, event):
                            # print(val3)
                            one_ex = []
                            two_ex = []
                            fichier = fichier
                            three_ex = []
                            four_ex = []
                            five_ex = []
                            six_ex = []
                            seven_ex = []
                            eight_ex = []
                            other_one_ex = []
                            other_two_ex = []
                            date_ex = []
                            one_cumul_exe = 0.0
                            two_cumul_exe = 0.0
                            three_cumul_exe = 0.0
                            four_cumul_exe = 0.0
                            five_cumul_exe = 0.0
                            six_cumul_exe = 0.0
                            seven_cumul_exe = 0.0
                            eight_cumul_exe = 0.0
                            other_one_cumul_exe = 0.0  # Succes comul
                            other_two_cumul_exe = 0.0  # Not Connected cumul
                            taux_one = 0.0
                            taux_two = 0.0
                            taux_three = 0.0
                            taux_five = 0.0
                            taux_six = 0.0
                            taux_seven = 0.0
                            taux_eight = 0.0
                            taux_succes = 0.0
                            taux_notconnected = 0.0
                            valeur_totale = 0.0
                            drop_total = 0.0
                            caf_cumul_exe = 0.0
                            connected_cumul_exe = 0.0
                            connected_set_exe = []
                            caf_sef_exe = []
                            drop_exe = []
                            legende = []

                            # Incoming
                            one_ex_incoming = []
                            two_ex_incoming = []
                            three_ex_incoming = []
                            four_ex_incoming = []
                            five_ex_incoming = []
                            six_ex_incoming = []
                            seven_ex_incoming = []
                            eight_ex_incoming = []
                            other_one_ex_incoming = []
                            other_two_ex_incoming = []
                            date_ex_incoming = []
                            one_cumul_exe_incoming = 0.0
                            two_cumul_exe_incoming = 0.0
                            three_cumul_exe_incoming = 0.0
                            four_cumul_exe_incoming = 0.0
                            five_cumul_exe_incoming = 0.0
                            six_cumul_exe_incoming = 0.0
                            seven_cumul_exe_incoming = 0.0
                            eight_cumul_exe_incoming = 0.0
                            other_one_cumul_exe_incoming = 0.0  # Succes comul
                            other_two_cumul_exe_incoming = 0.0  # Not Connected cumul
                            taux_one_incoming = 0.0
                            taux_two_incoming = 0.0
                            taux_three_incoming = 0.0
                            taux_four_incoming = 0.0
                            taux_five_incoming = 0.0
                            taux_six_incoming = 0.0
                            taux_seven_incoming = 0.0
                            taux_eight_incoming = 0.0
                            taux_succes_incoming = 0.0
                            taux_notconnected_incoming = 0.0
                            taux_connected_incoming = 0.0
                            valeur_totale_incoming = 0.0
                            drop_total_incoming = 0.0
                            caf_taux = 0.0
                            drop_exe_incoming = []
                            legende = []

                            # one_ex, two_ex, three_ex, four_ex, five_ex, six_ex, seven_ex, eight_ex, other_one_ex, other_two_ex, date_ex, one_cumul_exe, two_cumul_exe, three_cumul_exe, four_cumul_exe, five_cumul_exe, six_cumul_exe, seven_cumul_exe, eight_cumul_exe, other_one_cumul_exe, other_two_cumul_exe, drop_exe, drop_total, caf_cumul_exe, caf_sef_exe = etat_par_date(fichier,val1,val2,val3)
                            # valeur_totale = caf_cumul_exe + one_cumul_exe + two_cumul_exe + three_cumul_exe + four_cumul_exe + five_cumul_exe + six_cumul_exe + seven_cumul_exe + eight_cumul_exe + other_one_cumul_exe + other_two_cumul_exe

                            one_ex_incoming, two_ex_incoming, three_ex_incoming, four_ex_incoming, five_ex_incoming, six_ex_incoming, seven_ex_incoming, eight_ex_incoming, other_one_ex_incoming, other_two_ex_incoming, date_ex_incoming, one_cumul_exe_incoming, two_cumul_exe_incoming, three_cumul_exe_incoming, four_cumul_exe_incoming, five_cumul_exe_incoming, six_cumul_exe_incoming, seven_cumul_exe_incoming, eight_cumul_exe_incoming, other_one_cumul_exe_incoming, other_two_cumul_exe_incoming, drop_exe_incoming, drop_total_incoming, caf_cumul_exe, caf_sef_exe, connected_cumul_exe, connected_set_exe = etat_par_date_outgoing(
                                fichier, val1, val2, val3, val4, val5, tech)
                            valeur_totale_incoming = caf_cumul_exe + one_cumul_exe_incoming + two_cumul_exe_incoming + three_cumul_exe_incoming + four_cumul_exe_incoming + five_cumul_exe_incoming + six_cumul_exe_incoming + seven_cumul_exe_incoming + eight_cumul_exe_incoming + other_one_cumul_exe_incoming + other_two_cumul_exe_incoming + connected_cumul_exe
                            date_ex.reverse()

                            """
                                               taux_one = (one_cumul_exe * 100.0) / valeur_totale  # ERROR
                                               taux_two = (two_cumul_exe * 100.0) / valeur_totale
                                               taux_three = (three_cumul_exe * 100.0) / valeur_totale
                                               taux_four = (four_cumul_exe * 100.0) / valeur_totale
                                               taux_five = (five_cumul_exe * 100.0) / valeur_totale
                                               taux_six = (six_cumul_exe * 100.0) / valeur_totale
                                               taux_seven = (seven_cumul_exe * 100.0) / valeur_totale
                                               taux_eight = (eight_cumul_exe * 100.0) / valeur_totale
                                               taux_succes = (other_one_cumul_exe * 100.0) / valeur_totale
                                               taux_notconnected = (other_two_cumul_exe * 100.0) / valeur_totale
                                               taux_drop = (drop_total * 100) / valeur_totale
                                               """
                            # print(valeur_totale_incoming)
                            # Incoming taux
                            taux_one_incoming = (one_cumul_exe_incoming * 100.0) / valeur_totale_incoming  # ERROR
                            taux_two_incoming = (two_cumul_exe_incoming * 100.0) / valeur_totale_incoming
                            taux_three_incoming = (three_cumul_exe_incoming * 100.0) / valeur_totale_incoming
                            taux_four_incoming = (four_cumul_exe_incoming * 100.0) / valeur_totale_incoming
                            taux_five_incoming = (five_cumul_exe_incoming * 100.0) / valeur_totale_incoming
                            taux_six_incoming = (six_cumul_exe_incoming * 100.0) / valeur_totale_incoming
                            taux_seven_incoming = (seven_cumul_exe_incoming * 100.0) / valeur_totale_incoming
                            taux_eight_incoming = (eight_cumul_exe_incoming * 100.0) / valeur_totale_incoming
                            taux_succes_incoming = (other_one_cumul_exe_incoming * 100.0) / valeur_totale_incoming
                            taux_notconnected_incoming = (other_two_cumul_exe_incoming * 100.0) / valeur_totale_incoming
                            drop_total_incoming = (drop_total_incoming * 100) / valeur_totale_incoming
                            caf_taux = (caf_cumul_exe * 100) / valeur_totale_incoming
                            taux_connected_incoming = (connected_cumul_exe * 100.0) / valeur_totale_incoming

                            # _________________________________--Pygal--________________________________________________________

                            pie_chart1 = pygal.Pie(height=400)
                            pie_chart1.title = 'Voix Outgoing'
                            pie_chart1.add('Succes: ' + str(round(taux_succes_incoming, 1)) + '%', taux_succes_incoming)
                            pie_chart1.add('NotCon: ' + str(round(taux_notconnected_incoming, 1)) + '%',
                                           taux_notconnected_incoming)
                            pie_chart1.add('Drop: ' + str(round(drop_total_incoming, 1)) + '%', drop_total_incoming)
                            pie_chart1.add('Failure: ' + str(round(caf_taux, 1)) + '%', caf_taux)
                            pie_chart1.render_in_browser()
                            pie_chart1.render_to_file("OUTGOING.svg")

                            # _________________________________--Pygal--________________________________________________________

                        def latences3(fichier, val1, val2, val3, val4, val5, tech, event):
                            date_debut = time.strptime(val1, "%d/%m/%Y")
                            date_fin = time.strptime(val2, "%d/%m/%Y")
                            fichier = fichier
                            date = []
                            trois_g = 0.0
                            quatre_g = 0.0
                            deux_g = 0.0
                            autre_g = 0.0
                            taux_2g = 0.0
                            taux_3g = 0.0
                            taux_4g = 0.0
                            taux_autre = 0.0
                            autre = 0.0
                            trois = 0.0
                            deux = 0.0
                            quatre = 0.0
                            deux_cumul = 0.0
                            trois_cumul = 0.0
                            quatre_cumul = 0.0
                            total_g = 0.0
                            # print val1
                            # print(val2)
                            # print val3
                            # print val5

                            csvfile = open(fichier, 'r')
                            reader = csv.reader(csvfile)

                            b = ''
                            D = {}
                            dict_taux = {}
                            dq = []
                            total = 0.10
                            latency = []
                            lat = 0.0
                            nombre = 0.0
                            row_check = 0.0
                            var_ajout = 0.0
                            for row in reader:
                                # f = date_test.match(row[1])
                                row_check = row_check + 1
                                f = row[1][0:10]
                                a = row[161]
                                gt = row[210]
                                tecc = row[236]
                                latence = row[175]
                                if f == 'date_utc_a':
                                    continue

                                datef = time.strptime(f, "%d/%m/%Y")
                                row[221] = '_'.join(row[221].split(" "))
                                if datef > date_fin:
                                    continue
                                if datef < date_debut:
                                    if nombre == 0:
                                        lat = 0.0
                                        nombre = 0.0
                                        latency.append(lat)
                                        break
                                    lat = lat / nombre
                                    latency.append(lat)
                                    break
                                if row_check == val4:
                                    # print("J ai quitte LAAA___ 2")
                                    if nombre == 0:
                                        lat = 0.0
                                        nombre = 0.0
                                        latency.append(lat)
                                        break
                                    lat = lat / nombre
                                    latency.append(lat)
                                    break

                                row[241] = '_'.join(row[241].split(" "))
                                if row[241] in val3 and row[240] in val5 and tecc in tech:

                                    if b != str(f):
                                        date.append(str(f))
                                        b = str(f)
                                        if var_ajout > 0:
                                            if nombre == 0:
                                                lat = 0.0
                                                nombre = 0.0
                                                latency.append(lat)
                                                continue
                                            lat = lat / nombre
                                            latency.append(lat)
                                            lat = 0.0
                                            nombre = 0.0

                                    if latence != 'NULL' and row[200] != 'NULL' and float(row[200]) >= 512:
                                        nombre = nombre + 1
                                        lat = lat + float(latence)
                                        var_ajout = var_ajout + 1

                            date.reverse()
                            latency.reverse()
                            # _________________________________________--PYGAL--______________________________________________
                            y = latency
                            nb_users_bar = pygal.Bar(height=300, x_label_rotation=90)
                            nb_users_bar.title = 'Latence Moyenne (ms)'
                            nb_users_bar.x_labels = date
                            nb_users_bar.add('Latence Moy(ms)', y)
                            nb_users_bar.render_in_browser()
                            nb_users_bar.render_to_file("LATENCE_Moy_HTT.svg")
                            # _________________________________________--PYGAL--______________________________________________

                        def mobile_gt2(fichier, val1, val2, val3, val5, tech, event):
                            date_debut = time.strptime(val1, "%Y-%m-%d")
                            date_fin = time.strptime(val2, "%Y-%m-%d")
                            fichier = fichier
                            date = []
                            trois_g = 0.0
                            quatre_g = 0.0
                            deux_g = 0.0
                            autre_g = 0.0
                            taux_2g = 0.0
                            taux_3g = 0.0
                            taux_4g = 0.0
                            taux_autre = 0.0
                            autre = 0.0
                            trois = 0.0
                            deux = 0.0
                            quatre = 0.0
                            deux_cumul = 0.0
                            trois_cumul = 0.0
                            quatre_cumul = 0.0
                            total_g = 0.0
                            # print val1
                            # print(val2)
                            # print val3
                            # print val5

                            csvfile = open(fichier, 'r')
                            reader = csv.reader(csvfile)

                            b = ''
                            D = {}
                            dict_taux = {}
                            dq = []
                            total = 0.10
                            for row in reader:
                                # f = date_test.match(row[1])
                                dqaid = row[0]
                                f = row[1][0:10]
                                a = row[161]
                                gt = row[210]
                                tecc = row[216]
                                if f == 'date_utc_a':
                                    continue

                                datef = time.strptime(f, "%Y-%m-%d")

                                if datef > date_fin:
                                    continue
                                if datef < date_debut:
                                    break

                                row[221] = '_'.join(row[221].split(" "))
                                if str(row[220]) in val5 and str(row[221]) in val3 and tecc in tech:

                                    if dqaid not in dq:
                                        dq.append(dqaid)
                                        total = total + 1

                                        if b != str(f):

                                            date.append(str(f))
                                            b = str(f)
                                            if gt not in D:
                                                D[gt] = 1

                                            else:
                                                D[str(gt)] = D[str(gt)] + 1
                                        else:
                                            if gt not in D:
                                                D[gt] = 1
                                            else:
                                                D[str(gt)] = D[str(gt)] + 1
                                    if str(row[216]) == '3G':
                                        trois_g = trois_g + 1
                                    if str(row[216]) == '2G':
                                        deux_g = deux_g + 1
                                    if str(row[216]) == '4G':
                                        quatre_g = quatre_g + 1
                                    if str(row[216]) == 'UNKNOWN':
                                        autre_g = autre_g + 1

                            fracs = []
                            legende = []
                            labels = []
                            under_two = 0.0
                            dict_taux_reduce = []
                            for val in D:
                                dict_taux[val] = D[val] * 100.0 / total
                                # print(dict_taux[val])
                                if dict_taux[val] <= 3:
                                    # print(dict_taux[val])
                                    under_two = under_two + dict_taux[val]
                                    # fracs.append(dict_taux[val])
                                    # labels.append(dict_taux.keys())
                                    # legende.append((val))
                                else:
                                    fracs.append(dict_taux[val])
                                    arr = round(dict_taux[val], 3)
                                    # print(arr)
                                    labels.append(str(val) + ': ' + str(arr) + '%')
                                    legende.append(str(val) + ': ' + str(arr) + '%')

                            # print(dict_taux)
                            # print(under_two)
                            fracs.append(under_two)
                            arr = round(under_two, 3)
                            colors = ['green', 'red', 'yellow', 'orange', 'white', 'purple', 'lightgray', 'moccasin',
                                      'lime', 'cyan', 'pink', 'black', 'blue', 'brown']
                            legende.append('Autres: ' + str(arr) + '%')
                            labels.append('Autres')

                            # TAUX TECNO
                            total_g = deux_g + trois_g + quatre_g + autre_g
                            taux_2g = (deux_g * 100.0) / total_g
                            taux_3g = (trois_g * 100.0) / total_g
                            taux_4g = (quatre_g * 100.0) / total_g
                            taux_autre = (autre_g) / total_g

                            # ________________________--Pygal--__________________________________________
                            pie_techno = pygal.Pie(height=400)
                            pie_techno.title = 'TECHNO'
                            pie_techno.add('2G: ' + str(round(taux_2g, 1)), taux_2g)
                            pie_techno.add('3G: ' + str(round(taux_3g, 1)), taux_3g)
                            pie_techno.add('4G: ' + str(round(taux_4g, 1)), taux_4g)
                            pie_techno.add('Autre: ' + str(round(taux_autre, 1)), taux_autre)
                            pie_techno.render_in_browser()
                            pie_techno.render_to_file("techno.svg")
                            # ________________________--Pygal--__________________________________________

                        def mobile_gt3(fichier, val1, val2, val3, val5, tech, event):
                            date_debut = time.strptime(val1, "%Y-%m-%d")
                            date_fin = time.strptime(val2, "%Y-%m-%d")
                            fichier = fichier
                            date = []
                            trois_g = 0.0
                            quatre_g = 0.0
                            deux_g = 0.0
                            autre_g = 0.0
                            taux_2g = 0.0
                            taux_3g = 0.0
                            taux_4g = 0.0
                            taux_autre = 0.0
                            autre = 0.0
                            trois = 0.0
                            deux = 0.0
                            quatre = 0.0
                            deux_cumul = 0.0
                            trois_cumul = 0.0
                            quatre_cumul = 0.0
                            total_g = 0.0
                            # print val1
                            # print(val2)
                            # print val3
                            # print val5

                            csvfile = open(fichier, 'r')
                            reader = csv.reader(csvfile)

                            b = ''
                            D = {}
                            dict_taux = {}
                            dq = []
                            total = 0.10
                            for row in reader:
                                # f = date_test.match(row[1])
                                dqaid = row[0]
                                f = row[1][0:10]
                                a = row[161]
                                gt = row[210]
                                tecc = row[216]
                                if f == 'date_utc_a':
                                    continue

                                datef = time.strptime(f, "%Y-%m-%d")

                                if datef > date_fin:
                                    continue
                                if datef < date_debut:
                                    break

                                row[221] = '_'.join(row[221].split(" "))
                                if str(row[220]) in val5 and str(row[221]) in val3 and tecc in tech:

                                    if dqaid not in dq:
                                        dq.append(dqaid)
                                        total = total + 1

                                        if b != str(f):

                                            date.append(str(f))
                                            b = str(f)
                                            if gt not in D:
                                                D[gt] = 1

                                            else:
                                                D[str(gt)] = D[str(gt)] + 1
                                        else:
                                            if gt not in D:
                                                D[gt] = 1
                                            else:
                                                D[str(gt)] = D[str(gt)] + 1
                                    if str(row[216]) == '3G':
                                        trois_g = trois_g + 1
                                    if str(row[216]) == '2G':
                                        deux_g = deux_g + 1
                                    if str(row[216]) == '4G':
                                        quatre_g = quatre_g + 1
                                    if str(row[216]) == 'UNKNOWN':
                                        autre_g = autre_g + 1

                            fracs = []
                            legende = []
                            labels = []
                            under_two = 0.0
                            dict_taux_reduce = []

                            for val in D:
                                dict_taux[val] = D[val] * 100.0 / total
                                # print(dict_taux[val])
                                if dict_taux[val] <= 3:
                                    # print(dict_taux[val])
                                    under_two = under_two + dict_taux[val]
                                    # fracs.append(dict_taux[val])
                                    # labels.append(dict_taux.keys())
                                    # legende.append((val))
                                else:
                                    fracs.append(dict_taux[val])
                                    arr = round(dict_taux[val], 3)
                                    # print(arr)
                                    labels.append(str(val) + ': ' + str(round(arr, 1)) + '%')
                                    legende.append(str(val) + ': ' + str(round(arr, 1)) + '%')

                            # TAUX TECNO
                            total_g = deux_g + trois_g + quatre_g + autre_g
                            taux_2g = (deux_g * 100.0) / total_g
                            taux_3g = (trois_g * 100.0) / total_g
                            taux_4g = (quatre_g * 100.0) / total_g
                            taux_autre = (autre_g) / total_g

                            # ______________________________--Pygal--______________________________________
                            Parc_Mobile = pygal.Pie(height=400, margin_left=70, legend_box_size=10)
                            Parc_Mobile.title = 'PARC MOBILE'
                            compteur = 0
                            for valeur in fracs:
                                Parc_Mobile.add(legende[compteur], round(valeur, 1))
                                compteur = compteur + 1
                            Parc_Mobile.render_in_browser()
                            Parc_Mobile.render_to_file("Parc_Mobile.svg")



                            # ______________________________--Pygal--_______________________________________

                        def success_ratio3(fichier, val1, val2, val3, val4, val5, tech):
                            date_debut = time.strptime(val1, "%d/%m/%Y")
                            date_fin = time.strptime(val2, "%d/%m/%Y")
                            succes = 0.0
                            success_set = []
                            success_taux = []
                            fichier = fichier
                            nb = 0.0
                            nb_set = []
                            date = []
                            csvfile = open(fichier, 'r')
                            # print(csvfile)
                            reader = csv.reader(csvfile)

                            b = ''
                            var_ajout = 0.0
                            variable = ''

                            row_check = 0.0
                            for row in reader:
                                row_check = row_check + 1
                                # print(row_check)
                                f = row[1][0:10]

                                tecc = row[235]
                                if f == 'date_utc_a':
                                    continue
                                datef = time.strptime(f, "%d/%m/%Y")
                                if datef > date_fin:
                                    continue

                                if datef < date_debut:
                                    success_set.append(succes)
                                    nb_set.append(nb)
                                    break
                                if row_check == val4:
                                    # print("J ai quitte LAAA___ 2 et SUCCESSSS")

                                    success_set.append(succes)
                                    nb_set.append(nb)
                                    break

                                row[241] = '_'.join(row[241].split(" "))

                                if str(row[241]) in val3 and row[240] in val5 and tecc in tech:

                                    variable = val2

                                    if b != str(f):

                                        # Graphes independants

                                        date.append(str(f))
                                        b = str(f)
                                        # a chaque nouvelle date je met le nombre de succes a 0 ainsi que le nombre total succes et autres inclus
                                        if var_ajout > 0:
                                            success_set.append(succes)
                                            var_ajout = var_ajout + 1
                                            nb_set.append(nb)
                                            # print succes
                                            # print nb
                                            succes = 0.0
                                            nb = 0
                                            var_ajout = var_ajout + 1

                                        if str(row[238]) == 'Success' or str(row[238]) == 'Canceled':
                                            succes = succes + 1
                                            nb = nb + 1
                                            var_ajout = var_ajout + 1
                                            continue
                                        else:
                                            if row[238] != 'N/A':
                                                nb = nb + 1
                                                var_ajout = var_ajout + 1



                                    else:
                                        var_ajout = var_ajout + 1
                                        if str(row[238]) == 'Success' or str(row[238]) == 'Canceled':
                                            succes = succes + 1
                                            nb = nb + 1
                                            continue
                                        else:
                                            if row[238] != 'N/A':
                                                nb = nb + 1
                                                continue

                                    var_ajout = var_ajout + 1

                            # print(nb_set)

                            # print(date)

                            date.reverse()
                            success_set.reverse()
                            nb_set.reverse()

                            # print(" ")
                            # print("_____________________AFFICHONS DU SUCCES_____________________________")
                            # print(date)
                            # print(success_set)
                            # print(nb_set)
                            # print(" ")
                            # print(date)
                            # print(int(date[1][6])+1)
                            # print(date)

                            i = 0

                            for s in success_set:
                                if nb_set[i] == 0.0:
                                    success_taux.append(0.0)
                                    i = i + 1
                                    continue
                                success_taux.append(float(s) * 100.0 / nb_set[i])
                                i = i + 1

                            b = []
                            n_set = []
                            n = 2
                            a = 1  # decallage date sur les graphes
                            for i in date:
                                b.append(a)
                                n_set.append(n)
                                a = a + 2
                                n = n + 2

                            # __________________________-------------------------PYGAL------------------------------------__________________________________________________________________________
                            success_plot = pygal.Line(height=400,
                                                      secondary_range=(min(success_taux), max(success_taux)),
                                                      x_label_rotation=90)
                            success_plot.title = 'SUCCESS_RATIO'
                            success_plot.x_labels = date
                            success_plot.add('Nombre_Success', success_set)
                            success_plot.add('Taux_Succes', success_taux, secondary=True)
                            success_plot.render_in_browser()
                            success_plot.render_to_file("Success_RATIO_data.svg")
                            # __________________________-------------------------PYGAL------------------------------------__________________________________________________________________________

                        def debit_download_3(fichier, val1, val2, val3, val4, val5, tech, event):
                            date_debut = time.strptime(val1, "%d/%m/%Y")
                            date_fin = time.strptime(val2, "%d/%m/%Y")
                            fichier = fichier
                            date = []
                            trois_g = 0.0
                            quatre_g = 0.0
                            deux_g = 0.0
                            autre_g = 0.0
                            taux_2g = 0.0
                            taux_3g = 0.0
                            taux_4g = 0.0
                            taux_autre = 0.0
                            autre = 0.0
                            trois = 0.0
                            deux = 0.0
                            quatre = 0.0
                            deux_cumul = 0.0
                            trois_cumul = 0.0
                            quatre_cumul = 0.0
                            total_g = 0.0
                            # print val1
                            # print(val2)
                            # print val3
                            # print val5

                            csvfile = open(fichier, 'r')
                            reader = csv.reader(csvfile)

                            b = ''
                            D = {}
                            dict_taux = {}
                            dq = []
                            total = 0.10
                            debit_set = []
                            deb = 0.0
                            nombre = 0.0
                            row_check = 0.0
                            check_decalage = 0.0
                            nombre_p_jour = []
                            for row in reader:
                                # f = date_test.match(row[1])
                                row_check = row_check + 1
                                f = row[1][0:10]
                                a = row[161]
                                gt = row[210]
                                tecc = row[236]
                                debit = row[171]
                                if f == 'date_utc_a':
                                    continue

                                datef = time.strptime(f, "%d/%m/%Y")

                                if datef > date_fin:
                                    continue
                                if datef < date_debut:
                                    if nombre == 0.0:
                                        deb = 0.0
                                        nombre = 0.0
                                        nombre_p_jour.append(nombre)
                                        debit_set.append(deb)
                                        check_decalage = check_decalage + 1
                                        break
                                    deb = deb / (nombre * 1000)
                                    nombre_p_jour.append(nombre)
                                    debit_set.append(deb)
                                    break
                                if row_check == val4:
                                    if nombre == 0.0:
                                        deb = 0.0
                                        nombre = 0.0
                                        debit_set.append(deb)
                                        nombre_p_jour.append(nombre)
                                        check_decalage = check_decalage + 1
                                        break
                                    deb = deb / (nombre * 1000)
                                    nombre_p_jour.append(nombre)
                                    debit_set.append(deb)
                                    break

                                row[241] = '_'.join(row[241].split(" "))
                                if row[241] in val3 and row[240] in val5 and tecc in tech and row[239] == 'Download':
                                    if b != str(f):

                                        date.append(str(f))
                                        b = str(f)
                                        if check_decalage > 0:
                                            if nombre == 0.0:
                                                deb = 0.0
                                                nombre = 0.0
                                                debit_set.append(deb)
                                                nombre_p_jour.append(nombre)
                                                check_decalage = check_decalage + 1
                                                continue
                                            deb = deb / (nombre * 1000)
                                            nombre_p_jour.append(nombre)
                                            debit_set.append(deb)
                                            deb = 0.0
                                            nombre = 0.0
                                        check_decalage = check_decalage + 1

                                    if debit != 'NULL' and row[200] != 'NULL' and float(row[200]) >= 512 and row[
                                        238] == 'Success':
                                        check_decalage = check_decalage + 1
                                        nombre = nombre + 1
                                        deb = deb + float(debit)
                                    check_decalage = check_decalage + 1

                            date.reverse()
                            debit_set.reverse()
                            nombre_p_jour.reverse()
                            # __________________________-------------------------PYGAL------------------------------------__________________________________________________________________________
                            success_plot = pygal.Line(height=400, secondary_range=(
                            min(debit_set + nombre_p_jour), max(debit_set + nombre_p_jour)), x_label_rotation=90)
                            success_plot.title = 'DEBIT MOY DOWNLOAD (Mb/s)'
                            success_plot.x_labels = date
                            success_plot.add('Nb_TEST_DL', nombre_p_jour)
                            success_plot.add('Moy DL (Mb/s)', debit_set, secondary=True)
                            success_plot.render_in_browser()
                            success_plot.render_to_file("DEBIT_Download_HTTP.svg")
                            # __________________________-------------------------PYGAL------------------------------------__________________________________________________________________________

                        def debit_upload_3(fichier, val1, val2, val3, val4, val5, tech, event):
                            date_debut = time.strptime(val1, "%d/%m/%Y")
                            date_fin = time.strptime(val2, "%d/%m/%Y")
                            fichier = fichier
                            date = []
                            trois_g = 0.0
                            quatre_g = 0.0
                            deux_g = 0.0
                            autre_g = 0.0
                            taux_2g = 0.0
                            taux_3g = 0.0
                            taux_4g = 0.0
                            taux_autre = 0.0
                            autre = 0.0
                            trois = 0.0
                            deux = 0.0
                            quatre = 0.0
                            deux_cumul = 0.0
                            trois_cumul = 0.0
                            quatre_cumul = 0.0
                            total_g = 0.0
                            # print val1
                            # print(val2)
                            # print val3
                            # print val5

                            csvfile = open(fichier, 'r')
                            reader = csv.reader(csvfile)

                            b = ''
                            D = {}
                            dict_taux = {}
                            dq = []
                            total = 0.10
                            debit_set = []
                            deb = 0.0
                            nombre = 0.0
                            row_check = 0.0
                            check_decalage = 0.0
                            nombre_p_jour = []
                            for row in reader:
                                # f = date_test.match(row[1])
                                row_check = row_check + 1
                                f = row[1][0:10]
                                a = row[161]
                                gt = row[210]
                                tecc = row[236]
                                debit = row[171]
                                if f == 'date_utc_a':
                                    continue

                                datef = time.strptime(f, "%d/%m/%Y")

                                if datef > date_fin:
                                    continue
                                if datef < date_debut:
                                    if nombre == 0.0:
                                        deb = 0.0
                                        nombre = 0.0
                                        nombre_p_jour.append(nombre)
                                        debit_set.append(deb)
                                        check_decalage = check_decalage + 1
                                        break
                                    deb = deb / (nombre * 1000)
                                    nombre_p_jour.append(nombre)
                                    debit_set.append(deb)
                                    break
                                if row_check == val4:
                                    if nombre == 0.0:
                                        deb = 0.0
                                        nombre = 0.0
                                        debit_set.append(deb)
                                        nombre_p_jour.append(nombre)
                                        check_decalage = check_decalage + 1
                                        break
                                    deb = deb / (nombre * 1000)
                                    nombre_p_jour.append(nombre)
                                    debit_set.append(deb)
                                    break

                                row[241] = '_'.join(row[241].split(" "))
                                if row[241] in val3 and row[240] in val5 and tecc in tech and row[239] == 'Upload':
                                    if b != str(f):

                                        date.append(str(f))
                                        b = str(f)
                                        if check_decalage > 0:
                                            if nombre == 0.0:
                                                deb = 0.0
                                                nombre = 0.0
                                                debit_set.append(deb)
                                                nombre_p_jour.append(nombre)
                                                check_decalage = check_decalage + 1
                                                continue
                                            deb = deb / (nombre * 1000)
                                            nombre_p_jour.append(nombre)
                                            debit_set.append(deb)
                                            deb = 0.0
                                            nombre = 0.0
                                        check_decalage = check_decalage + 1

                                    if debit != 'NULL' and row[200] != 'NULL' and float(row[200]) >= 512 and row[
                                        238] == 'Success':
                                        check_decalage = check_decalage + 1
                                        nombre = nombre + 1
                                        deb = deb + float(debit)
                                    check_decalage = check_decalage + 1

                            date.reverse()
                            debit_set.reverse()
                            nombre_p_jour.reverse()

                            # __________________________-------------------------PYGAL------------------------------------__________________________________________________________________________
                            success_plot = pygal.Line(height=400, secondary_range=(
                            min(debit_set + nombre_p_jour), max(debit_set + nombre_p_jour)), x_label_rotation=90)
                            success_plot.title = 'DEBIT MOY UPLOAD (Mb/s)'
                            success_plot.x_labels = date
                            success_plot.add('Nb UL', nombre_p_jour)
                            success_plot.add('Moy UL(Mb/s)', debit_set, secondary=True)
                            success_plot.render_in_browser()
                            success_plot.render_to_file("DEBIT_MOY_UP_HTTP.svg")
                            # __________________________-------------------------PYGAL------------------------------------__________________________________________________________________________

                        def failure_ratio3(fichier, val1, val2, val3, val4, val5, tech, event):
                            date_debut = time.strptime(val1, "%d/%m/%Y")
                            date_fin = time.strptime(val2, "%d/%m/%Y")
                            succes = 0.0
                            success_set = []
                            success_taux = []
                            fichier = fichier
                            nb = 0.0
                            nb_set = []
                            date = []
                            csvfile = open(fichier, 'r')
                            # print(csvfile)
                            reader = csv.reader(csvfile)

                            b = ''
                            var_ajout = 0.0
                            variable = ''

                            row_check = 0.0
                            for row in reader:
                                row_check = row_check + 1
                                # print(row_check)
                                f = row[1][0:10]

                                tecc = row[235]
                                if f == 'date_utc_a':
                                    continue
                                datef = time.strptime(f, "%d/%m/%Y")
                                if datef > date_fin:
                                    continue

                                if datef < date_debut:
                                    success_set.append(succes)
                                    nb_set.append(nb)
                                    break
                                if row_check == val4:
                                    success_set.append(succes)
                                    nb_set.append(nb)
                                    break

                                row[241] = '_'.join(row[241].split(" "))

                                if str(row[241]) in val3 and row[240] in val5 and tecc in tech:

                                    variable = val2

                                    if b != str(f):

                                        # Graphes independants

                                        date.append(str(f))
                                        b = str(f)
                                        # a chaque nouvelle date je met le nombre de succes a 0 ainsi que le nombre total succes et autres inclus
                                        if var_ajout > 0:
                                            success_set.append(succes)
                                            var_ajout = var_ajout + 1
                                            nb_set.append(nb)
                                            succes = 0.0
                                            nb = 0
                                            var_ajout = var_ajout + 1

                                        if str(row[238]) == 'Failure':
                                            succes = succes + 1
                                            nb = nb + 1
                                            var_ajout = var_ajout + 1
                                            continue
                                        if str(row[238]) == 'Timeout':
                                            succes = succes + 1
                                            nb = nb + 1
                                            continue
                                        else:
                                            if row[238] != 'N/A':
                                                nb = nb + 1
                                                var_ajout = var_ajout + 1


                                    else:
                                        var_ajout = var_ajout + 1
                                        if str(row[238]) == 'Failure':
                                            succes = succes + 1
                                            nb = nb + 1
                                            continue
                                        if str(row[238]) == 'Timeout':
                                            succes = succes + 1
                                            nb = nb + 1
                                            continue

                                        else:
                                            if row[238] != 'N/A':
                                                nb = nb + 1
                                                continue
                                    var_ajout = var_ajout + 1

                            # print(nb_set)
                            # print(date)
                            # print(success_set)
                            # print(date)

                            date.reverse()
                            # print(date)
                            success_set.reverse()
                            nb_set.reverse()
                            # print(date)
                            # print(int(date[1][6])+1)
                            # print(date)

                            i = 0

                            for s in success_set:
                                if nb_set[i] == 0.0:
                                    success_taux.append(0.0)
                                    i = i + 1
                                    continue
                                success_taux.append(float(s) * 100.0 / nb_set[i])
                                i = i + 1

                            b = []
                            n_set = []
                            n = 2
                            a = 1  # decallage date sur les graphes
                            for i in date:
                                b.append(a)
                                n_set.append(n)
                                a = a + 2
                                n = n + 2

                            # __________________________-------------------------PYGAL------------------------------------__________________________________________________________________________
                            Failure_plot = pygal.Line(height=400,
                                                      secondary_range=(min(success_taux), max(success_taux)),
                                                      x_label_rotation=90)
                            Failure_plot.title = 'FAILURE_RATIO'
                            Failure_plot.x_labels = date
                            Failure_plot.add('Nombre_Echec', success_set)
                            Failure_plot.add('Taux_Echec', success_taux, secondary=True)
                            Failure_plot.render_in_browser()
                            Failure_plot.render_to_file("Failure_RATIO.svg")
                            # __________________________-------------------------PYGAL------------------------------------__________________________________________________________________________

                        def drop_ratio3(fichier, val1, val2, val3, val4, val5, tech, event):
                            # print(val3)
                            # print('Tu es dans la fonction Succes et tu as VAL1: '+val1)
                            # print('Tu es dans la fonction Succes et tu as VAL2: '+val2)
                            date_debut = time.strptime(val1, "%d/%m/%Y")
                            date_fin = time.strptime(val2, "%d/%m/%Y")
                            succes = 0.0
                            success_set = []
                            success_taux = []
                            fichier = fichier
                            nb = 0.0
                            nb_set = []
                            date = []
                            csvfile = open(fichier, 'r')
                            # print(csvfile)
                            reader = csv.reader(csvfile)

                            b = ''
                            var_ajout = 0.0
                            variable = ''

                            row_check = 0.0
                            for row in reader:
                                row_check = row_check + 1
                                # print(row_check)
                                f = row[1][0:10]

                                tecc = row[235]
                                if f == 'date_utc_a':
                                    continue
                                datef = time.strptime(f, "%d/%m/%Y")
                                if datef > date_fin:
                                    continue

                                if datef < date_debut:
                                    success_set.append(succes)
                                    nb_set.append(nb)
                                    break
                                if row_check == val4:
                                    success_set.append(succes)
                                    nb_set.append(nb)
                                    break

                                row[241] = '_'.join(row[241].split(" "))

                                if str(row[241]) in val3 and row[240] in val5 and tecc in tech:

                                    variable = val2

                                    if b != str(f):

                                        # Graphes independants

                                        date.append(str(f))
                                        b = str(f)
                                        # a chaque nouvelle date je met le nombre de succes a 0 ainsi que le nombre total succes et autres inclus
                                        if var_ajout > 0:
                                            success_set.append(succes)
                                            var_ajout = var_ajout + 1
                                            nb_set.append(nb)
                                            succes = 0.0
                                            nb = 0

                                        var_ajout = var_ajout + 1
                                        if str(row[238]) == 'Drop':
                                            succes = succes + 1
                                            nb = nb + 1
                                            var_ajout = var_ajout + 1
                                            continue
                                        else:
                                            if row[238] != 'N/A':
                                                nb = nb + 1
                                                var_ajout = var_ajout + 1


                                    else:
                                        var_ajout = var_ajout + 1
                                        if str(row[238]) == 'Drop':
                                            succes = succes + 1
                                            nb = nb + 1
                                            continue
                                        else:
                                            if row[238] != 'N/A':
                                                nb = nb + 1
                                                continue
                                    var_ajout = var_ajout + 1

                            # print(nb_set)
                            # print(date)
                            # print(success_set)
                            # print(date)

                            date.reverse()
                            success_set.reverse()
                            nb_set.reverse()
                            # print(date)
                            # print(int(date[1][6])+1)
                            # print(date)

                            i = 0

                            for s in success_set:
                                if nb_set[i] == 0.0:
                                    success_taux.append(0.0)
                                    i = i + 1
                                    continue
                                success_taux.append(float(s) * 100.0 / nb_set[i])
                                i = i + 1

                            b = []
                            n_set = []
                            n = 2
                            a = 1  # decallage date sur les graphes
                            for i in date:
                                b.append(a)
                                n_set.append(n)
                                a = a + 2
                                n = n + 2

                            # _____________________--PYGAL--_________________________
                            Drop_plot = pygal.Line(height=400, secondary_range=(min(success_taux), max(success_taux)),
                                                   x_label_rotation=90)
                            Drop_plot.title = 'DROP_RATIO'
                            Drop_plot.x_labels = date
                            Drop_plot.add('Nombre_Drop', success_set)
                            Drop_plot.add('Taux_Drop', success_taux, secondary=True)
                            Drop_plot.render_in_browser()
                            Drop_plot.render_to_file("Drop_RATIO.svg")
                            # _____________________--PYGAL--_________________________

                        def debit_moy_3(fichier, val1, val2, val3, val4, val5, tech, event):
                            date_debut = time.strptime(val1, "%d/%m/%Y")
                            date_fin = time.strptime(val2, "%d/%m/%Y")
                            fichier = fichier
                            date = []
                            trois_g = 0.0
                            quatre_g = 0.0
                            deux_g = 0.0
                            autre_g = 0.0
                            taux_2g = 0.0
                            taux_3g = 0.0
                            taux_4g = 0.0
                            taux_autre = 0.0
                            autre = 0.0
                            trois = 0.0
                            deux = 0.0
                            quatre = 0.0
                            deux_cumul = 0.0
                            trois_cumul = 0.0
                            quatre_cumul = 0.0
                            total_g = 0.0
                            # print val1
                            # print(val2)
                            # print val3
                            # print val5

                            csvfile = open(fichier, 'r')
                            reader = csv.reader(csvfile)

                            b = ''
                            D = {}
                            dict_taux = {}
                            dq = []
                            total = 0.10
                            debit_set = []
                            deb = 0.0
                            nombre = 0.0
                            row_check = 0.0
                            check_decalage = 0.0
                            nombre_p_jour = []

                            for row in reader:
                                # f = date_test.match(row[1])
                                row_check = row_check + 1
                                f = row[1][0:10]
                                a = row[161]
                                gt = row[210]
                                tecc = row[236]
                                debit = row[171]
                                if f == 'date_utc_a':
                                    continue

                                datef = time.strptime(f, "%d/%m/%Y")

                                if datef > date_fin:
                                    continue
                                if datef < date_debut:
                                    if nombre == 0.0:
                                        deb = 0.0
                                        nombre = 0.0
                                        debit_set.append(deb)
                                        nombre_p_jour.append(nombre)
                                        check_decalage = check_decalage + 1
                                        break
                                    deb = deb / (nombre * 1000)
                                    nombre_p_jour.append(nombre)
                                    debit_set.append(deb)
                                    break
                                if row_check == val4:
                                    if nombre == 0.0:
                                        deb = 0.0
                                        nombre = 0.0
                                        debit_set.append(deb)
                                        nombre_p_jour.append(nombre)
                                        check_decalage = check_decalage + 1
                                        break
                                    deb = deb / (nombre * 1000)
                                    nombre_p_jour.append(nombre)
                                    debit_set.append(deb)
                                    break

                                row[241] = '_'.join(row[241].split(" "))
                                if row[241] in val3 and row[240] in val5 and tecc in tech:
                                    if b != str(f):
                                        date.append(str(f))
                                        b = str(f)
                                        if check_decalage > 0:
                                            if nombre == 0.0:
                                                deb = 0.0
                                                nombre = 0.0
                                                debit_set.append(deb)
                                                nombre_p_jour.append(nombre)
                                                check_decalage = check_decalage + 1
                                                continue
                                            deb = deb / (nombre * 1000)
                                            nombre_p_jour.append(nombre)
                                            debit_set.append(deb)
                                            deb = 0.0
                                            nombre = 0.0
                                        check_decalage = check_decalage + 1

                                    if debit != 'NULL' and row[200] != 'NULL' and float(row[200]) >= 512 and row[
                                        238] == 'Success':
                                        check_decalage = check_decalage + 1
                                        nombre = nombre + 1
                                        deb = deb + float(debit)
                                    check_decalage = check_decalage + 1

                            date.reverse()
                            debit_set.reverse()
                            nombre_p_jour.reverse()

                            # _____________________--PYGAL--_________________________
                            DEBIT_plot = pygal.Line(height=400, secondary_range=(
                            min(debit_set + debit_set), max(debit_set + debit_set)), x_label_rotation=90)
                            DEBIT_plot.title = 'Debit Moyens (Mb/s)'
                            DEBIT_plot.x_labels = date
                            DEBIT_plot.add('Debit (Mb/s)', debit_set, secondary=True)
                            DEBIT_plot.add('Nombre De tests', nombre_p_jour)
                            DEBIT_plot.render_in_browser()
                            DEBIT_plot.render_to_file("DEBIT_MOY_HTTP.svg")
                            # _____________________--PYGAL--_________________________

                        def taux_etat_par_date2(fichier, val1, val2, val3, val4, val5, tech, event):
                            # print(val3)
                            one_ex = []
                            two_ex = []
                            fichier = fichier
                            three_ex = []
                            four_ex = []
                            five_ex = []
                            six_ex = []
                            seven_ex = []
                            eight_ex = []
                            other_one_ex = []
                            other_two_ex = []
                            date_ex = []
                            one_cumul_exe = 0.0
                            two_cumul_exe = 0.0
                            three_cumul_exe = 0.0
                            four_cumul_exe = 0.0
                            five_cumul_exe = 0.0
                            six_cumul_exe = 0.0
                            seven_cumul_exe = 0.0
                            eight_cumul_exe = 0.0
                            other_one_cumul_exe = 0.0  # Succes comul
                            other_two_cumul_exe = 0.0  # Not Connected cumul
                            taux_one = 0.0
                            taux_two = 0.0
                            taux_three = 0.0
                            taux_five = 0.0
                            taux_six = 0.0
                            taux_seven = 0.0
                            taux_eight = 0.0
                            taux_succes = 0.0
                            taux_notconnected = 0.0
                            valeur_totale = 0.0
                            drop_total = 0.0
                            caf_cumul_exe = 0.0
                            connected_cumul_exe = 0.0
                            connected_set_exe = []
                            caf_sef_exe = []
                            drop_exe = []
                            legende = []

                            # Incoming
                            one_ex_incoming = []
                            two_ex_incoming = []
                            three_ex_incoming = []
                            four_ex_incoming = []
                            five_ex_incoming = []
                            six_ex_incoming = []
                            seven_ex_incoming = []
                            eight_ex_incoming = []
                            other_one_ex_incoming = []
                            other_two_ex_incoming = []
                            date_ex_incoming = []
                            one_cumul_exe_incoming = 0.0
                            two_cumul_exe_incoming = 0.0
                            three_cumul_exe_incoming = 0.0
                            four_cumul_exe_incoming = 0.0
                            five_cumul_exe_incoming = 0.0
                            six_cumul_exe_incoming = 0.0
                            seven_cumul_exe_incoming = 0.0
                            eight_cumul_exe_incoming = 0.0
                            other_one_cumul_exe_incoming = 0.0  # Succes comul
                            other_two_cumul_exe_incoming = 0.0  # Not Connected cumul
                            taux_one_incoming = 0.0
                            taux_two_incoming = 0.0
                            taux_three_incoming = 0.0
                            taux_four_incoming = 0.0
                            taux_five_incoming = 0.0
                            taux_six_incoming = 0.0
                            taux_seven_incoming = 0.0
                            taux_eight_incoming = 0.0
                            taux_succes_incoming = 0.0
                            taux_notconnected_incoming = 0.0
                            taux_connected_incoming = 0.0
                            valeur_totale_incoming = 0.0
                            drop_total_incoming = 0.0
                            caf_taux = 0.0
                            drop_exe_incoming = []
                            legende = []

                            # one_ex, two_ex, three_ex, four_ex, five_ex, six_ex, seven_ex, eight_ex, other_one_ex, other_two_ex, date_ex, one_cumul_exe, two_cumul_exe, three_cumul_exe, four_cumul_exe, five_cumul_exe, six_cumul_exe, seven_cumul_exe, eight_cumul_exe, other_one_cumul_exe, other_two_cumul_exe, drop_exe, drop_total, caf_cumul_exe, caf_sef_exe = etat_par_date(fichier,val1,val2,val3)
                            # valeur_totale = caf_cumul_exe + one_cumul_exe + two_cumul_exe + three_cumul_exe + four_cumul_exe + five_cumul_exe + six_cumul_exe + seven_cumul_exe + eight_cumul_exe + other_one_cumul_exe + other_two_cumul_exe

                            one_ex, two_ex, three_ex, four_ex, five_ex, six_ex, seven_ex, eight_ex, other_one_ex, other_two_ex, date_ex, one_cumul_exe, two_cumul_exe, three_cumul_exe, four_cumul_exe, five_cumul_exe, six_cumul_exe, seven_cumul_exe, eight_cumul_exe, other_one_cumul_exe, other_two_cumul_exe, drop_exe, drop_total, caf_cumul_exe, caf_set_exe, connected_set_exe, connected_cumul_exe = etat_par_date(
                                fichier, val1, val2, val3, val4, val5, tech)
                            valeur_totale = connected_cumul_exe + one_cumul_exe + two_cumul_exe + three_cumul_exe + four_cumul_exe + five_cumul_exe + six_cumul_exe + seven_cumul_exe + eight_cumul_exe + other_one_cumul_exe + other_two_cumul_exe + caf_cumul_exe
                            date_ex.reverse()

                            # print(valeur_totale_incoming)
                            # Incoming taux
                            taux_one = (one_cumul_exe * 100.0) / valeur_totale  # ERROR
                            taux_two = (two_cumul_exe * 100.0) / valeur_totale
                            taux_three = (three_cumul_exe * 100.0) / valeur_totale
                            taux_four = (four_cumul_exe * 100.0) / valeur_totale
                            taux_five = (five_cumul_exe * 100.0) / valeur_totale
                            taux_six = (six_cumul_exe * 100.0) / valeur_totale
                            taux_seven = (seven_cumul_exe * 100.0) / valeur_totale
                            taux_eight = (eight_cumul_exe * 100.0) / valeur_totale
                            taux_succes = (other_one_cumul_exe * 100.0) / valeur_totale
                            taux_notconnected = (other_two_cumul_exe * 100.0) / valeur_totale
                            taux_connected = (connected_cumul_exe * 100.0) / valeur_totale
                            taux_caf = (caf_cumul_exe * 100.0) / valeur_totale

                            # _______________________--Pygal--________________________________________________________

                            pie_chart2 = pygal.Pie(height=400)
                            pie_chart2.title = 'Voix Incoming'
                            pie_chart2.add('Cov Lost: ' + str(round(taux_one, 1)) + "%", taux_one)
                            pie_chart2.add('Mult-RAB t: ' + str(round(taux_two, 1)) + "%", taux_two)
                            pie_chart2.add('Low Cov: ' + str(round(taux_three, 1)) + "%", taux_three)
                            pie_chart2.add('Us_Beha: ' + str(round(taux_four, 1)) + "%", taux_four)
                            pie_chart2.add('CAF OS: ' + str(round(taux_five, 1)) + "%", taux_five)
                            pie_chart2.add('4G wout 2G3G f: ' + str(round(taux_six, 1)) + "%", taux_six)
                            pie_chart2.add('Quafy as CAF: ' + str(round(taux_seven, 1)) + "%", taux_seven)
                            pie_chart2.add('F2G unkno bear: ' + str(round(taux_eight, 1)) + "%", taux_eight)
                            pie_chart2.add('Succes: ' + str(round(taux_succes, 1)) + "%", taux_succes)
                            pie_chart2.add('Not Connected: ' + str(round(taux_notconnected, 1)) + "%",
                                           taux_notconnected)
                            pie_chart2.add('CAF: ' + str(round(taux_caf, 1)) + "%", taux_caf)
                            pie_chart2.add('Connected: ' + str(round(taux_connected, 1)) + "%", taux_connected)
                            pie_chart2.render_in_browser()
                            pie_chart2.render_to_file("Cause_Code.svg")

                            # __________________________________--Pygal--_____________________________________________________________

                        # val4 = taille_csv(reader)
                        # taille_web=taille_csv(reader_web)
                        # taille_video = taille_csv(reader_video)
                        # taille_usage=taille_csv2(reader_usage)

                        # CLASSE QUI GERE L INTERFACE DASHBOARD DATA ET BOUTONS PYGAL

                        class ScrollableWindow(QtGui.QMainWindow):

                            # , , , nb_set, , ,
                            def success_ratio3(self, date, success_set, success_taux, event):
                                # __________________________-------------------------PYGAL------------------------------------__________________________________________________________________________
                                success_plot = pygal.Line(height=400, include_x_axis=True, label_font_size=4,
                                                          title_font_size=26, x_title='Jours', y_title='Succes',
                                                          legend_at_bottom=True, x_label_rotation=90)
                                success_plot.title = 'SUCCESS_RATIO'
                                success_plot.x_labels = date
                                success_plot.add('Nombre_Success', success_set)
                                success_plot.add('Taux_Succes', success_taux, secondary=True)
                                success_plot.render_in_browser()
                                success_plot.render_to_file("Success_RATIO_data_http.svg")
                                # __________________________-------------------------PYGAL------------------------------------__________________________________________________________________________

                            def failure_ratio3(self, date, failure_set, failure_taux, event):
                                # __________________________-------------------------PYGAL------------------------------------__________________________________________________________________________
                                Failure_plot = pygal.Line(height=400, include_x_axis=True, label_font_size=4,
                                                          title_font_size=26, x_title='Jours', y_title='Echec',
                                                          legend_at_bottom=True, x_label_rotation=90)
                                Failure_plot.title = 'FAILURE_RATIO'
                                Failure_plot.x_labels = date
                                Failure_plot.add('Nombre_Echec', failure_set)
                                Failure_plot.add('Taux_Echec', failure_taux, secondary=True)
                                Failure_plot.render_in_browser()
                                Failure_plot.render_to_file("Failure_RATIO_http.svg")
                                # __________________________-------------------------PYGAL------------------------------------__________________________________________________________________________

                            def drop_ratio3(self, date, drop_set, drop_taux, event):
                                # _____________________--PYGAL--_________________________
                                Drop_plot = pygal.Line(height=400, include_x_axis=True, label_font_size=4,
                                                       title_font_size=26, x_title='Jours', y_title='Coupure',
                                                       legend_at_bottom=True, x_label_rotation=90)
                                Drop_plot.title = 'DROP_RATIO'
                                Drop_plot.x_labels = date
                                Drop_plot.add('Nombre_Drop', drop_set)
                                Drop_plot.add('Taux_Drop', drop_taux, secondary=True)
                                Drop_plot.render_in_browser()
                                Drop_plot.render_to_file("Drop_RATIO_http.svg")
                                # _____________________--PYGAL--_________________________

                            def latences3(self, date, latency, event):
                                # _________________________________________--PYGAL--______________________________________________
                                y = latency
                                nb_users_bar = pygal.Bar(height=400, include_x_axis=True, label_font_size=4,
                                                         title_font_size=26, x_title='Jours', y_title='Latence',
                                                         legend_at_bottom=True, x_label_rotation=90)
                                nb_users_bar.title = 'Latence Moyenne (ms)'
                                nb_users_bar.x_labels = date
                                nb_users_bar.add('Latence Moy(ms)', y)
                                nb_users_bar.render_in_browser()
                                nb_users_bar.render_to_file("LATENCE_Moy_HTT.svg")
                                # _________________________________________--PYGAL--______________________________________________

                            def debit_download_3(self, date, debit_set_download, nombre_p_jour_download, event):
                                # __________________________-------------------------PYGAL------------------------------------__________________________________________________________________________
                                success_plot = pygal.Line(height=400, include_x_axis=True, label_font_size=4,
                                                          title_font_size=26, x_title='Jours', y_title=' Debit DL',
                                                          legend_at_bottom=True, x_label_rotation=90)
                                success_plot.title = 'DEBIT MOY DOWNLOAD (Mb/s)'
                                success_plot.x_labels = date
                                success_plot.add('Nb_TEST_DL', nombre_p_jour_download)
                                success_plot.add('Moy DL (Mb/s)', debit_set_download, secondary=True)
                                success_plot.render_in_browser()
                                success_plot.render_to_file("DEBIT_Download_HTTP.svg")
                                # __________________________-------------------------PYGAL------------------------------------__________________________________________________________________________

                            def debit_upload_3(self, date, debit_set_upload, nombre_p_jour_upload, event):
                                # __________________________-------------------------PYGAL------------------------------------__________________________________________________________________________
                                success_plot = pygal.Line(height=400, include_x_axis=True, label_font_size=4,
                                                          title_font_size=26, x_title='Jours', y_title='Debit UL',
                                                          legend_at_bottom=True, x_label_rotation=90)
                                success_plot.title = 'DEBIT MOY UPLOAD (Mb/s)'
                                success_plot.x_labels = date
                                success_plot.add('Nb UL', nombre_p_jour_upload)
                                success_plot.add('Moy UL(Mb/s)', debit_set_upload, secondary=True)
                                success_plot.render_in_browser()
                                success_plot.render_to_file("DEBIT_MOY_UP_HTTP.svg")
                                # __________________________-------------------------PYGAL------------------------------------__________________________________________________________________________

                            def page_loading_time_3(self, date_web, sfr_web, nb_sfr_web, event):
                                # __________________________-------------------------PYGAL------------------------------------__________________________________________________________________________
                                success_plot = pygal.Line(height=400, include_x_axis=True, label_font_size=4,
                                                          title_font_size=26, x_title='Jours', y_title='PLT',
                                                          legend_at_bottom=True, x_label_rotation=90)
                                success_plot.title = 'PAGE LOADING TIME WEB"sfr.fr" (s)'
                                success_plot.x_labels = date_web
                                success_plot.add('Nb Resultats', nb_sfr_web)
                                success_plot.add('Moyenne (s)', sfr_web, secondary=True)
                                success_plot.render_in_browser()
                                success_plot.render_to_file("Page_Loading_Time_web.svg")
                                # __________________________-------------------------PYGAL------------------------------------__________________________________________________________________________

                            def success_web_3(self, date_web, taux_succes_web_set, nb_succes_web_set, event):
                                # __________________________-------------------------PYGAL------------------------------------__________________________________________________________________________
                                # success_plot = pygal.Line(height=400, secondary_range=(min(success_taux + success_set), max(success_taux + success_set)), x_label_rotation=90)
                                success_plot = pygal.Line(height=400, include_x_axis=True, label_font_size=4,
                                                          title_font_size=26, x_title='Jours', y_title='Succes',
                                                          legend_at_bottom=True, x_label_rotation=90)
                                success_plot.title = 'Succes Ration WEB'
                                success_plot.x_labels = date_web
                                success_plot.add('Nb Resultats', nb_succes_web_set)
                                success_plot.add('TAUX Sicc %', taux_succes_web_set, secondary=True)
                                success_plot.render_in_browser()
                                success_plot.render_to_file("Success_Ratio_WEB.svg")
                                # __________________________-------------------------PYGAL------------------------------------__________________________________________________________________________

                            def timeout_web_3(self, date_web, taux_timeout_web_set, nb_timeout_web_set, event):
                                # __________________________-------------------------PYGAL------------------------------------__________________________________________________________________________
                                success_plot = pygal.Line(height=400, include_x_axis=True, label_font_size=4,
                                                          title_font_size=26, x_title='Jours', y_title='Timout',
                                                          legend_at_bottom=True, x_label_rotation=90)
                                success_plot.title = 'Timeout Ratio WEB'
                                success_plot.x_labels = date_web
                                success_plot.add('Nb Resultats', nb_timeout_web_set)
                                success_plot.add('Taux (%)', taux_timeout_web_set, secondary=True)
                                success_plot.render_in_browser()
                                success_plot.render_to_file("Timeout_Ratio_Web.svg")
                                # __________________________-------------------------PYGAL------------------------------------__________________________________________________________________________

                            def failure_web_3(self, date_web, taux_failure_web_set, nb_failure_web_set, event):
                                # __________________________-------------------------PYGAL------------------------------------__________________________________________________________________________
                                success_plot = pygal.Line(height=400, include_x_axis=True, label_font_size=4,
                                                          title_font_size=26, x_title='Jours', y_title='Echec',
                                                          legend_at_bottom=True, x_label_rotation=90)
                                success_plot.title = 'FAILURE RATIO WEB'
                                success_plot.x_labels = date_web
                                success_plot.add('Nb Echec', nb_failure_web_set)
                                success_plot.add('Taux Echec (%)', taux_failure_web_set, secondary=True)
                                success_plot.render_in_browser()
                                success_plot.render_to_file("FAILURE_RATIO_WEB.svg")
                                # __________________________-------------------------PYGAL------------------------------------__________________________________________________________________________

                            def buffering_time_video_3(self, date_video, nb_test_video_set, time_video_buffering_set,
                                                       event):
                                # _____________________--PYGAL--_________________________
                                Drop_plot = pygal.Line(height=400, include_x_axis=True, label_font_size=4,
                                                       title_font_size=26, x_title='Jours', y_title='BTV',
                                                       legend_at_bottom=True, x_label_rotation=90)
                                Drop_plot.title = 'BUFFERING TIME VIDEO(s)'
                                Drop_plot.x_labels = date_video
                                Drop_plot.add('Nb_Resultats', nb_test_video_set)
                                Drop_plot.add('Buff Time(s)', time_video_buffering_set, secondary=True)
                                Drop_plot.render_in_browser()
                                Drop_plot.render_to_file("buffering_time_video.svg")
                                # _____________________--PYGAL--_________________________

                            def drop_video_3(self, date_video, drop_set_video, nb_drop_set_video, event):
                                # __________________________-------------------------PYGAL------------------------------------__________________________________________________________________________
                                # success_plot = pygal.Line(height=400, secondary_range=(min(success_taux + success_set), max(success_taux + success_set)), x_label_rotation=90)
                                success_plot = pygal.Line(height=400, include_x_axis=True, label_font_size=4,
                                                          title_font_size=26, x_title='Jours', y_title='Coupure',
                                                          legend_at_bottom=True, x_label_rotation=90)
                                success_plot.title = 'DROP Ration VIDEO'
                                success_plot.x_labels = date
                                success_plot.add('Nb Resultats', nb_drop_set_video)
                                success_plot.add('TAUX drop %', drop_set_video, secondary=True)
                                success_plot.render_in_browser()
                                success_plot.render_to_file("Drop_Ratio_VIDEO.svg")
                                # __________________________-------------------------PYGAL------------------------------------__________________________________________________________________________

                            def timeout_video_3(self, date_video, timeout_set_video, nb_timeout_set_video, event):
                                # __________________________-------------------------PYGAL------------------------------------__________________________________________________________________________
                                success_plot = pygal.Line(height=400, include_x_axis=True, label_font_size=4,
                                                          title_font_size=26, x_title='Jours', y_title='Succes',
                                                          legend_at_bottom=True, x_label_rotation=90)
                                success_plot.title = 'Timeout Ratio VIDEO'
                                success_plot.x_labels = date_video
                                success_plot.add('Nb Resultats', nb_timeout_set_video)
                                success_plot.add('Taux (%)', timeout_set_video, secondary=True)
                                success_plot.render_in_browser()
                                success_plot.render_to_file("Timeout_Ratio_Video.svg")
                                # __________________________-------------------------PYGAL------------------------------------__________________________________________________________________________

                            # LES BOUTONS DE LINTERFACE DASHBOARD DATA
                            def __init__(self, fig):
                                # self.setWindowTitle('DASHBOARD DATA SFR PERF')
                                plt.suptitle('DASHBOARD KPI DATA', fontsize=18, bbox={'facecolor': 'white', 'pad': 5})
                                plt.figure(1).patch.set_facecolor('white')

                                self.qapp = QtGui.QApplication([])
                                self.qapp.setStyleSheet('background-color: red;')
                                QtGui.QMainWindow.__init__(self)
                                self.widget = QtGui.QWidget()
                                self.setCentralWidget(self.widget)
                                self.widget.setLayout(QtGui.QVBoxLayout())
                                self.widget.layout().setContentsMargins(0, 0, 0, 0)
                                self.widget.layout().setSpacing(0)

                                # self.setStyleSheet("background:white")
                                self.fig = fig
                                self.canvas = FigureCanvas(self.fig)
                                FigureCanvas(self.fig).setStyleSheet('background-color: red;')

                                self.canvas.draw()
                                self.scroll = QtGui.QScrollArea(self.widget)
                                self.scroll.setWidget(self.canvas)

                                self.nav = NavigationToolbar(self.canvas, self.widget)
                                self.widget.layout().addWidget(self.nav)
                                self.widget.layout().addWidget(self.scroll)

                                # ------------------------*-LES BOUTTONS PYGAL-*----------------------------------
                                i = 230
                                # Bouton Success_Ratio_HTTP
                                self.button1 = QtGui.QPushButton('Succ HTTP', self)
                                self.button1.clicked.connect(
                                    lambda: self.success_ratio3(date_http, success_set, success_taux, event))
                                self.button1.setGeometry(i, 0, 90, 30)
                                i = i + 90
                                self.button1.setStyleSheet('font-size: 8pt; font-family: Courier;')
                                layout = QtGui.QVBoxLayout(self)
                                layout.addWidget(self.button1)

                                # Bouton Failure_Ratio_HTTP
                                self.button1 = QtGui.QPushButton('Fail HTTP', self)
                                self.button1.clicked.connect(
                                    lambda: self.failure_ratio3(date_http, failure_set, failure_taux, event))
                                self.button1.setGeometry(i, 0, 90, 30)
                                i = i + 90
                                self.button1.setStyleSheet('font-size: 8pt; font-family: Courier;')
                                layout = QtGui.QVBoxLayout(self)
                                layout.addWidget(self.button1)

                                # Bouton Drop_Ratio_HTTP
                                self.button1 = QtGui.QPushButton('Drop HTTP', self)
                                self.button1.clicked.connect(
                                    lambda: self.drop_ratio3(date_http, drop_set, drop_taux, event))
                                self.button1.setGeometry(i, 0, 90, 30)
                                i = i + 90
                                self.button1.setStyleSheet('font-size: 8pt; font-family: Courier;')
                                layout = QtGui.QVBoxLayout(self)
                                layout.addWidget(self.button1)

                                # Bouton Latence_HTTP
                                self.button1 = QtGui.QPushButton('Lat HTTP', self)
                                self.button1.clicked.connect(lambda: self.latences3(date_http, latency, event))
                                self.button1.setGeometry(i, 0, 90, 30)
                                i = i + 90
                                self.button1.setStyleSheet('font-size: 8pt; font-family: Courier;')
                                layout = QtGui.QVBoxLayout(self)
                                layout.addWidget(self.button1)

                                # Bouton DEBIT_DL
                                self.button1 = QtGui.QPushButton('Debit DL', self)
                                self.button1.clicked.connect(
                                    lambda: self.debit_download_3(date_http, debit_set_download, nombre_p_jour_download,
                                                                  event))
                                self.button1.setGeometry(i, 0, 90, 30)
                                i = i + 90
                                # self.button1.setGeometry(1600, 400, 90, 30)
                                self.button1.setStyleSheet('font-size: 8pt; font-family: Courier;')
                                layout = QtGui.QVBoxLayout(self)
                                layout.addWidget(self.button1)

                                # Bouton DEBIT_UL
                                self.button1 = QtGui.QPushButton('Debit UL', self)
                                self.button1.clicked.connect(
                                    lambda: self.debit_upload_3(date_http, debit_set_upload, nombre_p_jour_upload,
                                                                event))
                                self.button1.setGeometry(i, 0, 90, 30)
                                i = i + 90
                                self.button1.setStyleSheet('font-size: 8pt; font-family: Courier;')
                                layout = QtGui.QVBoxLayout(self)
                                layout.addWidget(self.button1)

                                # Bouton Page_Loading_Time
                                self.button1 = QtGui.QPushButton('PLoad Time', self)
                                self.button1.clicked.connect(
                                    lambda: self.page_loading_time_3(date_web, sfr, nb_sfr, event))
                                self.button1.setGeometry(i, 0, 90, 30)
                                i = i + 90
                                self.button1.setStyleSheet('font-size: 8pt; font-family: Courier;')
                                layout = QtGui.QVBoxLayout(self)
                                layout.addWidget(self.button1)

                                # Bouton sUCCESS_Ratio_WEB
                                self.button1 = QtGui.QPushButton('Succ WEB', self)
                                self.button1.clicked.connect(
                                    lambda: self.success_web_3(date_web, taux_succes_web_set, nb_succes_web_set, event))
                                self.button1.setGeometry(i, 0, 90, 30)
                                i = i + 90
                                self.button1.setStyleSheet('font-size: 8pt; font-family: Courier;')
                                layout = QtGui.QVBoxLayout(self)
                                layout.addWidget(self.button1)

                                # Bouton fAILURE_Ratio_WEB
                                self.button1 = QtGui.QPushButton('Fail WEB', self)
                                self.button1.clicked.connect(
                                    lambda: self.failure_web_3(date_web, taux_failure_web_set, nb_failure_web_set,
                                                               event))
                                self.button1.setGeometry(i, 0, 90, 30)
                                i = i + 90
                                self.button1.setStyleSheet('font-size: 8pt; font-family: Courier;')
                                layout = QtGui.QVBoxLayout(self)
                                layout.addWidget(self.button1)

                                # Bouton tIMEOUT_Ratio_WEB
                                self.button1 = QtGui.QPushButton('T_Out WEB', self)
                                self.button1.clicked.connect(
                                    lambda: self.timeout_web_3(date_web, taux_timeout_web_set, nb_timeout_web_set,
                                                               event))
                                self.button1.setGeometry(i, 0, 90, 30)
                                i = i + 90
                                self.button1.setStyleSheet('font-size: 8pt; font-family: Courier;')
                                layout = QtGui.QVBoxLayout(self)
                                layout.addWidget(self.button1)

                                # Bouton VIDEO_BUFFERING_TIME
                                self.button1 = QtGui.QPushButton('Buff Video', self)
                                self.button1.clicked.connect(
                                    lambda: self.buffering_time_video_3(date_video, nb_test_video_set,
                                                                        time_video_buffering_set, event))
                                self.button1.setGeometry(i, 0, 90, 30)
                                i = i + 90
                                self.button1.setStyleSheet('font-size: 8pt; font-family: Courier;')
                                layout = QtGui.QVBoxLayout(self)
                                layout.addWidget(self.button1)

                                # Bouton Drop_Ratio_VIDEO
                                self.button1 = QtGui.QPushButton('Drop Video', self)
                                self.button1.clicked.connect(
                                    lambda: self.drop_video_3(date_video, drop_video_set, nb_drop_video_set, event))
                                self.button1.setGeometry(i, 0, 90, 30)
                                i = i + 90
                                self.button1.setStyleSheet('font-size: 8pt; font-family: Courier;')
                                layout = QtGui.QVBoxLayout(self)
                                layout.addWidget(self.button1)

                                # Bouton tIMEOUT_Ratio_VIDEO
                                self.button1 = QtGui.QPushButton('T_Out Video', self)
                                self.button1.clicked.connect(
                                    lambda: self.timeout_video_3(date_video, timeout_set, nb_timeout_set, event))
                                self.button1.setGeometry(i, 0, 90, 30)
                                i = i + 90
                                self.button1.setStyleSheet('font-size: 8pt; font-family: Courier;')
                                layout = QtGui.QVBoxLayout(self)
                                layout.addWidget(self.button1)

                                # RETOUR A LA CONFIG DE LA FENETRE
                                self.setGeometry(10, 29, 1900, 1000)
                                # figManager = plt.get_current_fig_manager()
                                # figManager.window.showMaximized()

                                # self.widget.setStyleSheet('background-color: white;')
                                plt.figure(1).patch.set_facecolor('white')
                                self.show()
                                plt.close()
                                # exit(self.qapp.exec_())
                                self.qapp.exec_()

                                # Bouton Success_Ratio

                        """
                                           class excuteur_pro():
                                               global legraphe_pyg
                                               if event:
                                                   taux_incoming2 = taux_incoming2(reader, val1, val2, val3, val4, val5, tech)
                                               #legraphe_pyg = taux_outgoing2(reader, val1, val2, val3, val4, val5, tech)

                                           # success_ratio(reader)
                                           #print(val3)
                                           """
                        taille_usage = 0.0
                        val4 = 0.0
                        taille_web = 0.0
                        taille_video = 0.0

                        # Thread(target=csfb(reader,val1,val2,val3,val4,val5,tech)).start()
                        # Thread(target=failure_ratio2(reader,val1,val2,val3,val4,val5,tech)).start()
                        # Thread(target=drop_ratio2(reader,val1,val2,val3,val4,val5,tech)).start()
                        # Thread(target=drop_ratio2(reader,val1,val2,val3,val4,val5,tech)).start()
                        # Thread(target=success_ratio2(reader,val1,val2,val3,val4,val5,tech)).start()
                        # Thread(target=mobile_gt(reader, val1, val2, val3,val5,tech)).start()
                        # pie_chart=Thread(target=taux_incoming(reader,val1,val2,val3,val4,val5,tech)).start()
                        # pie_chart2=Thread(target=taux_outgoing(reader,val1,val2,val3,val4,val5,tech)).start()
                        # bar2=Thread(target=ticket_profil(reader,val1,val2,val3,val4,val5,tech)).start()

                        # csfb(reader,val1,val2,val3,val4,val5)
                        # failure_ratio2(reader,val1,val2,val3,val4,val5)
                        # drop_ratio2(reader,val1,val2,val3,val4,val5)
                        # success_ratio2(reader,val1,val2,val3,val4,val5)
                        # mobile_gt(reader, val1, val2, val3,val5)
                        # taux_incoming(reader,val1,val2,val3,val4,val5)
                        # taux_outgoing(reader,val1,val2,val3,val4,val5)
                        # ticket_profil(reader,val1,val2,val3,val4,val5)

                        # f = Figure(figsize=(5, 4), dpi=100)
                        # root_2 = tix.Tk()
                        # root_2.wm_title("Dashboard")
                        params = {'legend.fontsize': 10, 'legend.linewidth': 0, }
                        # canvas = FigureCanvasTkAgg(f, master=choix)
                        # canvas.show()
                        # canvas.get_tk_widget().pack(side=Tk.TOP, fill=Tk.BOTH, expand=1)
                        # toolbar = NavigationToolbar2TkAgg(canvas, root)
                        # toolbar.update()
                        # canvas._tkcanvas.pack(side=Tk.TOP, fill=Tk.BOTH, expand=1)

                        # plt.xticks(rotation='vertical', fontsize=8)
                        # plt.rcParams.update(params)

                        # pie_chart = taux_incoming(reader, val1, val2, val3, val4, val5, tech)
                        # pie_chart2 = taux_outgoing(reader, val1, val2, val3, val4, val5, tech)
                        # nb_users_bar = ticket_profil(reader, val1, val2, val3, val4, val5, tech)
                        # failure_graph=failure_ratio2(reader,val1,val2,val3,val4,val5,tech)
                        # success_graph=success_ratio2(reader, val1, val2, val3, val4, val5, tech)
                        # drop_graph=drop_ratio2(reader,val1,val2,val3,val4,val5,tech)
                        # csfb_graph=csfb(reader,val1,val2,val3,val4,val5,tech)
                        # taux_etat_par_date(reader, val1, val2, val3, val4, val5, tech)

                        # latence_moy(reader,val1,val2,val3,val4,val5,tech)
                        # debit_moy(reader, val1, val2, val3, val4, val5, tech)
                        # debit_moy_download(reader,val1,val2,val3,val4,val5,tech)
                        # debit_moy_upload(reader,val1,val2,val3,val4,val5,tech)




                        #from multiprocessing import Process
                        if __name__ == '__main__':
                            # print("JE SUIS LA")
                            # arguments_usage=reader_usage, val1, val2, val3, taille_usage, val5, tech
                            # arguments_http=reader, val1, val2, val3, val4, val5, tech
                            # t1 = Thread(target=wrapper,args=(usage_ul_dl,arguments_usage,q1))
                            # t2 = Thread(target=wrapper,args=(success_ratio2, arguments_http, q2))

                            #t1 = Thread(target=success_ratio2, args=(reader, val1, val2, val3, val4, val5, tech))
                            #t4 = Thread(target=usage_ul_dl,args=(reader_usage, val1, val2, val3, taille_usage, val5, tech))
                            #t2 = Thread(target=page_loading_time,args=(reader_web, val1, val2, val3, taille_web, val5, tech))
                            #t3 = Thread(target=buffering_time_video,args=(reader_video, val1, val2, val3, taille_video, val5, tech))
                            success_ratio2(reader, val1, val2, val3, val4, val5, tech)
                            usage_ul_dl(reader_usage, val1, val2, val3, taille_usage, val5, tech)
                            page_loading_time(reader_web, val1, val2, val3, taille_web, val5, tech)
                            buffering_time_video(reader_video, val1, val2, val3, taille_video, val5, tech)


                            # t1.join
                            # t2.start()
                            #t4.start()
                            #t1.start()
                            #t2.start()
                            #t3.start()

                            #t4.join()
                            #t1.join()
                            #t2.join()
                            #t3.join()

                            # t2.join()
                            # t1.join()

                            # Thread(target=page_loading_time(reader_web, val1, val2, val3, taille_web, val5, tech)).start()
                            # Thread(target=buffering_time_video(reader_video, val1, val2, val3, taille_video, val5,tech)).start()
                            # t2=Thread(target=usage_ul_dl(reader_usage, val1, val2, val3, taille_usage, val5, tech)).join(3)
                            # t1 = Thread(target=success_ratio2(reader, val1, val2, val3, val4, val5, tech))
                            # t2.join()
                            # t1.join()
                            # t2.start() and t1.start()
                            # print('FINIS')
                            # t2.start()
                            # t1.start()
                            # p1=Process(target=success_ratio2(reader, val1, val2, val3, val4, val5, tech))
                            # p1.start()
                            # p2 = Process(target=page_loading_time(reader_web, val1, val2, val3, taille_web, val5, tech))
                            # p2.start()
                            # p3 = Process(target=buffering_time_video(reader_video, val1, val2, val3, taille_video, val5,tech))
                            # p3.start()
                            # p4 = Process(target=usage_ul_dl(reader_usage, val1, val2, val3, taille_usage, val5, tech))
                            # p4.start()
                            # p1.join()
                            # p2.join()
                            # p3.join()
                            # p4.join()
                            # commands=[success_ratio2(reader, val1, val2, val3, val4, val5, tech),usage_ul_dl(reader_usage, val1, val2, val3, taille_usage, val5, tech)]
                            # import parallelpy
                            # parallelpy.run(commands)

                            # date_http, success_set, success_taux, failure_set, failure_taux, drop_set, drop_taux, nb_set, latency, debit_set_download, nombre_p_jour_download, debit_set_upload, nombre_p_jour_upload=success_ratio2(reader, val1, val2, val3, val4, val5, tech)
                            # date_web, sfr_web, nb_sfr_web, taux_succes_web_set, nb_succes_web_set, taux_failure_web_set, nb_failure_web_set, taux_timeout_web_set, nb_timeout_web_set=page_loading_time(reader_web, val1, val2, val3, taille_web, val5, tech)
                            # date_video, nb_test_video_set, time_video_buffering_set, drop_set_video, nb_drop_set_video, timeout_set_video, nb_timeout_set_video=buffering_time_video(reader_video, val1, val2, val3, taille_video, val5,tech)
                            # date_usage, google_up, google_down, youtube_up, youtube_down, facebook_up, facebook_down, leboncoin_up, leboncoin_down, nb_google_up_set, nb_google_down_set, nb_youtube_up_set, nb_youtube_down_set, nb_facebook_up_set, nb_facebook_down_set, nb_leboncoin_up_set, nb_leboncoin_down_set=usage_ul_dl(reader_usage, val1, val2, val3, taille_usage, val5, tech)


                            # date_usage, google_up, google_down, youtube_up, youtube_down, facebook_up, facebook_down, leboncoin_up, leboncoin_down, nb_google_up_set, nb_google_down_set, nb_youtube_up_set, nb_youtube_down_set, nb_facebook_up_set, nb_facebook_down_set, nb_leboncoin_up_set, nb_leboncoin_down_set=q1.get()
                            # date_http, success_set, success_taux, failure_set, failure_taux, drop_set, drop_taux, nb_set, latency, debit_set_download, nombre_p_jour_download, debit_set_upload, nombre_p_jour_upload = q2.get()
                            a = ScrollableWindow(figure_data)

                            # print("RECUPERATION DES DONNEES  ** HTTP **")
                            # success_ratio2(reader, val1, val2, val3, val4, val5, tech)

                            # print("RECUPERATION DES DONNEES  ** WEB **")
                            # page_loading_time(reader_web, val1, val2, val3, taille_web, val5, tech)
                            # success_web(reader_web, val1, val2, val3, taille_web, val5, tech)
                            # failure_web(reader_web, val1, val2, val3, taille_web, val5, tech)
                            # timeout_web(reader_web, val1, val2, val3, taille_web, val5, tech)

                            # print("RECUPERATION DES DONNEES  ** VIDEO **")
                            # buffering_time_video(reader_video, val1, val2, val3, taille_video, val5, tech)

                            # drop_video(reader_video, val1, val2, val3, taille_video, val5, tech)
                            # timeout_video(reader_video, val1, val2, val3, taille_video, val5, tech)

                            # print("RECUPERATION DES DONNEES  ** USAGE ET APPLICATION **")
                            # usage_ul_dl(reader_usage, val1, val2, val3, taille_usage, val5, tech)

                            # Appels Fonction VIDEO
                            # reader_video



                            # p = gridplot([success_graph, failure_graph, drop_graph, csfb_graph, nb_users_bar, pie_chart, pie_chart2],ncols=3, plot_width=500, plot_height=500)

                            # show(p)

                            # plt.legend(loc='best')
                            # figManager = plt.get_current_fig_manager()
                            # figManager.window.showMaximized()
                            # from matplotlib.widgets import Button as buttonn

                            """
                                               #bouttons matplotlib
                                               #Bouton incoming
                                               #b2ax = plt.axes([0.25, 0.4, 0.01, 0.01])
                                               #bouttonni = buttonn(b2ax, '', color='grey')
                                               #bouttonni.on_clicked(lambda event: taux_incoming2(reader, val1, val2, val3, val4, val5, tech,event))

                                               #Bouton Debit UPLOAD
                                               b2ax_upload= plt.axes([0.93, 0.48, 0.01, 0.01])
                                               bouttonni2 = buttonn(b2ax_upload, '', color='grey')
                                               bouttonni2.on_clicked(lambda event: debit_upload_3(reader, val1, val2, val3, val4, val5, tech, event))
                                               # Bouton Debit Download

                                               b2ax_download = plt.axes([0.49, 0.48, 0.01, 0.01])
                                               bouttonni4 = buttonn(b2ax_download, '', color='grey')
                                               bouttonni4.on_clicked(lambda event: debit_download_3(reader, val1, val2, val3, val4, val5, tech, event))
                                               #Bouton Latences
                                               b2ax_latences = plt.axes([0.93, 0.65, 0.01, 0.01])
                                               bouttonni3 = buttonn(b2ax_latences, '', color='grey')
                                               bouttonni3.on_clicked(lambda event: latences3(reader, val1, val2, val3, val4, val5, tech,event))


                                               # Bouton Parc_Mobile
                                               #b2ax_mobile = plt.axes([0.75, 0.4, 0.01, 0.01])
                                               #bouttonni5 = buttonn(b2ax_mobile, '', color='grey')
                                               #bouttonni5.on_clicked(lambda event: mobile_gt3(reader, val1, val2, val3, val5, tech, event))

                                               # Bouton Success_Ratio
                                               b2ax_SSRatio = plt.axes([0.49, 0.83, 0.01, 0.01])
                                               bouttonni6 = buttonn(b2ax_SSRatio, '', color='grey')
                                               bouttonni6.on_clicked(lambda event: success_ratio3(reader, val1, val2, val3, val4, val5, tech,event))
                                               # Bouton Failure_Ratio
                                               b2ax_FRRatio = plt.axes([0.93, 0.83, 0.01, 0.01])
                                               bouttonni7 = buttonn(b2ax_FRRatio, '', color='grey')
                                               bouttonni7.on_clicked(lambda event: failure_ratio3(reader, val1, val2, val3, val4, val5, tech, event))
                                               # Bouton Drop_Ratio
                                               b2ax_DPRatio = plt.axes([0.49, 0.65, 0.01, 0.01])
                                               bouttonni8 = buttonn(b2ax_DPRatio, '', color='grey')
                                               bouttonni8.on_clicked(lambda event: drop_ratio3(reader, val1, val2, val3, val4, val5, tech, event))

                                               # Bouton Debit_Moy
                                               #b2ax_DebitMoy =  plt.axes([0.9, 0.1, 0.01, 0.01])
                                               #bouttonni9 = buttonn(b2ax_DebitMoy, '', color='grey')
                                               #bouttonni9.on_clicked(lambda event: debit_moy_3(reader, val1, val2, val3, val4, val5, tech, event))

                                               #Bouton CAUSE CODE
                                               #b2ax_cc = plt.axes([0.58, 0.4, 0.01, 0.01])
                                               #bouttonni10 = buttonn(b2ax_cc, '', color='grey')
                                               #bouttonni10.on_clicked(lambda event: taux_etat_par_date2(reader, val1, val2, val3, val4, val5, tech, event))

                                               #plt.tight_layout()
                                               #plt.show()

                                               #plt.show()
                                               #mpld3.show()
                                               #Thread(target=plt.show()).start()
                                               #Thread(target=mpld3.show()).start()
                                               """
                sans_dpt_filtre(val1, val2, val3, tech, val5, departement, file)
            else:
                def avec_dpt_filtre(val1, val2, val3, tech, val5, departement, file):
                    if val1 and val2 :
                        plt.suptitle('DASHBOARD KPI DATA DEPARTEMENT: '+departement, fontsize=18, bbox={'facecolor': 'white', 'pad': 5})
                        plt.figure(1).patch.set_facecolor('white')
                        figure_data, axes = plt.subplots(figsize=(40, 40))
                        import datetime
                        #print(val1)
                        #print(val2)
                        #print(val3)
                        #print(tech)
                        #print(val5)


                        #choix_scenario()
                        #print(value1)
                        #print(value2)

                        #file = ouvrir_fich()
                        #global  value2
                        #global  value1
                        #value2 = combo2.entry.get()
                        #print(value1)
                        #print(value2)

                        csv_opner_result = re.compile(r".*'(.*:.*)'\, .*", re.IGNORECASE)
                        csv_opner_result_general = re.compile(r".*'(.*:.*\/).*\.csv'\, .*", re.IGNORECASE)
                        f = csv_opner_result.search(str(file))
                        f2=csv_opner_result_general.search(str(file))

                        # fichier = open(f.group(1), 'r')
                        # print(f.group(1))
                        # reader = csv.reader(fichier, delimiter=';')
                        reader = f.group(1)
                        reader2=f2.group(1)

                        #READER 1 CONCERNE LE FICHIER HTTP
                        #READER2 CONCERNE LE FICHIER GENERALISTE POUR WEB ET COMPANIE

                        #WEB FILE
                        reader_web=reader2+"WEB.csv"

                        # VIDEO FILE
                        reader_video = reader2 + "VIDEO.csv"

                        # USAGE FILE
                        reader_usage = reader2 + "APPLICATION.csv"

                        #LES DEPARTEMENTS AVEC G2R CI-LAC
                        ci_lac_eci_tac = []

                        #FICHIER G2R
                        csv_opner_result_g2r = re.compile(r".*'(.*:.*\/).*\.csv'\, .*", re.IGNORECASE)
                        fichier_g2r = csv_opner_result_g2r.search(str(csvfile))
                        fichier_g2r = str(fichier_g2r.group(1)) + 'g2r.csv'
                        fichier_g2r = open(fichier_g2r, 'r')
                        fichier_g2r_reader = csv.reader(fichier_g2r, delimiter=';')
                        #print('ON EST DANS LA DATA '+departement)
                        departement_code_postal={'1':'Ain','2':'Aisne','3':'Allier','4':'Alpes_de_Haute-Provence','5':'Hautes-Alpes','6':'Alpes-Maritimes','7':'Ardeche','8':'Ardennes','9':'Ariege','10':'Aube','11':'Aude','12':'Aveyron','13':'Bouches_du_Rhone','14':'Calvados','15':'Cantal','16':'Charente','17':'Charente_Maritime','18':'Cher','19':'Correze','21':'Cote_dOr','22':'Cotes_dArmor','23':'Creuse','24':'Dordogne','25':'Doubs','26':'Drome','27':'Eure','28':'Eure-et-Loir','29':'Finistere','30':'Gard','31':'Haute-Garonne','32':'Gers','33':'Gironde','34':'Herault','35':'Ille-et-Vilaine','36':'Indre','37':'Indre-et-Loire','38':'Isere','39':'Jura','40':'Landes','41':'Loir-et-Cher','42':'Loire','43':'Haute-Loire','44':'Loire-Atlantique','45':'Loiret','46':'Lot','47':'Lot-et-Garonne','48':'Lozere','49':'Maine-et-Loire','50':'Manche','51':'Marne','52':'Haute-Marne','53':'Mayenne','54':'Meurthe-et-Moselle','55':'Meuse','56':'Morbihan','57':'Moselle','58':'Nievre','59':'Nord','60':'Oise','61':'Orne','62':'Pas-de-Calais','63':'Puy-de-Dome','64':'Pyrenees-Atlantiques','65':'Hautes-Pyrenees','66':'Pyrenees-Orientales','67':'Bas-Rhin','68':'Haut-Rhin','69':'Rhone','70':'Haute-Saone','71':'Saone-et-Loire','72':'Sarthe','73':'Savoie','74':'Haute-Savoie','75':'Paris','76':'Seine-Maritime','77':'Seine-et-Marne','78':'Yvelines','79':'Deux-Sevres','80':'Somme','81':'Tarn','82':'Tarn-et-Garonne','83':'Var','84':'Vaucluse','85':'Vendee','86':'Vienne','87':'Haute-Vienne','88':'Vosges','89':'Yonne','90':'Territoire-de-Belfort','91':'Essonne','92':'Hauts-de-Seine','93':'Seine-St-Denis','94':'Val-de-Marne','95':'Val-dOise','2A':'Corse_du_Sud','2B':'Haute-Corse'}

                        g2r_code_postal = ''
                        departement_eci_tac_ci_lac = ''
                        fichier_ci_lac_decriture = open("g2r_departement.txt","w")

                        #fichier_ci_lac_decriture.write()
                        fichier_ci_lac_decriture.write("\n______________________________________________________________________________________________")
                        fichier_ci_lac_decriture.write("\n\n\n         VOICI LA LISTE DES DEPARTEMENT ET LEUR CORRESPONDANCE EN CI-LAC/eCI-TAC \n\n\n")
                        fichier_ci_lac_decriture.write("______________________________________________________________________________________________\n\n\n")

                        file.close()
                        ci_lac_eci_tac_intermediaire = []
                        ci_lac_eci_tac_intermediaire_var = ''
                        for row in fichier_g2r_reader:
                            ci = row[21]
                            lac = row[22]
                            num_g2r = row[18]
                            region = row[34]
                            eci = row[38]
                            tac = row[40]


                            if eci:
                                if len(num_g2r)==5:
                                    g2r_code_postal=num_g2r[:1]
                                    if g2r_code_postal in departement_code_postal:
                                        departement_eci_tac_ci_lac=departement_code_postal[g2r_code_postal]+' '+eci + '-' + tac
                                        ci_lac_eci_tac.append(departement_eci_tac_ci_lac)
                                        fichier_ci_lac_decriture.write('\n\n')
                                        fichier_ci_lac_decriture.write(departement_eci_tac_ci_lac)
                                        if str(departement_code_postal[g2r_code_postal]) in str(departement):
                                            ci_lac_eci_tac_intermediaire.append(departement_code_postal[g2r_code_postal] + ' ' + eci + '-' + tac)

                                if len(num_g2r)==6:
                                    g2r_code_postal = num_g2r[:2]
                                    if g2r_code_postal in departement_code_postal:
                                        departement_eci_tac_ci_lac = departement_code_postal[g2r_code_postal] + ' ' + eci + '-' + tac
                                        ci_lac_eci_tac.append(departement_eci_tac_ci_lac)
                                        fichier_ci_lac_decriture.write('\n\n')
                                        fichier_ci_lac_decriture.write(departement_eci_tac_ci_lac)
                                        if str(departement_code_postal[g2r_code_postal]) in str(departement):
                                            ci_lac_eci_tac_intermediaire.append(departement_code_postal[g2r_code_postal] + ' ' + eci + '-' + tac)

                            else:
                                if ci:
                                    if len(num_g2r) == 5:
                                        g2r_code_postal = num_g2r[:1]

                                        if g2r_code_postal in departement_code_postal:
                                            departement_eci_tac_ci_lac = departement_code_postal[g2r_code_postal] + ' ' + ci + '-' + lac
                                            ci_lac_eci_tac.append(departement_eci_tac_ci_lac)
                                            fichier_ci_lac_decriture.write('\n\n')
                                            fichier_ci_lac_decriture.write(departement_eci_tac_ci_lac)
                                            if str(departement_code_postal[g2r_code_postal])in str(departement):
                                                ci_lac_eci_tac_intermediaire.append(departement_code_postal[g2r_code_postal]+' '+eci + '-' + tac)

                                    if len(num_g2r) == 6:
                                        g2r_code_postal = num_g2r[:2]
                                        if g2r_code_postal in departement_code_postal:
                                            departement_eci_tac_ci_lac = departement_code_postal[g2r_code_postal] + ' ' + ci + '-' + lac
                                            ci_lac_eci_tac.append(departement_eci_tac_ci_lac)
                                            fichier_ci_lac_decriture.write('\n\n')
                                            fichier_ci_lac_decriture.write(departement_eci_tac_ci_lac)
                                            #print(departement_code_postal[g2r_code_postal] +' ET VOICI TON DPT:  ' +departement)
                                            #print(departement_code_postal[g2r_code_postal]+' et ton dpt: '+departement)
                                            #if (departement_code_postal[g2r_code_postal]=='Paris'):
                                                #print(departement_code_postal[g2r_code_postal])
                                            #if (departement_code_postal[g2r_code_postal]==' Paris'):
                                                #print(departement_code_postal[g2r_code_postal]+' *')
                                            #if (departement_code_postal[g2r_code_postal]=='Paris '):
                                                #print(departement_code_postal[g2r_code_postal]+' **')
                                            #if (departement_code_postal[g2r_code_postal]==' Paris '):
                                                #print(departement_code_postal[g2r_code_postal]+' * *')
                                            #if (departement_code_postal[g2r_code_postal] in 'Paris'):
                                                #print(departement_code_postal[g2r_code_postal]+'   IN  ')
                                            #print(str(departement_code_postal[g2r_code_postal] in departement)+'  -->  '+departement_code_postal[g2r_code_postal]+' IN '+departement)
                                            if departement_code_postal[g2r_code_postal] in departement:
                                                ci_lac_eci_tac_intermediaire_var=departement_code_postal[g2r_code_postal]+' '+eci + '-' + tac
                                                ci_lac_eci_tac_intermediaire.append(ci_lac_eci_tac_intermediaire_var)

                        #print(departement)
                        #for elem in ci_lac_eci_tac:
                            #fichier_ci_lac_decriture.write('\n\n')
                            #fichier_ci_lac_decriture.write(elem)
                        fichier_ci_lac_decriture.close()

                        #print(ci_lac_eci_tac_intermediaire)
                        def taille_csv(fichier):
                            csvfile = open(fichier, 'r')
                            # print(csvfile)
                            reader = csv.reader(csvfile)
                            k = 0.0
                            for row in reader:
                                k = k + 1
                            return k

                        def taille_csv2(fichier):
                            csvfile = open(fichier, 'r')
                            # print(csvfile)
                            reader = csv.reader(csvfile)
                            k = 0.0
                            for row in reader:
                                k = k + 1
                            return k


                        #HTTP
                        def success_ratio2(fichier, val1, val2, val3,val4,val5,tech):
                            print("\n JE SUIS DANS HTTP \n")
                            date_debut=time.strptime(val1, "%d/%m/%Y")
                            date_fin = time.strptime(val2, "%d/%m/%Y")

                            global succes
                            global success_taux_var
                            global success_set
                            global success_taux

                            global failure
                            global failure_taux_var
                            global failure_set
                            global failure_taux

                            global drop
                            global drop_taux_var
                            global drop_set
                            global drop_taux

                            global nombre_latence
                            global lat
                            global latency

                            global deb_upload_http
                            global nombre_debit_upload
                            global debit_set_upload
                            global nombre_p_jour_upload

                            global deb_download_http
                            global nombre_debit_download
                            global debit_set_download
                            global nombre_p_jour_download

                            #global fichier

                            global nb
                            global nb_set
                            global date_http
                            date_http=[]

                            date=[]

                            succes = 0.0
                            success_taux_var = 0.0
                            success_set = []
                            success_taux = []

                            failure = 0.0
                            failure_taux_var = 0.0
                            failure_set = []
                            failure_taux = []

                            drop = 0.0
                            drop_taux_var = 0.0
                            drop_set = []
                            drop_taux = []

                            nombre_latence = 0.0
                            lat = 0.0
                            latency = []

                            deb_upload_http = 0.0
                            nombre_debit_upload = 0.0
                            debit_set_upload=[]
                            nombre_p_jour_upload = []

                            deb_download_http = 0.0
                            nombre_debit_download = 0.0
                            debit_set_download = []
                            nombre_p_jour_download = []

                            drop_taux=[]
                            fichier = fichier


                            nb = 0.0
                            nb_set = []
                            date_http = []
                            csvfile = open(fichier, 'r')
                            # print(csvfile)
                            reader = csv.reader(csvfile)

                            b = ''
                            var_ajout=0.0
                            row_check=0.0
                            for row in reader:
                                row_check=row_check+1
                                #print(row_check)
                                f = row[1][0:10]
                                latence = row[175]
                                tecc=row[235]
                                debit = row[171]
                                ci_http=row[42]
                                lac_http=row[43]
                                if f=='date_utc_a':
                                    continue
                                datef = time.strptime(f, "%d/%m/%Y")
                                if datef>date_fin:
                                    continue

                                if datef<date_debut:
                                    if nombre_debit_download == 0.0:
                                        deb_download_http = 0.0
                                        nombre_debit_download = 0.0
                                        debit_set_download.append(deb_download_http)
                                        nombre_p_jour_download.append(nombre_debit_download)
                                    else:
                                        deb_download_http = deb_download_http / (nombre_debit_download * 1000)
                                        debit_set_download.append(deb_download_http)
                                        nombre_p_jour_download.append(nombre_debit_download)
                                        deb_download_http = 0.0
                                        nombre_debit_download = 0.0
                                    if nombre_debit_upload == 0.0:
                                        deb_upload_http = 0.0
                                        nombre_debit_upload = 0.0
                                        debit_set_upload.append(deb_upload_http)
                                        nombre_p_jour_upload.append(nombre_debit_upload)
                                    else:
                                        deb_upload_http = deb_upload_http / (nombre_debit_upload * 1000)
                                        debit_set_upload.append(deb_upload_http)
                                        nombre_p_jour_upload.append(nombre_debit_upload)
                                        deb_upload_http = 0.0
                                        nombre_debit_upload = 0.0
                                    if nombre_latence == 0:
                                        lat = 0.0
                                        nombre_latence = 0.0
                                        latency.append(lat)
                                    else:
                                        lat = lat / nombre_latence
                                        latency.append(lat)
                                        lat = 0.0
                                        nombre_latence = 0.0
                                    if nb > 0.0:
                                        success_taux_var = float(succes * 100 / nb)
                                        success_taux.append(success_taux_var)
                                        success_set.append(succes)
                                        failure_taux_var = float(failure * 100 / nb)
                                        failure_taux.append(failure_taux_var)
                                        failure_set.append(failure)
                                        drop_taux_var = float(drop * 100 / nb)
                                        drop_taux.append(drop_taux_var)
                                        drop_set.append(drop)
                                        nb_set.append(nb)

                                        succes = 0.0
                                        success_taux_var = 0.0
                                        failure = 0.0
                                        failure_taux_var = 0.0
                                        drop = 0.0
                                        drop_taux_var = 0.0

                                        nb = 0
                                        var_ajout = var_ajout + 1
                                    else:
                                        success_taux.append(0.0)
                                        success_set.append(0.0)
                                        failure_taux.append(0.0)
                                        failure_set.append(0.0)
                                        drop_taux.append(0.0)
                                        drop_set.append(0.0)
                                        nb_set.append(0.0)
                                        succes = 0.0
                                        success_taux_var = 0.0
                                        failure = 0.0
                                        failure_taux_var = 0.0
                                        drop = 0.0
                                        drop_taux_var = 0.0

                                        nb = 0
                                        var_ajout = var_ajout + 1
                                    break
                                """
                                if row_check==val4:
                                    if nombre_debit_download == 0.0:
                                        deb_download_http = 0.0
                                        nombre_debit_download = 0.0
                                        debit_set_download.append(deb_download_http)
                                        nombre_p_jour_download.append(nombre_debit_download)
                                    else:
                                        deb_download_http = deb_download_http / (nombre_debit_download * 1000)
                                        debit_set_download.append(deb_download_http)
                                        nombre_p_jour_download.append(nombre_debit_download)
                                        deb_download_http = 0.0
                                        nombre_debit_download = 0.0
                                    if nombre_debit_upload == 0.0:
                                        deb_upload_http = 0.0
                                        nombre_debit_upload = 0.0
                                        debit_set_upload.append(deb_upload_http)
                                        nombre_p_jour_upload.append(nombre_debit_upload)
                                    else:
                                        deb_upload_http = deb_upload_http / (nombre_debit_upload * 1000)
                                        debit_set_upload.append(deb_upload_http)
                                        nombre_p_jour_upload.append(nombre_debit_upload)
                                        deb_upload_http = 0.0
                                        nombre_debit_upload = 0.0
                                    if nombre_latence == 0:
                                        lat = 0.0
                                        nombre_latence = 0.0
                                        latency.append(lat)
                                    else:
                                        lat = lat / nombre_latence
                                        latency.append(lat)
                                        lat = 0.0
                                        nombre_latence = 0.0
                                    if nb > 0.0:
                                        success_taux_var = float(succes * 100 / nb)
                                        success_taux.append(success_taux_var)
                                        success_set.append(succes)
                                        failure_taux_var = float(failure * 100 / nb)
                                        failure_taux.append(failure_taux_var)
                                        failure_set.append(failure)
                                        drop_taux_var = float(drop * 100 / nb)
                                        drop_taux.append(drop_taux_var)
                                        drop_set.append(drop)
                                        nb_set.append(nb)

                                        succes = 0.0
                                        success_taux_var = 0.0
                                        failure = 0.0
                                        failure_taux_var = 0.0
                                        drop = 0.0
                                        drop_taux_var = 0.0

                                        nb = 0
                                        var_ajout = var_ajout + 1
                                    else:
                                        success_taux.append(0.0)
                                        success_set.append(0.0)
                                        failure_taux.append(0.0)
                                        failure_set.append(0.0)
                                        drop_taux.append(0.0)
                                        drop_set.append(0.0)
                                        nb_set.append(0.0)
                                        succes = 0.0
                                        success_taux_var = 0.0
                                        failure = 0.0
                                        failure_taux_var = 0.0
                                        drop = 0.0
                                        drop_taux_var = 0.0

                                        nb = 0
                                        var_ajout = var_ajout + 1
                                    break
                                """


                                row[241]= '_'.join(row[241].split(" "))

                                #print("HELLO")
                                if ci_http=='NULL' or lac_http=='NULL':
                                    continue
                                if (departement + ' ' + ci_http + '-' + lac_http) not in ci_lac_eci_tac_intermediaire :
                                    #print(departement + ' ' + ci_http + '-' + lac_http +'DANS LA LISTE C EST: ')
                                    continue
                                if str(row[233])=='SFR' and str(row[241]) in val3 and row[240] in val5 and tecc in tech:

                                    #print(departement + ' ' + ci_http + '-' + lac_http )
                                    variable = val2

                                    if b != str(f):

                                        # Graphes independants

                                        date_http.append(str(f))
                                        b = str(f)
                                        #a chaque nouvelle date je met le nombre de succes a 0 ainsi que le nombre total succes et autres inclus
                                        if var_ajout>0:
                                            if nombre_debit_download == 0.0:
                                                deb_download_http = 0.0
                                                nombre_debit_download = 0.0
                                                debit_set_download.append(deb_download_http)
                                                nombre_p_jour_download.append(nombre_debit_download)
                                            else:
                                                deb_download_http = deb_download_http / (nombre_debit_download * 1000)
                                                debit_set_download.append(deb_download_http)
                                                nombre_p_jour_download.append(nombre_debit_download)
                                                deb_download_http = 0.0
                                                nombre_debit_download = 0.0
                                            if nombre_debit_upload == 0.0:
                                                deb_upload_http = 0.0
                                                nombre_debit_upload = 0.0
                                                debit_set_upload.append(deb_upload_http)
                                                nombre_p_jour_upload.append(nombre_debit_upload)
                                            else:
                                                deb_upload_http = deb_upload_http / (nombre_debit_upload * 1000)
                                                debit_set_upload.append(deb_upload_http)
                                                nombre_p_jour_upload.append(nombre_debit_upload)
                                                deb_upload_http = 0.0
                                                nombre_debit_upload = 0.0
                                            if nombre_latence == 0:
                                                lat = 0.0
                                                nombre_latence = 0.0
                                                latency.append(lat)
                                            else:
                                                lat = lat / nombre_latence
                                                latency.append(lat)
                                                lat = 0.0
                                                nombre_latence = 0.0
                                            if nb>0.0:
                                                success_taux_var=float(succes*100/nb)
                                                success_taux.append(success_taux_var)
                                                success_set.append(succes)
                                                failure_taux_var = float(failure * 100 / nb)
                                                failure_taux.append(failure_taux_var)
                                                failure_set.append(failure)
                                                drop_taux_var = float(drop * 100 / nb)
                                                drop_taux.append(drop_taux_var)
                                                drop_set.append(drop)
                                                nb_set.append(nb)

                                                succes = 0.0
                                                success_taux_var=0.0
                                                failure=0.0
                                                failure_taux_var=0.0
                                                drop=0.0
                                                drop_taux_var=0.0

                                                nb = 0
                                                var_ajout = var_ajout + 1
                                            else:
                                                success_taux.append(0.0)
                                                success_set.append(0.0)
                                                failure_taux.append(0.0)
                                                failure_set.append(0.0)
                                                drop_taux.append(0.0)
                                                drop_set.append(0.0)
                                                nb_set.append(0.0)
                                                succes = 0.0
                                                success_taux_var = 0.0
                                                failure = 0.0
                                                failure_taux_var = 0.0
                                                drop = 0.0
                                                drop_taux_var = 0.0

                                                nb = 0
                                                var_ajout = var_ajout + 1

                                            var_ajout=var_ajout+1

                                        # DEBIT DOWNLOAD
                                        if debit != 'NULL' and row[200] != 'NULL' and float(row[200]) >= 512 and row[238] == 'Success' and row[239] == 'Download':
                                            nombre_debit_download = nombre_debit_download + 1
                                            deb_download_http = deb_download_http + float(debit)
                                        # DEBIT UPLOAD
                                        if debit != 'NULL' and row[200] != 'NULL' and float(row[200]) >= 512 and row[238] == 'Success' and row[239] == 'Upload':
                                            nombre_debit_upload = nombre_debit_upload + 1
                                            deb_upload_http = deb_upload_http + float(debit)

                                        #LATENCE
                                        if latence != 'NULL' and row[200] != 'NULL' and float(row[200]) >= 512:
                                            nombre_latence = nombre_latence + 1
                                            lat = lat + float(latence)

                                        #ETATS
                                        if str(row[238]) == 'Success' or str(row[238]) == 'Canceled':
                                            succes = succes + 1
                                            nb = nb + 1
                                            var_ajout = var_ajout + 1
                                            continue
                                        if str(row[238]) == 'Failure' or str(row[238]) == 'Timeout':
                                            failure = failure + 1
                                            nb = nb + 1
                                            var_ajout = var_ajout + 1
                                            continue
                                        if str(row[238]) == 'Drop':
                                            drop=drop+1
                                            nb = nb + 1
                                            var_ajout = var_ajout + 1
                                            continue
                                        else:
                                            if row[238] != 'N/A':
                                                nb = nb + 1
                                                var_ajout = var_ajout + 1



                                    else:
                                        var_ajout = var_ajout + 1

                                        # DEBIT DOWNLOAD
                                        if debit != 'NULL' and row[200] != 'NULL' and float(row[200]) >= 512 and row[238] == 'Success' and row[239] == 'Download':
                                            nombre_debit_download = nombre_debit_download + 1
                                            deb_download_http = deb_download_http + float(debit)
                                        # DEBIT UPLOAD
                                        if debit != 'NULL' and row[200] != 'NULL' and float(row[200]) >= 512 and row[238] == 'Success' and row[239] == 'Upload':
                                            nombre_debit_upload = nombre_debit_upload + 1
                                            deb_upload_http = deb_upload_http + float(debit)

                                        # LATENCE
                                        if latence != 'NULL' and row[200] != 'NULL' and float(row[200]) >= 512:
                                            nombre_latence = nombre_latence + 1
                                            lat = lat + float(latence)

                                        # ETATS
                                        if str(row[238]) == 'Success' or str(row[238]) == 'Canceled':
                                            succes = succes + 1
                                            nb = nb + 1
                                            var_ajout = var_ajout + 1
                                            continue
                                        if str(row[238]) == 'Failure' or str(row[238]) == 'Timeout':
                                            failure = failure + 1
                                            nb = nb + 1
                                            var_ajout = var_ajout + 1
                                            continue
                                        if str(row[238]) == 'Drop':
                                            drop=drop+1
                                            nb = nb + 1
                                            var_ajout = var_ajout + 1
                                            continue
                                        else:
                                            if row[238] != 'N/A':
                                                nb = nb + 1
                                                var_ajout = var_ajout + 1


                                    var_ajout = var_ajout + 1

                            if datef >= date_debut:
                                if nombre_debit_download == 0.0:
                                    deb_download_http = 0.0
                                    nombre_debit_download = 0.0
                                    debit_set_download.append(deb_download_http)
                                    nombre_p_jour_download.append(nombre_debit_download)
                                else:
                                    deb_download_http = deb_download_http / (nombre_debit_download * 1000)
                                    debit_set_download.append(deb_download_http)
                                    nombre_p_jour_download.append(nombre_debit_download)
                                    deb_download_http = 0.0
                                    nombre_debit_download = 0.0
                                if nombre_debit_upload == 0.0:
                                    deb_upload_http = 0.0
                                    nombre_debit_upload = 0.0
                                    debit_set_upload.append(deb_upload_http)
                                    nombre_p_jour_upload.append(nombre_debit_upload)
                                else:
                                    deb_upload_http = deb_upload_http / (nombre_debit_upload * 1000)
                                    debit_set_upload.append(deb_upload_http)
                                    nombre_p_jour_upload.append(nombre_debit_upload)
                                    deb_upload_http = 0.0
                                    nombre_debit_upload = 0.0
                                if nombre_latence == 0:
                                    lat = 0.0
                                    nombre_latence = 0.0
                                    latency.append(lat)
                                else:
                                    lat = lat / nombre_latence
                                    latency.append(lat)
                                    lat = 0.0
                                    nombre_latence = 0.0
                                if nb > 0.0:
                                    success_taux_var = float(succes * 100 / nb)
                                    success_taux.append(success_taux_var)
                                    success_set.append(succes)
                                    failure_taux_var = float(failure * 100 / nb)
                                    failure_taux.append(failure_taux_var)
                                    failure_set.append(failure)
                                    drop_taux_var = float(drop * 100 / nb)
                                    drop_taux.append(drop_taux_var)
                                    drop_set.append(drop)
                                    nb_set.append(nb)

                                    succes = 0.0
                                    success_taux_var = 0.0
                                    failure = 0.0
                                    failure_taux_var = 0.0
                                    drop = 0.0
                                    drop_taux_var = 0.0

                                    nb = 0
                                    var_ajout = var_ajout + 1
                                else:
                                    success_taux.append(0.0)
                                    success_set.append(0.0)
                                    failure_taux.append(0.0)
                                    failure_set.append(0.0)
                                    drop_taux.append(0.0)
                                    drop_set.append(0.0)
                                    nb_set.append(0.0)
                                    succes = 0.0
                                    success_taux_var = 0.0
                                    failure = 0.0
                                    failure_taux_var = 0.0
                                    drop = 0.0
                                    drop_taux_var = 0.0

                                    nb = 0
                                    var_ajout = var_ajout + 1


                            date_http.reverse()
                            success_set.reverse()
                            success_taux.reverse()
                            failure_set.reverse()
                            failure_taux.reverse()
                            drop_set.reverse()
                            drop_taux.reverse()
                            #nb_set.reverse()
                            latency.reverse()
                            debit_set_download.reverse()
                            nombre_p_jour_download.reverse()
                            debit_set_upload.reverse()
                            nombre_p_jour_upload.reverse()
                            date=date_http

                            if len(date)>0:

                                # ________________________________________________--___**_ SUCCESS _**___--___________________________________________________
                                # _____________________***PARAMS***________________________________________

                                ax1 = plt.subplot2grid((22, 9), (0, 0), colspan=4)
                                plt.xticks(rotation='vertical', fontsize=8)
                                plt.title('SUCCESS RATIO HTTP ' + date[0] + ' au ' + date[len(date) - 1])
                                params = {'legend.fontsize': 10,
                                          'legend.linewidth': 0, }
                                plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%d/%m/%Y'))
                                plt.gca().xaxis.set_major_locator(mdates.DayLocator())

                                # _____________________***AXE 1***________________________________________


                                x = [dt.datetime.strptime(d, '%d/%m/%Y').date() for d in date]
                                y = success_set
                                ax1.bar(x, y, color='seagreen', zorder=1)
                                ax1.set_ylabel('Nb succs', color='seagreen')
                                for tl in ax1.get_yticklabels():
                                    tl.set_color('seagreen')

                                    # _____________________***AXE 2***________________________________________

                                ax2 = ax1.twinx()
                                x = [dt.datetime.strptime(d, '%d/%m/%Y').date() for d in date]
                                y = success_taux
                                ax2.plot(x, y, color='red', zorder=2)
                                plt.legend(loc='best')
                                ax2.set_xlabel('Jour')
                                ax2.set_ylabel('Taux de de succes HTTP', color='red')
                                ax2.grid(True)
                                ax2.xaxis_date()
                                for t2 in ax2.get_yticklabels():
                                    t2.set_color('red')

                                    # ________________________________________________--___**_ FAILURE _**___--___________________________________________________
                                # _____________________***PARAMS***________________________________________

                                ax1 = plt.subplot2grid((22, 9), (0, 5), colspan=4)
                                plt.xticks(rotation='vertical', fontsize=8)
                                plt.title('FAILURE RATIO HTTP ' + date[0] + ' au ' + date[len(date) - 1])
                                params = {'legend.fontsize': 10,
                                          'legend.linewidth': 0, }
                                plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%d/%m/%Y'))
                                plt.gca().xaxis.set_major_locator(mdates.DayLocator())

                                # _____________________***AXE 1***________________________________________


                                x = [dt.datetime.strptime(d, '%d/%m/%Y').date() for d in date]
                                y = failure_set
                                ax1.bar(x, y, color='red', zorder=1)
                                ax1.set_ylabel('Nb echc', color='red')
                                for tl in ax1.get_yticklabels():
                                    tl.set_color('red')

                                    # _____________________***AXE 2***________________________________________

                                ax2 = ax1.twinx()
                                x = [dt.datetime.strptime(d, '%d/%m/%Y').date() for d in date]
                                y = failure_taux
                                ax2.plot(x, y, color='green', zorder=2)
                                plt.legend(loc='best')
                                ax2.set_xlabel('Jour')
                                ax2.set_ylabel('Taux de de echc HTTP', color='green')
                                ax2.grid(True)
                                ax2.xaxis_date()
                                for t2 in ax2.get_yticklabels():
                                    t2.set_color('green')

                                # ________________________________________________--___**_ DROP _**___--___________________________________________________
                                # _____________________***PARAMS***________________________________________

                                ax1 = plt.subplot2grid((22, 9), (2, 0), colspan=4)
                                plt.xticks(rotation='vertical', fontsize=8)
                                plt.title('DROP RATIO HTTP ' + date[0] + ' au ' + date[len(date) - 1])
                                params = {'legend.fontsize': 10,
                                          'legend.linewidth': 0, }
                                plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%d/%m/%Y'))
                                plt.gca().xaxis.set_major_locator(mdates.DayLocator())

                                # _____________________***AXE 1***________________________________________


                                x = [dt.datetime.strptime(d, '%d/%m/%Y').date() for d in date]
                                y = drop_set
                                ax1.bar(x, y, color='orangered', zorder=1)
                                ax1.set_ylabel('Nb coup', color='orangered')
                                for tl in ax1.get_yticklabels():
                                    tl.set_color('orangered')

                                    # _____________________***AXE 2***________________________________________

                                ax2 = ax1.twinx()
                                x = [dt.datetime.strptime(d, '%d/%m/%Y').date() for d in date]
                                y = drop_taux
                                ax2.plot(x, y, color='darkblue', zorder=2)
                                plt.legend(loc='best')
                                ax2.set_xlabel('Jour')
                                ax2.set_ylabel('Taux de de coup HTTP', color='darkblue')
                                ax2.grid(True)
                                ax2.xaxis_date()
                                for t2 in ax2.get_yticklabels():
                                    t2.set_color('darkblue')


                                    # ________________________________________________--___**_ LATENCES _**___--___________________________________________________
                                ax1 = plt.subplot2grid((22, 9), (2, 5), colspan=4)
                                x = [dt.datetime.strptime(d, '%d/%m/%Y').date() for d in date]
                                y = latency
                                plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%d/%m/%Y'))
                                plt.gca().xaxis.set_major_locator(mdates.DayLocator())
                                plt.bar(x, y, color='dodgerblue')
                                plt.xticks(rotation='vertical', fontsize=8)
                                plt.xlabel('Jour')
                                ax1.set_ylabel('Moyenne LATENCE (ms)', color='dodgerblue')
                                for tl in ax1.get_yticklabels():
                                    tl.set_color('dodgerblue')
                                plt.grid(True)
                                plt.title('LATENCES HTTP (ms)')
                                # ________________________________________________--___**_ FIN_LATENCES _**___--___________________________________________________



                                # ________________________________________________--___**_ DEBIT download HTTP _**___--___________________________________________________
                                # _____________________***PARAMS***________________________________________

                                ax1 = plt.subplot2grid((22, 9), (4, 0), colspan=4)
                                plt.xticks(rotation='vertical', fontsize=8)
                                plt.title('DEBITS Moyens DOWNLOAD HTTP (Mbit/s) ' + date[0] + ' au ' + date[len(date) - 1])
                                params = {'legend.fontsize': 10,
                                          'legend.linewidth': 0, }
                                plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%d/%m/%Y'))
                                plt.gca().xaxis.set_major_locator(mdates.DayLocator())

                                # _____________________***AXE 1***________________________________________


                                x = [dt.datetime.strptime(d, '%d/%m/%Y').date() for d in date]
                                y = nombre_p_jour_download
                                ax1.bar(x, y, color='indigo', zorder=1)
                                ax1.set_ylabel('Nb tests DL', color='indigo')
                                for tl in ax1.get_yticklabels():
                                    tl.set_color('indigo')

                                # _____________________***AXE 2***________________________________________

                                ax2 = ax1.twinx()
                                x = [dt.datetime.strptime(d, '%d/%m/%Y').date() for d in date]
                                y = debit_set_download
                                ax2.plot(x, y, color='crimson', zorder=2)
                                plt.legend(loc='best')
                                ax2.set_xlabel('Jour')
                                ax2.set_ylabel('Moy debit DL (Mb/s)', color='crimson')
                                ax2.grid(True)
                                ax2.xaxis_date()
                                for t2 in ax2.get_yticklabels():
                                    t2.set_color('crimson')

                                    # ________________________________________________--___**_ FIN DEBIT download HTTP _**___--___________________________________________________



                                    # ________________________________________________--___**_ DEBIT UPLOAD HTTP _**___--___________________________________________________
                                # _____________________***PARAMS***________________________________________

                                ax1 = plt.subplot2grid((22, 9), (4, 5), colspan=4)
                                plt.xticks(rotation='vertical', fontsize=8)
                                plt.title('DEBITS Moyens UPLOAD HTTP (Mb/s) ' + date[0] + ' au ' + date[len(date) - 1])
                                params = {'legend.fontsize': 10,
                                          'legend.linewidth': 0, }
                                plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%d/%m/%Y'))
                                plt.gca().xaxis.set_major_locator(mdates.DayLocator())

                                # _____________________***AXE 1***________________________________________


                                x = [dt.datetime.strptime(d, '%d/%m/%Y').date() for d in date]
                                y = nombre_p_jour_upload
                                ax1.bar(x, y, color='indigo', zorder=1)
                                ax1.set_ylabel('Nb tests UL', color='indigo')
                                for tl in ax1.get_yticklabels():
                                    tl.set_color('indigo')

                                # _____________________***AXE 2***________________________________________

                                ax2 = ax1.twinx()
                                x = [dt.datetime.strptime(d, '%d/%m/%Y').date() for d in date]
                                y = debit_set_upload
                                ax2.plot(x, y, color='crimson', zorder=2)
                                plt.legend(loc='best')
                                ax2.set_xlabel('Jour')
                                ax2.set_ylabel('Moy debit UL (Mb/s)', color='crimson')
                                ax2.grid(True)
                                ax2.xaxis_date()
                                for t2 in ax2.get_yticklabels():
                                    t2.set_color('crimson')

                                    # ________________________________________________--___**_ FIN DEBIT UPLOAD HTTP _**___--___________________________________________________

                            else:
                                date = ['05/04/2017']
                                success_set.reverse()
                                success_taux.reverse()
                                failure_set.reverse()
                                failure_taux.reverse()
                                drop_set.reverse()
                                drop_taux.reverse()
                                # nb_set.reverse()
                                latency.reverse()
                                debit_set_download.reverse()
                                nombre_p_jour_download.reverse()
                                debit_set_upload.reverse()
                                nombre_p_jour_upload.reverse()

                                # ________________________________________________--___**_ SUCCESS _**___--___________________________________________________
                                # _____________________***PARAMS***________________________________________

                                ax1 = plt.subplot2grid((22, 9), (0, 0), colspan=4)
                                plt.xticks(rotation='vertical', fontsize=8)
                                plt.title('SUCCESS RATIO HTTP ')
                                params = {'legend.fontsize': 10,
                                          'legend.linewidth': 0, }
                                plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%d/%m/%Y'))
                                plt.gca().xaxis.set_major_locator(mdates.DayLocator())

                                # _____________________***AXE 1***________________________________________


                                x = [dt.datetime.strptime(d, '%d/%m/%Y').date() for d in date]
                                y = success_set
                                ax1.bar(x, y, color='seagreen', zorder=1)
                                ax1.set_ylabel('Nb succs', color='seagreen')
                                for tl in ax1.get_yticklabels():
                                    tl.set_color('seagreen')

                                    # _____________________***AXE 2***________________________________________

                                ax2 = ax1.twinx()
                                x = [dt.datetime.strptime(d, '%d/%m/%Y').date() for d in date]
                                y = success_taux
                                ax2.plot(x, y, color='red', zorder=2)
                                plt.legend(loc='best')
                                ax2.set_xlabel('Jour')
                                ax2.set_ylabel('Taux de de succes HTTP', color='red')
                                ax2.grid(True)
                                ax2.xaxis_date()
                                for t2 in ax2.get_yticklabels():
                                    t2.set_color('red')

                                    # ________________________________________________--___**_ FAILURE _**___--___________________________________________________
                                # _____________________***PARAMS***________________________________________

                                ax1 = plt.subplot2grid((22, 9), (0, 5), colspan=4)
                                plt.xticks(rotation='vertical', fontsize=8)
                                plt.title('FAILURE RATIO HTTP ')
                                params = {'legend.fontsize': 10,
                                          'legend.linewidth': 0, }
                                plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%d/%m/%Y'))
                                plt.gca().xaxis.set_major_locator(mdates.DayLocator())

                                # _____________________***AXE 1***________________________________________


                                x = [dt.datetime.strptime(d, '%d/%m/%Y').date() for d in date]
                                y = failure_set
                                ax1.bar(x, y, color='red', zorder=1)
                                ax1.set_ylabel('Nb echc', color='red')
                                for tl in ax1.get_yticklabels():
                                    tl.set_color('red')

                                    # _____________________***AXE 2***________________________________________

                                ax2 = ax1.twinx()
                                x = [dt.datetime.strptime(d, '%d/%m/%Y').date() for d in date]
                                y = failure_taux
                                ax2.plot(x, y, color='green', zorder=2)
                                plt.legend(loc='best')
                                ax2.set_xlabel('Jour')
                                ax2.set_ylabel('Taux de de echc HTTP', color='green')
                                ax2.grid(True)
                                ax2.xaxis_date()
                                for t2 in ax2.get_yticklabels():
                                    t2.set_color('green')

                                # ________________________________________________--___**_ DROP _**___--___________________________________________________
                                # _____________________***PARAMS***________________________________________

                                ax1 = plt.subplot2grid((22, 9), (2, 0), colspan=4)
                                plt.xticks(rotation='vertical', fontsize=8)
                                plt.title('DROP RATIO HTTP ')
                                params = {'legend.fontsize': 10,
                                          'legend.linewidth': 0, }
                                plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%d/%m/%Y'))
                                plt.gca().xaxis.set_major_locator(mdates.DayLocator())

                                # _____________________***AXE 1***________________________________________


                                x = [dt.datetime.strptime(d, '%d/%m/%Y').date() for d in date]
                                y = drop_set
                                ax1.bar(x, y, color='orangered', zorder=1)
                                ax1.set_ylabel('Nb coup', color='orangered')
                                for tl in ax1.get_yticklabels():
                                    tl.set_color('orangered')

                                    # _____________________***AXE 2***________________________________________

                                ax2 = ax1.twinx()
                                x = [dt.datetime.strptime(d, '%d/%m/%Y').date() for d in date]
                                y = drop_taux
                                ax2.plot(x, y, color='darkblue', zorder=2)
                                plt.legend(loc='best')
                                ax2.set_xlabel('Jour')
                                ax2.set_ylabel('Taux de de coup HTTP', color='darkblue')
                                ax2.grid(True)
                                ax2.xaxis_date()
                                for t2 in ax2.get_yticklabels():
                                    t2.set_color('darkblue')


                                    # ________________________________________________--___**_ LATENCES _**___--___________________________________________________
                                ax1 = plt.subplot2grid((22, 9), (2, 5), colspan=4)
                                x = [dt.datetime.strptime(d, '%d/%m/%Y').date() for d in date]
                                y = latency
                                plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%d/%m/%Y'))
                                plt.gca().xaxis.set_major_locator(mdates.DayLocator())
                                plt.bar(x, y, color='dodgerblue')
                                plt.xticks(rotation='vertical', fontsize=8)
                                plt.xlabel('Jour')
                                ax1.set_ylabel('Moyenne LATENCE (ms)', color='dodgerblue')
                                for tl in ax1.get_yticklabels():
                                    tl.set_color('dodgerblue')
                                plt.grid(True)
                                plt.title('LATENCES HTTP (ms)')
                                # ________________________________________________--___**_ FIN_LATENCES _**___--___________________________________________________



                                # ________________________________________________--___**_ DEBIT download HTTP _**___--___________________________________________________
                                # _____________________***PARAMS***________________________________________

                                ax1 = plt.subplot2grid((22, 9), (4, 0), colspan=4)
                                plt.xticks(rotation='vertical', fontsize=8)
                                plt.title('DEBITS Moyens DOWNLOAD HTTP (Mbit/s) ')
                                params = {'legend.fontsize': 10,
                                          'legend.linewidth': 0, }
                                plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%d/%m/%Y'))
                                plt.gca().xaxis.set_major_locator(mdates.DayLocator())

                                # _____________________***AXE 1***________________________________________


                                x = [dt.datetime.strptime(d, '%d/%m/%Y').date() for d in date]
                                y = nombre_p_jour_download
                                ax1.bar(x, y, color='indigo', zorder=1)
                                ax1.set_ylabel('Nb tests DL', color='indigo')
                                for tl in ax1.get_yticklabels():
                                    tl.set_color('indigo')

                                # _____________________***AXE 2***________________________________________

                                ax2 = ax1.twinx()
                                x = [dt.datetime.strptime(d, '%d/%m/%Y').date() for d in date]
                                y = debit_set_download
                                ax2.plot(x, y, color='crimson', zorder=2)
                                plt.legend(loc='best')
                                ax2.set_xlabel('Jour')
                                ax2.set_ylabel('Moy debit DL (Mb/s)', color='crimson')
                                ax2.grid(True)
                                ax2.xaxis_date()
                                for t2 in ax2.get_yticklabels():
                                    t2.set_color('crimson')

                                    # ________________________________________________--___**_ FIN DEBIT download HTTP _**___--___________________________________________________



                                    # ________________________________________________--___**_ DEBIT UPLOAD HTTP _**___--___________________________________________________
                                # _____________________***PARAMS***________________________________________

                                ax1 = plt.subplot2grid((22, 9), (4, 5), colspan=4)
                                plt.xticks(rotation='vertical', fontsize=8)
                                plt.title('DEBITS Moyens UPLOAD HTTP (Mb/s) ')
                                params = {'legend.fontsize': 10,
                                          'legend.linewidth': 0, }
                                plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%d/%m/%Y'))
                                plt.gca().xaxis.set_major_locator(mdates.DayLocator())

                                # _____________________***AXE 1***________________________________________


                                x = [dt.datetime.strptime(d, '%d/%m/%Y').date() for d in date]
                                y = nombre_p_jour_upload
                                ax1.bar(x, y, color='indigo', zorder=1)
                                ax1.set_ylabel('Nb tests UL', color='indigo')
                                for tl in ax1.get_yticklabels():
                                    tl.set_color('indigo')

                                # _____________________***AXE 2***________________________________________

                                ax2 = ax1.twinx()
                                x = [dt.datetime.strptime(d, '%d/%m/%Y').date() for d in date]
                                y = debit_set_upload
                                ax2.plot(x, y, color='crimson', zorder=2)
                                plt.legend(loc='best')
                                ax2.set_xlabel('Jour')
                                ax2.set_ylabel('Moy debit UL (Mb/s)', color='crimson')
                                ax2.grid(True)
                                ax2.xaxis_date()
                                for t2 in ax2.get_yticklabels():
                                    t2.set_color('crimson')

                                    # ________________________________________________--___**_ FIN DEBIT UPLOAD HTTP _**___--___________________________________________________


                            return date_http,success_set,success_taux,failure_set,failure_taux,drop_set,drop_taux,nb_set,latency,debit_set_download,nombre_p_jour_download,debit_set_upload,nombre_p_jour_upload


                                # ________________________________________________--___**_FIN MATPLOTLIB _**___--___________________________________________________




                        #WEB
                        def page_loading_time(fichier_web, val1, val2, val3,val4,val5,tech):
                            date_debut=time.strptime(val1, "%d/%m/%Y")
                            date_fin = time.strptime(val2, "%d/%m/%Y")

                            global sfr
                            global nb_sfr
                            global time_sfr
                            global nombre_sfr
                            global nb_succes_web_set
                            global taux_succes_web_set
                            global taux_succes_web
                            global nb_succes_web
                            global nb_etat

                            global nb_failure_web_set
                            global taux_failure_web_set
                            global taux_failure_web
                            global nb_failure_web

                            global nb_timeout_web_set
                            global taux_timeout_web_set
                            global taux_timeout_web
                            global nb_timeout_web
                            global date_web
                            date_web=[]

                            fichier_web = fichier_web
                            date = []
                            csvfile = open(fichier_web, 'r')
                            #reader = csv.reader(csvfile, delimiter=';')
                            reader = csv.reader(csvfile)

                            b = ''
                            var_ajout=0.0

                            #LISTES DES INFOS DES PAGES CONSULTES
                            sfr = []
                            nb_sfr = []
                            time_sfr = 0.0
                            nombre_sfr = 0.0
                            # rechercher SFR.FR
                            regex_sfr = re.compile(r".*(sfr\.fr).*", re.IGNORECASE)

                            # VARIABLES DES ETATS
                            nb_succes_web_set = []
                            taux_succes_web_set = []
                            taux_succes_web = 0.0
                            nb_succes_web = 0.0
                            nb_etat = 0.0

                            nb_failure_web_set = []
                            taux_failure_web_set = []
                            taux_failure_web = 0.0
                            nb_failure_web = 0.0

                            nb_timeout_web_set = []
                            taux_timeout_web_set = []
                            taux_timeout_web = 0.0
                            nb_timeout_web = 0.0

                            #TEST FIN FICHIER
                            row_check=0.0

                            for row in reader:
                                row_check=row_check+1
                                f = row[1][0:10]
                                tecc=row[200]
                                ci_web=row[42]
                                lac_web=row[43]
                                if f=='date_utc_a':
                                    continue
                                datef = time.strptime(f, "%d/%m/%Y")
                                if datef>date_fin:
                                    #print(datef)
                                    continue

                                if datef<date_debut:
                                    if nombre_sfr == 0.0:
                                        sfr.append(0.0)
                                        nb_sfr.append(0.0)
                                    else:
                                        time_sfr = (time_sfr / nombre_sfr) / 1000
                                        sfr.append(time_sfr)
                                        nb_sfr.append(nombre_sfr)
                                        time_sfr = 0.0
                                        nombre_sfr = 0.0
                                    if nb_etat == 0.0:
                                        taux_succes_web_set.append(0.0)
                                        nb_succes_web_set.append(0.0)

                                        taux_failure_web_set.append(0.0)
                                        nb_failure_web_set.append(0.0)

                                        taux_timeout_web_set.append(0.0)
                                        nb_timeout_web_set.append(0.0)
                                    else:
                                        taux_succes_web = (nb_succes_web / nb_etat)
                                        taux_succes_web_set.append(taux_succes_web)
                                        nb_succes_web_set.append(nb_succes_web)
                                        taux_failure_web = (nb_failure_web / nb_etat)
                                        taux_failure_web_set.append(taux_failure_web)
                                        nb_failure_web_set.append(nb_failure_web)
                                        taux_timeout_web = (nb_timeout_web / nb_etat)
                                        taux_timeout_web_set.append(taux_timeout_web)
                                        nb_timeout_web_set.append(nb_timeout_web)
                                        taux_timeout_web = 0.0
                                        nb_timeout_web = 0.0
                                        taux_failure_web = 0.0
                                        nb_failure_web = 0.0
                                        taux_succes_web = 0.0
                                        nb_succes_web = 0.0
                                    break

                                """
                                if row_check==val4:
                                    if nombre_sfr == 0.0:
                                        sfr.append(0.0)
                                        nb_sfr.append(0.0)
                                    else:
                                        time_sfr = (time_sfr / nombre_sfr) / 1000
                                        sfr.append(time_sfr)
                                        nb_sfr.append(nombre_sfr)
                                        time_sfr = 0.0
                                        nombre_sfr = 0.0
                                    if nb_etat == 0.0:
                                        taux_succes_web_set.append(0.0)
                                        nb_succes_web_set.append(0.0)

                                        taux_failure_web_set.append(0.0)
                                        nb_failure_web_set.append(0.0)

                                        taux_timeout_web_set.append(0.0)
                                        nb_timeout_web_set.append(0.0)
                                    else:
                                        taux_succes_web = (nb_succes_web / nb_etat)
                                        taux_succes_web_set.append(taux_succes_web)
                                        nb_succes_web_set.append(nb_succes_web)
                                        taux_failure_web = (nb_failure_web / nb_etat)
                                        taux_failure_web_set.append(taux_failure_web)
                                        nb_failure_web_set.append(nb_failure_web)
                                        taux_timeout_web = (nb_timeout_web / nb_etat)
                                        taux_timeout_web_set.append(taux_timeout_web)
                                        nb_timeout_web_set.append(nb_timeout_web)
                                        taux_timeout_web = 0.0
                                        nb_timeout_web = 0.0
                                        taux_failure_web = 0.0
                                        nb_failure_web = 0.0
                                        taux_succes_web = 0.0
                                        nb_succes_web = 0.0
                                    break
                                """


                                row[204]= '_'.join(row[204].split(" "))


                                if ci_web=='NULL' or lac_web=='NULL':
                                    continue

                                if (departement + ' ' + ci_web + '-' + lac_web) in ci_lac_eci_tac_intermediaire and str(row[197])=='SFR' and str(row[204]) in val3 and row[203] in val5 and tecc in tech:

                                    variable = val2

                                    if b != str(f):
                                        date.append(str(f))
                                        b = str(f)
                                        if var_ajout>0:
                                            if nombre_sfr == 0.0:
                                                sfr.append(0.0)
                                                nb_sfr.append(0.0)
                                            else:
                                                time_sfr = (time_sfr / nombre_sfr) / 1000
                                                sfr.append(time_sfr)
                                                nb_sfr.append(nombre_sfr)
                                                time_sfr = 0.0
                                                nombre_sfr = 0.0
                                            if nb_etat == 0.0:
                                                taux_succes_web_set.append(0.0)
                                                nb_succes_web_set.append(0.0)

                                                taux_failure_web_set.append(0.0)
                                                nb_failure_web_set.append(0.0)

                                                taux_timeout_web_set.append(0.0)
                                                nb_timeout_web_set.append(0.0)
                                            else:
                                                taux_succes_web = (nb_succes_web *100 / nb_etat)
                                                taux_succes_web_set.append(taux_succes_web)
                                                nb_succes_web_set.append(nb_succes_web)
                                                taux_failure_web = (nb_failure_web *100 / nb_etat)
                                                taux_failure_web_set.append(taux_failure_web)
                                                nb_failure_web_set.append(nb_failure_web)
                                                taux_timeout_web = (nb_timeout_web *100 / nb_etat)
                                                taux_timeout_web_set.append(taux_timeout_web)
                                                nb_timeout_web_set.append(nb_timeout_web)
                                                taux_timeout_web = 0.0
                                                nb_timeout_web = 0.0
                                                taux_failure_web = 0.0
                                                nb_failure_web = 0.0
                                                taux_succes_web = 0.0
                                                nb_succes_web = 0.0
                                            nb_etat = 0.0
                                        var_ajout = var_ajout + 1

                                        #PAGE LOADING TIME SFR
                                        if regex_sfr.search(row[175]) and str(row[202]) == 'Success':
                                            if row[188] != 'NULL':
                                                time_sfr = time_sfr + float(row[188])
                                                nombre_sfr = nombre_sfr + 1
                                        # LES ETATS
                                        if str(row[202]) == 'Success' or str(row[202]) == 'Canceled':
                                            nb_succes_web = nb_succes_web + 1
                                            nb_etat = nb_etat + 1
                                        if str(row[202]) == 'Failure':
                                            nb_failure_web = nb_failure_web + 1
                                            nb_etat = nb_etat + 1
                                        if str(row[202]) == 'Timeout':
                                            nb_timeout_web = nb_timeout_web + 1
                                            nb_etat = nb_etat + 1
                                        else:
                                            if str(row[202]) != 'N/A' and str(row[202]) != 'Success' and str(row[202]) != 'Failure' and str(row[202]) != 'Timeout':
                                                nb_etat = nb_etat + 1
                                                var_ajout = var_ajout + 1


                                    else:
                                        var_ajout = var_ajout + 1
                                        # PAGE LOADING TIME SFR
                                        if regex_sfr.search(row[175]) and str(row[202]) == 'Success':
                                            if row[188] != 'NULL':
                                                time_sfr = time_sfr + float(row[188])
                                                nombre_sfr = nombre_sfr + 1
                                        # LES ETATS
                                        if str(row[202]) == 'Success' or str(row[202]) == 'Canceled':
                                            nb_succes_web = nb_succes_web + 1
                                            nb_etat = nb_etat + 1
                                        if str(row[202]) == 'Failure':
                                            nb_failure_web = nb_failure_web + 1
                                            nb_etat = nb_etat + 1
                                        if str(row[202]) == 'Timeout':
                                            nb_timeout_web = nb_timeout_web + 1
                                            nb_etat = nb_etat + 1
                                        else:
                                            if str(row[202]) != 'N/A' and str(row[202]) != 'Success' and str(row[202]) != 'Failure' and str(row[202]) != 'Timeout':
                                                nb_etat = nb_etat + 1
                                                var_ajout = var_ajout + 1

                            if datef >= date_debut:
                                if nombre_sfr == 0.0:
                                    sfr.append(0.0)
                                    nb_sfr.append(0.0)
                                else:
                                    time_sfr = (time_sfr / nombre_sfr) / 1000
                                    sfr.append(time_sfr)
                                    nb_sfr.append(nombre_sfr)
                                    time_sfr = 0.0
                                    nombre_sfr = 0.0
                                if nb_etat == 0.0:
                                    taux_succes_web_set.append(0.0)
                                    nb_succes_web_set.append(0.0)

                                    taux_failure_web_set.append(0.0)
                                    nb_failure_web_set.append(0.0)

                                    taux_timeout_web_set.append(0.0)
                                    nb_timeout_web_set.append(0.0)
                                else:
                                    taux_succes_web = (nb_succes_web / nb_etat)
                                    taux_succes_web_set.append(taux_succes_web)
                                    nb_succes_web_set.append(nb_succes_web)
                                    taux_failure_web = (nb_failure_web / nb_etat)
                                    taux_failure_web_set.append(taux_failure_web)
                                    nb_failure_web_set.append(nb_failure_web)
                                    taux_timeout_web = (nb_timeout_web / nb_etat)
                                    taux_timeout_web_set.append(taux_timeout_web)
                                    nb_timeout_web_set.append(nb_timeout_web)
                                    taux_timeout_web = 0.0
                                    nb_timeout_web = 0.0
                                    taux_failure_web = 0.0
                                    nb_failure_web = 0.0
                                    taux_succes_web = 0.0
                                    nb_succes_web = 0.0


                            date.reverse()
                            sfr.reverse()
                            nb_sfr.reverse()
                            taux_succes_web_set.reverse()
                            nb_succes_web_set.reverse()
                            taux_failure_web_set.reverse()
                            nb_failure_web_set.reverse()
                            taux_timeout_web_set.reverse()
                            nb_timeout_web_set.reverse()
                            date_web=date

                            if len(date)>0:
                                # ________________________________________________--___**_ PAGE_LOADING_TIME _**___--___________________________________________________
                                # _____________________***PARAMS***________________________________________

                                ax1 = plt.subplot2grid((22, 9), (6, 0), colspan=4)
                                plt.xticks(rotation='vertical', fontsize=8)
                                plt.title('Page loading time -sfr.fr- (s) ')
                                params = {'legend.fontsize': 10,
                                          'legend.linewidth': 0, }
                                plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%d/%m/%Y'))
                                plt.gca().xaxis.set_major_locator(mdates.DayLocator())

                                # _____________________***AXE 1***________________________________________


                                x = [dt.datetime.strptime(d, '%d/%m/%Y').date() for d in date]
                                y = nb_sfr
                                ax1.bar(x, y, color='navy', zorder=1)
                                ax1.set_ylabel('Nb Resultats', color='navy')
                                for tl in ax1.get_yticklabels():
                                    tl.set_color('navy')

                                    # _____________________***AXE 2***________________________________________

                                ax2 = ax1.twinx()
                                x = [dt.datetime.strptime(d, '%d/%m/%Y').date() for d in date]
                                y = sfr
                                ax2.plot(x, y, color='grey', zorder=2)
                                plt.legend(loc='best')
                                ax2.set_xlabel('Jour')
                                ax2.set_ylabel('Temps Moyen (s)', color='grey')
                                ax2.grid(True)
                                ax2.xaxis_date()
                                for t2 in ax2.get_yticklabels():
                                    t2.set_color('grey')

                                    # ________________________________________________--___**_ FIN_PAGE_LOADING_TIME _**___--___________________________________________________

                                    # ________________________________________________--___**_ SUCCES_WEB _**___--___________________________________________________
                                # _____________________***PARAMS***________________________________________

                                ax1 = plt.subplot2grid((22, 9), (6, 5), colspan=4)
                                plt.xticks(rotation='vertical', fontsize=8)
                                plt.title('SUCCESS RATIO WEB ' + date[0] + ' au ' + date[len(date) - 1])
                                params = {'legend.fontsize': 10,
                                          'legend.linewidth': 0, }
                                plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%d/%m/%Y'))
                                plt.gca().xaxis.set_major_locator(mdates.DayLocator())

                                # _____________________***AXE 1***________________________________________


                                x = [dt.datetime.strptime(d, '%d/%m/%Y').date() for d in date]
                                y = nb_succes_web_set
                                ax1.bar(x, y, color='seagreen', zorder=1)
                                ax1.set_ylabel('Nb Succes', color='seagreen')
                                for tl in ax1.get_yticklabels():
                                    tl.set_color('seagreen')

                                # _____________________***AXE 2***________________________________________

                                ax2 = ax1.twinx()
                                x = [dt.datetime.strptime(d, '%d/%m/%Y').date() for d in date]
                                y = taux_succes_web_set
                                ax2.plot(x, y, color='red', zorder=2)
                                plt.legend(loc='best')
                                ax2.set_xlabel('Jour')
                                ax2.set_ylabel('Taux Succes %', color='red')
                                ax2.grid(True)
                                ax2.xaxis_date()
                                for t2 in ax2.get_yticklabels():
                                    t2.set_color('red')
                                    # ________________________________________________--___**_ FIN_SUCCES_WEB _**___--___________________________________________________

                                    # ________________________________________________--___**_ FAILURE_WEB _**___--___________________________________________________
                                # _____________________***PARAMS***________________________________________

                                ax1 = plt.subplot2grid((22, 9), (8, 0), colspan=4)
                                plt.xticks(rotation='vertical', fontsize=8)
                                plt.title('FAILURE RATIO WEB ' + date[0] + ' au ' + date[len(date) - 1])
                                params = {'legend.fontsize': 10,
                                          'legend.linewidth': 0, }
                                plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%d/%m/%Y'))
                                plt.gca().xaxis.set_major_locator(mdates.DayLocator())

                                # _____________________***AXE 1***________________________________________


                                x = [dt.datetime.strptime(d, '%d/%m/%Y').date() for d in date]
                                y = nb_failure_web_set
                                ax1.bar(x, y, color='red', zorder=1)
                                ax1.set_ylabel('Nb Failure', color='red')
                                for tl in ax1.get_yticklabels():
                                    tl.set_color('red')

                                # _____________________***AXE 2***________________________________________

                                ax2 = ax1.twinx()
                                x = [dt.datetime.strptime(d, '%d/%m/%Y').date() for d in date]
                                y = taux_failure_web_set
                                ax2.plot(x, y, color='green', zorder=2)
                                plt.legend(loc='best')
                                ax2.set_xlabel('Jour')
                                ax2.set_ylabel('Taux Echec %', color='green')
                                ax2.grid(True)
                                ax2.xaxis_date()
                                for t2 in ax2.get_yticklabels():
                                    t2.set_color('green')
                                    # ___________________________________________________________________________________________________
                                    # ________________________________________________--___**_ FIN_failure_WEB _**___--___________________________________________________


                                    # ________________________________________________--___**_ TIMEOUT_WEB _**___--___________________________________________________
                                # _____________________***PARAMS***________________________________________

                                ax1 = plt.subplot2grid((22, 9), (8, 5), colspan=4)
                                plt.xticks(rotation='vertical', fontsize=8)
                                plt.title('TIMEOUT RATIO WEB ' + date[0] + ' au ' + date[len(date) - 1])
                                params = {'legend.fontsize': 10,
                                          'legend.linewidth': 0, }
                                plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%d/%m/%Y'))
                                plt.gca().xaxis.set_major_locator(mdates.DayLocator())

                                # _____________________***AXE 1***________________________________________


                                x = [dt.datetime.strptime(d, '%d/%m/%Y').date() for d in date]
                                y = nb_timeout_web_set
                                ax1.bar(x, y, color='grey', zorder=1)
                                ax1.set_ylabel('Nb Timeout', color='grey')
                                for tl in ax1.get_yticklabels():
                                    tl.set_color('grey')

                                # _____________________***AXE 2***________________________________________

                                ax2 = ax1.twinx()
                                x = [dt.datetime.strptime(d, '%d/%m/%Y').date() for d in date]
                                y = taux_timeout_web_set
                                ax2.plot(x, y, color='k', zorder=2)
                                plt.legend(loc='best')
                                ax2.set_xlabel('Jour')
                                ax2.set_ylabel('Taux Timeout %', color='k')
                                ax2.grid(True)
                                ax2.xaxis_date()
                                for t2 in ax2.get_yticklabels():
                                    t2.set_color('k')
                                    # ___________________________________________________________________________________________________
                                    # ________________________________________________--___**_ FIN_TIMEOUT_WEB _**___--___________________________________________________


                            else:
                                date = ['05/04/2017']
                                sfr = [0]
                                nb_sfr = [0]
                                taux_succes_web_set = [0]
                                nb_succes_web_set = [0]
                                taux_failure_web_set = [0]
                                nb_failure_web_set = [0]
                                taux_timeout_web_set = [0]
                                nb_timeout_web_set = [0]
                                # ________________________________________________--___**_ PAGE_LOADING_TIME _**___--___________________________________________________
                                # _____________________***PARAMS***________________________________________

                                ax1 = plt.subplot2grid((22, 9), (6, 0), colspan=4)
                                plt.xticks(rotation='vertical', fontsize=8)
                                plt.title('Page loading time -sfr.fr- (s) ')
                                params = {'legend.fontsize': 10,
                                          'legend.linewidth': 0, }
                                plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%d/%m/%Y'))
                                plt.gca().xaxis.set_major_locator(mdates.DayLocator())

                                # _____________________***AXE 1***________________________________________


                                x = [dt.datetime.strptime(d, '%d/%m/%Y').date() for d in date]
                                y = nb_sfr
                                ax1.bar(x, y, color='navy', zorder=1)
                                ax1.set_ylabel('Nb Resultats', color='navy')
                                for tl in ax1.get_yticklabels():
                                    tl.set_color('navy')

                                    # _____________________***AXE 2***________________________________________

                                ax2 = ax1.twinx()
                                x = [dt.datetime.strptime(d, '%d/%m/%Y').date() for d in date]
                                y = sfr
                                ax2.plot(x, y, color='grey', zorder=2)
                                plt.legend(loc='best')
                                ax2.set_xlabel('Jour')
                                ax2.set_ylabel('Temps Moyen (s)', color='grey')
                                ax2.grid(True)
                                ax2.xaxis_date()
                                for t2 in ax2.get_yticklabels():
                                    t2.set_color('grey')

                                    # ________________________________________________--___**_ FIN_PAGE_LOADING_TIME _**___--___________________________________________________

                                    # ________________________________________________--___**_ SUCCES_WEB _**___--___________________________________________________
                                # _____________________***PARAMS***________________________________________

                                ax1 = plt.subplot2grid((22, 9), (6, 5), colspan=4)
                                plt.xticks(rotation='vertical', fontsize=8)
                                plt.title('SUCCESS RATIO WEB ')
                                params = {'legend.fontsize': 10,
                                          'legend.linewidth': 0, }
                                plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%d/%m/%Y'))
                                plt.gca().xaxis.set_major_locator(mdates.DayLocator())

                                # _____________________***AXE 1***________________________________________


                                x = [dt.datetime.strptime(d, '%d/%m/%Y').date() for d in date]
                                y = nb_succes_web_set
                                ax1.bar(x, y, color='seagreen', zorder=1)
                                ax1.set_ylabel('Nb Succes', color='seagreen')
                                for tl in ax1.get_yticklabels():
                                    tl.set_color('seagreen')

                                # _____________________***AXE 2***________________________________________

                                ax2 = ax1.twinx()
                                x = [dt.datetime.strptime(d, '%d/%m/%Y').date() for d in date]
                                y = taux_succes_web_set
                                ax2.plot(x, y, color='red', zorder=2)
                                plt.legend(loc='best')
                                ax2.set_xlabel('Jour')
                                ax2.set_ylabel('Taux Succes %', color='red')
                                ax2.grid(True)
                                ax2.xaxis_date()
                                for t2 in ax2.get_yticklabels():
                                    t2.set_color('red')
                                    # ________________________________________________--___**_ FIN_SUCCES_WEB _**___--___________________________________________________

                                    # ________________________________________________--___**_ FAILURE_WEB _**___--___________________________________________________
                                # _____________________***PARAMS***________________________________________

                                ax1 = plt.subplot2grid((22, 9), (8, 0), colspan=4)
                                plt.xticks(rotation='vertical', fontsize=8)
                                plt.title('FAILURE RATIO WEB ')
                                params = {'legend.fontsize': 10,
                                          'legend.linewidth': 0, }
                                plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%d/%m/%Y'))
                                plt.gca().xaxis.set_major_locator(mdates.DayLocator())

                                # _____________________***AXE 1***________________________________________


                                x = [dt.datetime.strptime(d, '%d/%m/%Y').date() for d in date]
                                y = nb_failure_web_set
                                ax1.bar(x, y, color='red', zorder=1)
                                ax1.set_ylabel('Nb Failure', color='red')
                                for tl in ax1.get_yticklabels():
                                    tl.set_color('red')

                                # _____________________***AXE 2***________________________________________

                                ax2 = ax1.twinx()
                                x = [dt.datetime.strptime(d, '%d/%m/%Y').date() for d in date]
                                y = taux_failure_web_set
                                ax2.plot(x, y, color='green', zorder=2)
                                plt.legend(loc='best')
                                ax2.set_xlabel('Jour')
                                ax2.set_ylabel('Taux Echec %', color='green')
                                ax2.grid(True)
                                ax2.xaxis_date()
                                for t2 in ax2.get_yticklabels():
                                    t2.set_color('green')
                                    # ___________________________________________________________________________________________________
                                    # ________________________________________________--___**_ FIN_failure_WEB _**___--___________________________________________________


                                    # ________________________________________________--___**_ TIMEOUT_WEB _**___--___________________________________________________
                                # _____________________***PARAMS***________________________________________

                                ax1 = plt.subplot2grid((22, 9), (8, 5), colspan=4)
                                plt.xticks(rotation='vertical', fontsize=8)
                                plt.title('TIMEOUT RATIO WEB ')
                                params = {'legend.fontsize': 10,
                                          'legend.linewidth': 0, }
                                plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%d/%m/%Y'))
                                plt.gca().xaxis.set_major_locator(mdates.DayLocator())

                                # _____________________***AXE 1***________________________________________


                                x = [dt.datetime.strptime(d, '%d/%m/%Y').date() for d in date]
                                y = nb_timeout_web_set
                                ax1.bar(x, y, color='grey', zorder=1)
                                ax1.set_ylabel('Nb Timeout', color='grey')
                                for tl in ax1.get_yticklabels():
                                    tl.set_color('grey')

                                # _____________________***AXE 2***________________________________________

                                ax2 = ax1.twinx()
                                x = [dt.datetime.strptime(d, '%d/%m/%Y').date() for d in date]
                                y = taux_timeout_web_set
                                ax2.plot(x, y, color='k', zorder=2)
                                plt.legend(loc='best')
                                ax2.set_xlabel('Jour')
                                ax2.set_ylabel('Taux Timeout %', color='k')
                                ax2.grid(True)
                                ax2.xaxis_date()
                                for t2 in ax2.get_yticklabels():
                                    t2.set_color('k')
                                    # ___________________________________________________________________________________________________
                                    # ________________________________________________--___**_ FIN_TIMEOUT_WEB _**___--___________________________________________________


                            return date_web,sfr,nb_sfr,taux_succes_web_set,nb_succes_web_set,taux_failure_web_set,nb_failure_web_set,taux_timeout_web_set,nb_timeout_web_set



                                    # ________________________________________________--___**_FIN MATPLOTLIB _**___--___________________________________________________


                        #VIDEO
                        def buffering_time_video(fichier, val1, val2, val3, val4, val5, tech):
                            date_debut = time.strptime(val1, "%d/%m/%Y")
                            date_fin = time.strptime(val2, "%d/%m/%Y")
                            fichier = fichier
                            date = []
                            csvfile = open(fichier, 'r')
                            reader = csv.reader(csvfile)

                            b = ''

                            global nb_test_video_set
                            global nb_tst_time_video
                            global time_video_buffering
                            global time_video_buffering_set
                            global drop_video_set
                            global nb_drop_video
                            global drop_video_taux
                            global nb_drop_video_set
                            global nb_etats
                            global timeout_set
                            global nb_timeout
                            global timeout_taux
                            global nb_timeout_set
                            global nb_etats
                            global date_video
                            date_video=[]

                            nb_test_video_set = []
                            nb_tst_time_video = 0.0
                            time_video_buffering = 0.0
                            time_video_buffering_set = []

                            drop_video_set = []
                            nb_drop_video = 0.0
                            drop_video_taux = 0.0
                            nb_drop_video_set = []
                            nb_etats = 0.0

                            timeout_set = []
                            nb_timeout = 0.0
                            timeout_taux = 0.0
                            nb_timeout_set = []
                            nb_etats = 0.0

                            row_check=0.0
                            check_decalage=0.0


                            for row in reader:
                                row_check=row_check+1
                                f = row[1][0:10]
                                tecc = row[241]
                                ci_video=row[42]
                                lac_video=row[43]
                                temps_bufferisation = row[222]
                                if f == 'date_utc_a':
                                    continue

                                datef = time.strptime(f, "%d/%m/%Y")

                                if datef > date_fin:
                                    continue
                                if datef < date_debut:
                                    if nb_tst_time_video == 0.0:
                                        nb_test_video_set.append(0.0)
                                        time_video_buffering_set.append(0.0)
                                    else:
                                        time_video_buffering = time_video_buffering / (nb_tst_time_video * 1000)
                                        nb_test_video_set.append(nb_tst_time_video)
                                        time_video_buffering_set.append(time_video_buffering)
                                        nb_tst_time_video = 0.0
                                        time_video_buffering = 0.0
                                    if nb_etats > 0:
                                        drop_video_taux = nb_drop_video / nb_etats
                                        drop_video_set.append(drop_video_taux)
                                        nb_drop_video_set.append(nb_drop_video)
                                        nb_drop_video = 0.0

                                        timeout_taux = nb_timeout / nb_etats
                                        timeout_set.append(timeout_taux)
                                        nb_timeout_set.append(nb_timeout)
                                        nb_timeout = 0.0
                                    else:
                                        drop_video_set.append(0.0)
                                        nb_drop_video_set.append(0.0)

                                    break
                                """
                                if row_check==val4:
                                    if nb_tst_time_video == 0.0:
                                        nb_test_video_set.append(0.0)
                                        time_video_buffering_set.append(0.0)
                                    else:
                                        time_video_buffering = time_video_buffering / (nb_tst_time_video * 1000)
                                        nb_test_video_set.append(nb_tst_time_video)
                                        time_video_buffering_set.append(time_video_buffering)
                                        nb_tst_time_video = 0.0
                                        time_video_buffering = 0.0
                                    if nb_etats > 0:
                                        drop_video_taux = nb_drop_video / nb_etats
                                        drop_video_set.append(drop_video_taux)
                                        nb_drop_video_set.append(nb_drop_video)
                                        nb_drop_video = 0.0

                                        timeout_taux = nb_timeout / nb_etats
                                        timeout_set.append(timeout_taux)
                                        nb_timeout_set.append(nb_timeout)
                                        nb_timeout = 0.0
                                    else:
                                        drop_video_set.append(0.0)
                                        nb_drop_video_set.append(0.0)

                                    break
                                """

                                row[246] = '_'.join(row[246].split(" "))
                                if ci_video=='NULL' or lac_video=='NULL':
                                    continue

                                if (departement + ' ' + ci_video + '-' + lac_video) in ci_lac_eci_tac_intermediaire and row[239]=='SFR' and row[246] in val3 and row[245] in val5 and tecc in tech:
                                    if b != str(f):
                                        date.append(str(f))
                                        b = str(f)
                                        if check_decalage>0:
                                            if nb_tst_time_video == 0.0:
                                                nb_test_video_set.append(0.0)
                                                time_video_buffering_set.append(0.0)
                                            else:
                                                time_video_buffering = time_video_buffering / (nb_tst_time_video * 1000)
                                                nb_test_video_set.append(nb_tst_time_video)
                                                time_video_buffering_set.append(time_video_buffering)
                                                nb_tst_time_video = 0.0
                                                time_video_buffering = 0.0
                                            if nb_etats > 0:
                                                drop_video_taux = nb_drop_video *100 / nb_etats
                                                drop_video_set.append(drop_video_taux)
                                                nb_drop_video_set.append(nb_drop_video)
                                                nb_drop_video = 0.0

                                                timeout_taux = nb_timeout *100 / nb_etats
                                                timeout_set.append(timeout_taux)
                                                nb_timeout_set.append(nb_timeout)
                                                nb_timeout = 0.0
                                            else:
                                                drop_video_set.append(0.0)
                                                nb_drop_video_set.append(0.0)

                                            nb_etats = 0.0
                                        check_decalage=check_decalage+1

                                    check_decalage = check_decalage + 1
                                    if temps_bufferisation != 'NULL' and row[168] != 'NULL' and float(row[168]) >= 512 and row[244] == 'Success':
                                        nb_tst_time_video = nb_tst_time_video + 1
                                        time_video_buffering = time_video_buffering + float(temps_bufferisation)
                                    if str(row[244]) == 'Drop':
                                        nb_drop_video = nb_drop_video + 1
                                        nb_etats = nb_etats + 1
                                    if str(row[244]) == 'Timeout':
                                        nb_timeout = nb_timeout + 1
                                        nb_etats = nb_etats + 1
                                    else:
                                        if row[244] != 'N/A':
                                            nb_etats = nb_etats + 1

                            if datef >= date_debut:
                                if nb_tst_time_video == 0.0:
                                    nb_test_video_set.append(0.0)
                                    time_video_buffering_set.append(0.0)
                                else:
                                    time_video_buffering = time_video_buffering / (nb_tst_time_video * 1000)
                                    nb_test_video_set.append(nb_tst_time_video)
                                    time_video_buffering_set.append(time_video_buffering)
                                    nb_tst_time_video = 0.0
                                    time_video_buffering = 0.0
                                if nb_etats > 0:
                                    drop_video_taux = nb_drop_video / nb_etats
                                    drop_video_set.append(drop_video_taux)
                                    nb_drop_video_set.append(nb_drop_video)
                                    nb_drop_video = 0.0

                                    timeout_taux = nb_timeout / nb_etats
                                    timeout_set.append(timeout_taux)
                                    nb_timeout_set.append(nb_timeout)
                                    nb_timeout = 0.0
                                else:
                                    drop_video_set.append(0.0)
                                    nb_drop_video_set.append(0.0)



                            date.reverse()
                            nb_test_video_set.reverse()
                            time_video_buffering_set.reverse()
                            drop_video_set.reverse()
                            nb_drop_video_set.reverse()
                            timeout_set.reverse()
                            nb_timeout_set.reverse()
                            date_video=date
                            if len(date)>0:
                                # ________________________________________________--___**_ MATPLOTLIB _**___--___________________________________________________

                                # ________________________________________________--___**_ VIDEO BUFFERING TIME _**___--___________________________________________________

                                # _____________________***PARAMS***________________________________________

                                ax1 = plt.subplot2grid((22, 9), (10, 0), colspan=4)
                                plt.xticks(rotation='vertical', fontsize=8)
                                plt.title('Video Buffering TIME (s) ' + date[0] + ' au ' + date[len(date) - 1])
                                params = {'legend.fontsize': 10,
                                          'legend.linewidth': 0, }
                                plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%d/%m/%Y'))
                                plt.gca().xaxis.set_major_locator(mdates.DayLocator())

                                # _____________________***AXE 1***________________________________________


                                x = [dt.datetime.strptime(d, '%d/%m/%Y').date() for d in date]
                                y = nb_test_video_set
                                ax1.bar(x, y, color='lightgreen', zorder=1)
                                ax1.set_ylabel('Nb tests', color='forestgreen')
                                for tl in ax1.get_yticklabels():
                                    tl.set_color('forestgreen')

                                    # _____________________***AXE 2***________________________________________

                                ax2 = ax1.twinx()
                                x = [dt.datetime.strptime(d, '%d/%m/%Y').date() for d in date]
                                y = time_video_buffering_set
                                ax2.plot(x, y, color='crimson', zorder=2)
                                plt.legend(loc='best')
                                ax2.set_xlabel('Jour')
                                ax2.set_ylabel('Tmp Moy (s)', color='crimson')
                                ax2.grid(True)
                                ax2.xaxis_date()
                                for t2 in ax2.get_yticklabels():
                                    t2.set_color('crimson')

                                    # ________________________________________________--___**_ DROP RATIO VIDEO _**___--___________________________________________________

                                # _____________________***PARAMS***________________________________________

                                ax1 = plt.subplot2grid((22, 9), (10, 5), colspan=4)
                                plt.xticks(rotation='vertical', fontsize=8)
                                plt.title('DROP RATIO VIDEO ' + date[0] + ' au ' + date[len(date) - 1])
                                params = {'legend.fontsize': 10,
                                          'legend.linewidth': 0, }
                                plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%d/%m/%Y'))
                                plt.gca().xaxis.set_major_locator(mdates.DayLocator())

                                # _____________________***AXE 1***________________________________________


                                x = [dt.datetime.strptime(d, '%d/%m/%Y').date() for d in date]
                                y = nb_drop_video_set
                                ax1.bar(x, y, color='orangered', zorder=1)
                                ax1.set_ylabel('Nb Drop', color='orangered')
                                for tl in ax1.get_yticklabels():
                                    tl.set_color('orangered')

                                # _____________________***AXE 2***________________________________________

                                ax2 = ax1.twinx()
                                x = [dt.datetime.strptime(d, '%d/%m/%Y').date() for d in date]
                                y = drop_video_set
                                ax2.plot(x, y, color='darkblue', zorder=2)
                                plt.legend(loc='best')
                                ax2.set_xlabel('Jour')
                                ax2.set_ylabel('Taux drop %', color='darkblue')
                                ax2.grid(True)
                                ax2.xaxis_date()
                                for t2 in ax2.get_yticklabels():
                                    t2.set_color('darkblue')
                                    # ____________________________________________________________
                                    # ________________________________________________--___**_ FIN DROP RATIO VIDEO _**___--___________________________________________________

                                # ________________________________________________--___**_ timeout RATIO VIDEO _**___--___________________________________________________

                                # _____________________***PARAMS***________________________________________

                                ax1 = plt.subplot2grid((22, 9), (12, 0), colspan=4)
                                plt.xticks(rotation='vertical', fontsize=8)
                                plt.title('TIMEOUT RATIO VIDEO ' + date[0] + ' au ' + date[len(date) - 1])
                                params = {'legend.fontsize': 10,
                                          'legend.linewidth': 0, }
                                plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%d/%m/%Y'))
                                plt.gca().xaxis.set_major_locator(mdates.DayLocator())

                                # _____________________***AXE 1***________________________________________


                                x = [dt.datetime.strptime(d, '%d/%m/%Y').date() for d in date]
                                y = nb_timeout_set
                                ax1.bar(x, y, color='grey', zorder=1)
                                ax1.set_ylabel('Nb Timeout', color='grey')
                                for tl in ax1.get_yticklabels():
                                    tl.set_color('grey')

                                # _____________________***AXE 2***________________________________________

                                ax2 = ax1.twinx()
                                x = [dt.datetime.strptime(d, '%d/%m/%Y').date() for d in date]
                                y = timeout_set
                                ax2.plot(x, y, color='k', zorder=2)
                                plt.legend(loc='best')
                                ax2.set_xlabel('Jour')
                                ax2.set_ylabel('Taux Timeout %', color='k')
                                ax2.grid(True)
                                ax2.xaxis_date()
                                for t2 in ax2.get_yticklabels():
                                    t2.set_color('k')

                                    # ____________________________________________________________
                                    # ________________________________________________--___**_ FIN timeout RATIO VIDEO _**___--___________________________________________________

                            else:
                                date = ['05/04/2017']
                                nb_test_video_set = [0]
                                time_video_buffering_set = [0]
                                drop_video_set = [0]
                                nb_drop_video_set = [0]
                                timeout_set = [0]
                                nb_timeout_set = [0]
                                # ________________________________________________--___**_ MATPLOTLIB _**___--___________________________________________________

                                # ________________________________________________--___**_ VIDEO BUFFERING TIME _**___--___________________________________________________

                                # _____________________***PARAMS***________________________________________

                                ax1 = plt.subplot2grid((22, 9), (10, 0), colspan=4)
                                plt.xticks(rotation='vertical', fontsize=8)
                                plt.title('Video Buffering TIME (s) ')
                                params = {'legend.fontsize': 10,
                                          'legend.linewidth': 0, }
                                plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%d/%m/%Y'))
                                plt.gca().xaxis.set_major_locator(mdates.DayLocator())

                                # _____________________***AXE 1***________________________________________


                                x = [dt.datetime.strptime(d, '%d/%m/%Y').date() for d in date]
                                y = nb_test_video_set
                                ax1.bar(x, y, color='lightgreen', zorder=1)
                                ax1.set_ylabel('Nb tests', color='forestgreen')
                                for tl in ax1.get_yticklabels():
                                    tl.set_color('forestgreen')

                                    # _____________________***AXE 2***________________________________________

                                ax2 = ax1.twinx()
                                x = [dt.datetime.strptime(d, '%d/%m/%Y').date() for d in date]
                                y = time_video_buffering_set
                                ax2.plot(x, y, color='crimson', zorder=2)
                                plt.legend(loc='best')
                                ax2.set_xlabel('Jour')
                                ax2.set_ylabel('Tmp Moy (s)', color='crimson')
                                ax2.grid(True)
                                ax2.xaxis_date()
                                for t2 in ax2.get_yticklabels():
                                    t2.set_color('crimson')

                                    # ________________________________________________--___**_ DROP RATIO VIDEO _**___--___________________________________________________

                                # _____________________***PARAMS***________________________________________

                                ax1 = plt.subplot2grid((22, 9), (10, 5), colspan=4)
                                plt.xticks(rotation='vertical', fontsize=8)
                                plt.title('DROP RATIO VIDEO ')
                                params = {'legend.fontsize': 10,
                                          'legend.linewidth': 0, }
                                plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%d/%m/%Y'))
                                plt.gca().xaxis.set_major_locator(mdates.DayLocator())

                                # _____________________***AXE 1***________________________________________


                                x = [dt.datetime.strptime(d, '%d/%m/%Y').date() for d in date]
                                y = nb_drop_video_set
                                ax1.bar(x, y, color='orangered', zorder=1)
                                ax1.set_ylabel('Nb Drop', color='orangered')
                                for tl in ax1.get_yticklabels():
                                    tl.set_color('orangered')

                                # _____________________***AXE 2***________________________________________

                                ax2 = ax1.twinx()
                                x = [dt.datetime.strptime(d, '%d/%m/%Y').date() for d in date]
                                y = drop_video_set
                                ax2.plot(x, y, color='darkblue', zorder=2)
                                plt.legend(loc='best')
                                ax2.set_xlabel('Jour')
                                ax2.set_ylabel('Taux drop %', color='darkblue')
                                ax2.grid(True)
                                ax2.xaxis_date()
                                for t2 in ax2.get_yticklabels():
                                    t2.set_color('darkblue')
                                    # ____________________________________________________________
                                    # ________________________________________________--___**_ FIN DROP RATIO VIDEO _**___--___________________________________________________

                                # ________________________________________________--___**_ timeout RATIO VIDEO _**___--___________________________________________________

                                # _____________________***PARAMS***________________________________________

                                ax1 = plt.subplot2grid((22, 9), (12, 0), colspan=4)
                                plt.xticks(rotation='vertical', fontsize=8)
                                plt.title('TIMEOUT RATIO VIDEO ')
                                params = {'legend.fontsize': 10,
                                          'legend.linewidth': 0, }
                                plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%d/%m/%Y'))
                                plt.gca().xaxis.set_major_locator(mdates.DayLocator())

                                # _____________________***AXE 1***________________________________________


                                x = [dt.datetime.strptime(d, '%d/%m/%Y').date() for d in date]
                                y = nb_timeout_set
                                ax1.bar(x, y, color='grey', zorder=1)
                                ax1.set_ylabel('Nb Timeout', color='grey')
                                for tl in ax1.get_yticklabels():
                                    tl.set_color('grey')

                                # _____________________***AXE 2***________________________________________

                                ax2 = ax1.twinx()
                                x = [dt.datetime.strptime(d, '%d/%m/%Y').date() for d in date]
                                y = timeout_set
                                ax2.plot(x, y, color='k', zorder=2)
                                plt.legend(loc='best')
                                ax2.set_xlabel('Jour')
                                ax2.set_ylabel('Taux Timeout %', color='k')
                                ax2.grid(True)
                                ax2.xaxis_date()
                                for t2 in ax2.get_yticklabels():
                                    t2.set_color('k')

                                    # ____________________________________________________________
                                    # ________________________________________________--___**_ FIN timeout RATIO VIDEO _**___--___________________________________________________



                            return date_video,nb_test_video_set,time_video_buffering_set,drop_video_set,nb_drop_video_set,timeout_set,nb_timeout_set
                                    # ________________________________________________--___**_FIN MATPLOTLIB _**___--___________________________________________________




                        #USAGE
                        def usage_ul_dl(fichier_web, val1, val2, val3,val4,val5,tech):
                            print('JE SUIS DANS USAGE')
                            #print(val3)
                            #print('Tu es dans la fonction Succes et tu as VAL1: '+val1)
                            #print('Tu es dans la fonction Succes et tu as VAL2: '+val2)
                            #print(val1)
                            #print(val2)
                            #print(val3)
                            #print(val4)
                            #print(val5)
                            #print(tech)
                            #print(val3)
                            #print('Tu es dans la fonction Succes et tu as VAL1: '+val1)
                            #print('Tu es dans la fonction Succes et tu as VAL2: '+val2)
                            date_debut=time.strptime(val1, "%d/%m/%Y")
                            date_fin = time.strptime(val2, "%d/%m/%Y")
                            succes = 0.0
                            success_set = []
                            success_taux = []
                            fichier_web = fichier_web
                            nb = 0.0
                            nb_set = []
                            date = []
                            csvfile = open(fichier_web, 'r')
                            # print(csvfile)
                            reader = csv.reader(csvfile)


                            b = ''
                            var_ajout=0.0
                            variable = ''

                            #LISTES DES INFOS DES PAGES CONSULTES
                            global google_up
                            global google_down
                            global google_var_up
                            global google_var_down
                            global youtube_up
                            global youtube_down
                            global youtube_var_up
                            global youtube_var_down
                            global facebook_up
                            global facebook_down
                            global facebook_var_up
                            global facebook_var_down
                            global leboncoin_up
                            global leboncoin_down
                            global leboncoin_var_up
                            global leboncoin_var_down
                            global nb_google_up
                            global nb_google_down
                            global nb_youtube_up
                            global nb_youtube_down
                            global nb_facebook_up
                            global nb_facebook_down
                            global nb_leboncoin_up
                            global nb_leboncoin_down
                            global nb_google_up_set
                            global nb_google_down_set
                            global nb_youtube_up_set
                            global nb_youtube_down_set
                            global nb_facebook_up_set
                            global nb_facebook_down_set
                            global nb_leboncoin_up_set
                            global nb_leboncoin_down_set
                            global date_usage
                            date_usage=[]

                            google_up=[]
                            google_down=[]
                            google_var_up=0.0
                            google_var_down=0.0

                            youtube_up=[]
                            youtube_down=[]
                            youtube_var_up=0.0
                            youtube_var_down=0.0

                            facebook_up=[]
                            facebook_down=[]
                            facebook_var_up=0.0
                            facebook_var_down=0.0

                            leboncoin_up=[]
                            leboncoin_down=[]
                            leboncoin_var_up=0.0
                            leboncoin_var_down=0.0

                            nb_google_up=0.0
                            nb_google_down=0.0
                            nb_youtube_up=0.0
                            nb_youtube_down=0.0
                            nb_facebook_up=0.0
                            nb_facebook_down=0.0
                            nb_leboncoin_up=0.0
                            nb_leboncoin_down=0.0

                            nb_google_up_set=[]
                            nb_google_down_set=[]
                            nb_youtube_up_set=[]
                            nb_youtube_down_set=[]
                            nb_facebook_up_set=[]
                            nb_facebook_down_set=[]
                            nb_leboncoin_up_set=[]
                            nb_leboncoin_down_set=[]

                            #rechercher SFR.FR
                            regex_sfr = re.compile(r".*(sfr\.fr).*", re.IGNORECASE)

                            #TEST FIN FICHIER
                            row_check=0.0

                            for row in reader:
                                row_check=row_check+1
                                #print(row_check)
                                f = row[1][0:10]
                                ci_usage=row[35]
                                lac_usage=row[36]
                                #if regex_sfr.search(row[175]):
                                    #sfr_trouve=regex_sfr.search(row[175])
                                    #print(sfr_trouve.group(1))

                                tecc=row[161]
                                if f=='date_utc_a':
                                    continue
                                datef = time.strptime(f, "%Y-%m-%d")
                                if datef>date_fin:
                                    #print(datef)
                                    continue

                                if datef<date_debut:
                                    #print("je sors la 1")
                                    if nb_google_up == 0.0:
                                        google_up.append(0.0)
                                        nb_google_up_set.append(0.0)
                                    else:
                                        google_var_up = google_var_up / nb_google_up /1000000
                                        google_up.append(google_var_up)
                                        nb_google_up_set.append(nb_google_up)
                                    if nb_google_down == 0.0:
                                        google_down.append(0.0)
                                        nb_google_down_set.append(0.0)
                                    else:
                                        google_var_down = google_var_down / nb_google_down/1000000
                                        google_down.append(google_var_down)
                                        nb_google_down_set.append(nb_google_down)

                                    if nb_youtube_down == 0.0:
                                        nb_youtube_down_set.append(0.0)
                                        youtube_down.append(0.0)
                                    else:
                                        youtube_var_down = youtube_var_down / nb_youtube_down/1000000
                                        youtube_down.append(youtube_var_down)
                                        nb_youtube_down_set.append(nb_youtube_down)
                                    if nb_youtube_up == 0.0:
                                        nb_youtube_up_set.append(0.0)
                                        youtube_up.append(0.0)
                                    else:
                                        youtube_var_up = youtube_var_up / nb_youtube_up/1000000
                                        youtube_up.append(youtube_var_up)
                                        nb_youtube_up_set.append(nb_youtube_up)

                                    if nb_facebook_up == 0.0:
                                        nb_facebook_up_set.append(0.0)
                                        facebook_up.append(0.0)
                                    else:
                                        facebook_var_up = facebook_var_up / nb_facebook_up/1000000
                                        facebook_up.append(facebook_var_up)
                                        nb_facebook_up_set.append(nb_facebook_up)
                                    if nb_facebook_down == 0.0:
                                        facebook_down.append(0.0)
                                        nb_facebook_down_set.append(0.0)
                                    else:
                                        facebook_var_down = facebook_var_down / nb_facebook_down/1000000
                                        facebook_down.append(facebook_var_down)
                                        nb_facebook_down_set.append(nb_facebook_down)

                                    if nb_leboncoin_up == 0.0:
                                        leboncoin_up.append(0.0)
                                        nb_leboncoin_up_set.append(0.0)
                                    else:
                                        leboncoin_var_up = leboncoin_var_up / leboncoin_var_up/1000000
                                        leboncoin_up.append(leboncoin_var_up)
                                        nb_leboncoin_up_set.append(nb_leboncoin_up)
                                    if nb_leboncoin_down == 0.0:
                                        leboncoin_down.append(0.0)
                                        nb_leboncoin_down_set.append(0.0)
                                    else:
                                        leboncoin_var_down = leboncoin_var_down / nb_leboncoin_down/1000000
                                        leboncoin_down.append(leboncoin_var_down)
                                        nb_leboncoin_down_set.append(nb_leboncoin_down)
                                    break

                                """
                                if row_check==val4:
                                    #print("je sors la 2")
                                    if nb_google_up == 0.0:
                                        google_up.append(0.0)
                                        nb_google_up_set.append(0.0)
                                    else:
                                        google_var_up = google_var_up / nb_google_up/1000000
                                        google_up.append(google_var_up)
                                        nb_google_up_set.append(nb_google_up)
                                    if nb_google_down == 0.0:
                                        google_down.append(0.0)
                                        nb_google_down_set.append(0.0)
                                    else:
                                        google_var_down = google_var_down / nb_google_down/1000000
                                        google_down.append(google_var_down)
                                        nb_google_down_set.append(nb_google_down)

                                    if nb_youtube_down == 0.0:
                                        nb_youtube_down_set.append(0.0)
                                        youtube_down.append(0.0)
                                    else:
                                        youtube_var_down = youtube_var_down / nb_youtube_down/1000000
                                        youtube_down.append(youtube_var_down)
                                        nb_youtube_down_set.append(nb_youtube_down)
                                    if nb_youtube_up == 0.0:
                                        nb_youtube_up_set.append(0.0)
                                        youtube_up.append(0.0)
                                    else:
                                        youtube_var_up = youtube_var_up / nb_youtube_up/1000000
                                        youtube_up.append(youtube_var_up)
                                        nb_youtube_up_set.append(nb_youtube_up)

                                    if nb_facebook_up == 0.0:
                                        nb_facebook_up_set.append(0.0)
                                        facebook_up.append(0.0)
                                    else:
                                        facebook_var_up = facebook_var_up / nb_facebook_up/1000000
                                        facebook_up.append(facebook_var_up)
                                        nb_facebook_up_set.append(nb_facebook_up)
                                    if nb_facebook_down == 0.0:
                                        facebook_down.append(0.0)
                                        nb_facebook_down_set.append(0.0)
                                    else:
                                        facebook_var_down = facebook_var_down / nb_facebook_down/1000000
                                        facebook_down.append(facebook_var_down)
                                        nb_facebook_down_set.append(nb_facebook_down)

                                    if nb_leboncoin_up == 0.0:
                                        leboncoin_up.append(0.0)
                                        nb_leboncoin_up_set.append(0.0)
                                    else:
                                        leboncoin_var_up = leboncoin_var_up / leboncoin_var_up/1000000
                                        leboncoin_up.append(leboncoin_var_up)
                                        nb_leboncoin_up_set.append(nb_leboncoin_up)
                                    if nb_leboncoin_down == 0.0:
                                        leboncoin_down.append(0.0)
                                        nb_leboncoin_down_set.append(0.0)
                                    else:
                                        leboncoin_var_down = leboncoin_var_down / nb_leboncoin_down/1000000
                                        leboncoin_down.append(leboncoin_var_down)
                                        nb_leboncoin_down_set.append(nb_leboncoin_down)
                                    break
                                """

                                if ci_usage=='NULL' or lac_usage=='NULL':
                                    continue
                                row[165]= '_'.join(row[165].split(" "))

                                if (departement + ' ' + ci_usage + '-' + lac_usage) in ci_lac_eci_tac_intermediaire and str(row[159])=='SFR' and str(row[165]) in val3 and row[164] in val5 and tecc in tech:

                                    variable = val2

                                    if b != str(f):

                                        # Graphes independants

                                        date.append(str(f))
                                        b = str(f)
                                        #a chaque nouvelle date je met le nombre de succes a 0 ainsi que le nombre total succes et autres inclus
                                        if var_ajout>0:
                                            if nb_google_up==0.0:
                                                google_up.append(0.0)
                                                nb_google_up_set.append(0.0)
                                            else:
                                                google_var_up=google_var_up/nb_google_up/1000000
                                                google_up.append(google_var_up)
                                                nb_google_up_set.append(nb_google_up)
                                            if nb_google_down==0.0:
                                                google_down.append(0.0)
                                                nb_google_down_set.append(0.0)
                                            else:
                                                google_var_down=google_var_down/nb_google_down/1000000
                                                google_down.append(google_var_down)
                                                nb_google_down_set.append(nb_google_down)

                                            if nb_youtube_down==0.0:
                                                nb_youtube_down_set.append(0.0)
                                                youtube_down.append(0.0)
                                            else:
                                                youtube_var_down=youtube_var_down/nb_youtube_down/1000000
                                                youtube_down.append(youtube_var_down)
                                                nb_youtube_down_set.append(nb_youtube_down)
                                            if nb_youtube_up==0.0:
                                                nb_youtube_up_set.append(0.0)
                                                youtube_up.append(0.0)
                                            else:
                                                youtube_var_up=youtube_var_up/nb_youtube_up/1000000
                                                youtube_up.append(youtube_var_up)
                                                nb_youtube_up_set.append(nb_youtube_up)

                                            if nb_facebook_up==0.0:
                                                nb_facebook_up_set.append(0.0)
                                                facebook_up.append(0.0)
                                            else:
                                                facebook_var_up=facebook_var_up/nb_facebook_up/1000000
                                                facebook_up.append(facebook_var_up)
                                                nb_facebook_up_set.append(nb_facebook_up)
                                            if nb_facebook_down==0.0:
                                                facebook_down.append(0.0)
                                                nb_facebook_down_set.append(0.0)
                                            else:
                                                facebook_var_down=facebook_var_down/nb_facebook_down/1000000
                                                facebook_down.append(facebook_var_down)
                                                nb_facebook_down_set.append(nb_facebook_down)

                                            if nb_leboncoin_up==0.0:
                                                leboncoin_up.append(0.0)
                                                nb_leboncoin_up_set.append(0.0)
                                            else:
                                                leboncoin_var_up=leboncoin_var_up/leboncoin_var_up/1000000
                                                leboncoin_up.append(leboncoin_var_up)
                                                nb_leboncoin_up_set.append(nb_leboncoin_up)
                                            if nb_leboncoin_down==0.0:
                                                leboncoin_down.append(0.0)
                                                nb_leboncoin_down_set.append(0.0)
                                            else:
                                                leboncoin_var_down=leboncoin_var_down/nb_leboncoin_down/1000000
                                                leboncoin_down.append(leboncoin_var_down)
                                                nb_leboncoin_down_set.append(nb_leboncoin_down)
                                            var_ajout=var_ajout+1


                                            nb_google_up = 0.0
                                            nb_google_down = 0.0
                                            nb_youtube_up = 0.0
                                            nb_youtube_down = 0.0
                                            nb_facebook_up = 0.0
                                            nb_facebook_down = 0.0
                                            nb_leboncoin_up = 0.0
                                            nb_leboncoin_down = 0.0

                                            google_var_up = 0.0
                                            google_var_down = 0.0
                                            youtube_var_up = 0.0
                                            youtube_var_down = 0.0
                                            facebook_var_up = 0.0
                                            facebook_var_down = 0.0
                                            leboncoin_var_up = 0.0
                                            leboncoin_var_down = 0.0


                                        var_ajout=var_ajout+1


                                        #GOOGLE
                                        if str(row[148]) == 'Group ID: com.google':
                                            # UPLOAD
                                            if float(row[152])!=0 or row[152]!='NULL':
                                                google_var_up = google_var_up + float(row[152])
                                                nb_google_up=nb_google_up+1
                                            # DOWNLOAD
                                            if float(row[153])!=0 or row[153]!='NULL':
                                                google_var_down = google_var_down + float(row[153])
                                                nb_google_down=nb_google_down+1
                                            var_ajout = var_ajout + 1
                                            continue

                                        # YOUTUBE
                                        if str(row[148]) == 'YouTube':
                                            # UPLOAD
                                            if float(row[152]) != 0 or row[152] != 'NULL':
                                                youtube_var_up = youtube_var_up + float(row[152])
                                                nb_youtube_up = nb_youtube_up + 1
                                            # DOWNLOAD
                                            if float(row[153]) != 0 or row[153] != 'NULL':
                                                youtube_var_down = youtube_var_down + float(row[153])
                                                nb_youtube_down = nb_youtube_down + 1
                                            var_ajout = var_ajout + 1
                                            continue

                                        # FACEBOOK
                                        if str(row[148]) == 'com.facebook.appmanager' or str(row[148]) == 'Facebook App Manager' or str(row[148]) == 'Facebook':
                                            # UPLOAD
                                            if float(row[152]) != 0 or row[152] != 'NULL':
                                                facebook_var_up = facebook_var_up + float(row[152])
                                                nb_facebook_up = nb_facebook_up + 1
                                            # DOWNLOAD
                                            if float(row[153]) != 0 or row[153] != 'NULL':
                                                facebook_var_down = facebook_var_down + float(row[153])
                                                nb_facebook_down = nb_facebook_down + 1
                                            var_ajout = var_ajout + 1
                                            continue

                                        # LEBONCOIN
                                        if str(row[148]) == 'Leboncoin':
                                            # UPLOAD
                                            if float(row[152]) != 0 or row[152] != 'NULL':
                                                leboncoin_var_up = leboncoin_var_up + float(row[152])
                                                nb_leboncoin_up = nb_leboncoin_up + 1
                                                # DOWNLOAD
                                            if float(row[153]) != 0 or row[153] != 'NULL':
                                                leboncoin_var_down = leboncoin_var_down + float(row[153])
                                                nb_leboncoin_down = nb_leboncoin_down + 1
                                            var_ajout = var_ajout + 1
                                            continue

                                    else:
                                        # GOOGLE
                                        if str(row[148]) == 'Group ID: com.google':
                                            # UPLOAD
                                            if float(row[152]) != 0 or row[152] != 'NULL':
                                                google_var_up = google_var_up + float(row[152])
                                                nb_google_up = nb_google_up + 1
                                            # DOWNLOAD
                                            if float(row[153]) != 0 or row[153] != 'NULL':
                                                google_var_down = google_var_down + float(row[153])
                                                nb_google_down = nb_google_down + 1
                                            var_ajout = var_ajout + 1
                                            continue

                                        # YOUTUBE
                                        if str(row[148]) == 'YouTube':
                                            # UPLOAD
                                            if float(row[152]) != 0 or row[152] != 'NULL':
                                                youtube_var_up = youtube_var_up + float(row[152])
                                                nb_youtube_up = nb_youtube_up + 1
                                            # DOWNLOAD
                                            if float(row[153]) != 0 or row[153] != 'NULL':
                                                youtube_var_down = youtube_var_down + float(row[153])
                                                nb_youtube_down = nb_youtube_down + 1
                                            var_ajout = var_ajout + 1
                                            continue

                                        # FACEBOOK
                                        if str(row[148]) == 'com.facebook.appmanager' or str(
                                                row[148]) == 'Facebook App Manager' or str(row[148]) == 'Facebook':
                                            # UPLOAD
                                            if float(row[152]) != 0 or row[152] != 'NULL':
                                                facebook_var_up = facebook_var_up + float(row[152])
                                                nb_facebook_up = nb_facebook_up + 1
                                            # DOWNLOAD
                                            if float(row[153]) != 0 or row[153] != 'NULL':
                                                facebook_var_down = facebook_var_down + float(row[153])
                                                nb_facebook_down = nb_facebook_down + 1
                                            var_ajout = var_ajout + 1
                                            continue

                                        # LEBONCOIN
                                        if str(row[148]) == 'Leboncoin':
                                            # UPLOAD
                                            if float(row[152]) != 0 or row[152] != 'NULL':
                                                leboncoin_var_up = leboncoin_var_up + float(row[152])
                                                nb_leboncoin_up = nb_leboncoin_up + 1
                                                # DOWNLOAD
                                            if float(row[153]) != 0 or row[153] != 'NULL':
                                                leboncoin_var_down = leboncoin_var_down + float(row[153])
                                                nb_leboncoin_down = nb_leboncoin_down + 1
                                            var_ajout = var_ajout + 1
                                            continue
                                    var_ajout = var_ajout + 1

                            if datef >= date_debut:
                                # print("je sors la 1")
                                if nb_google_up == 0.0:
                                    google_up.append(0.0)
                                    nb_google_up_set.append(0.0)
                                else:
                                    google_var_up = google_var_up / nb_google_up / 1000000
                                    google_up.append(google_var_up)
                                    nb_google_up_set.append(nb_google_up)
                                if nb_google_down == 0.0:
                                    google_down.append(0.0)
                                    nb_google_down_set.append(0.0)
                                else:
                                    google_var_down = google_var_down / nb_google_down / 1000000
                                    google_down.append(google_var_down)
                                    nb_google_down_set.append(nb_google_down)

                                if nb_youtube_down == 0.0:
                                    nb_youtube_down_set.append(0.0)
                                    youtube_down.append(0.0)
                                else:
                                    youtube_var_down = youtube_var_down / nb_youtube_down / 1000000
                                    youtube_down.append(youtube_var_down)
                                    nb_youtube_down_set.append(nb_youtube_down)
                                if nb_youtube_up == 0.0:
                                    nb_youtube_up_set.append(0.0)
                                    youtube_up.append(0.0)
                                else:
                                    youtube_var_up = youtube_var_up / nb_youtube_up / 1000000
                                    youtube_up.append(youtube_var_up)
                                    nb_youtube_up_set.append(nb_youtube_up)

                                if nb_facebook_up == 0.0:
                                    nb_facebook_up_set.append(0.0)
                                    facebook_up.append(0.0)
                                else:
                                    facebook_var_up = facebook_var_up / nb_facebook_up / 1000000
                                    facebook_up.append(facebook_var_up)
                                    nb_facebook_up_set.append(nb_facebook_up)
                                if nb_facebook_down == 0.0:
                                    facebook_down.append(0.0)
                                    nb_facebook_down_set.append(0.0)
                                else:
                                    facebook_var_down = facebook_var_down / nb_facebook_down / 1000000
                                    facebook_down.append(facebook_var_down)
                                    nb_facebook_down_set.append(nb_facebook_down)

                                if nb_leboncoin_up == 0.0:
                                    leboncoin_up.append(0.0)
                                    nb_leboncoin_up_set.append(0.0)
                                else:
                                    leboncoin_var_up = leboncoin_var_up / leboncoin_var_up / 1000000
                                    leboncoin_up.append(leboncoin_var_up)
                                    nb_leboncoin_up_set.append(nb_leboncoin_up)
                                if nb_leboncoin_down == 0.0:
                                    leboncoin_down.append(0.0)
                                    nb_leboncoin_down_set.append(0.0)
                                else:
                                    leboncoin_var_down = leboncoin_var_down / nb_leboncoin_down / 1000000
                                    leboncoin_down.append(leboncoin_var_down)
                                    nb_leboncoin_down_set.append(nb_leboncoin_down)


                            date.reverse()
                            google_up.reverse()
                            google_down.reverse()
                            youtube_up.reverse()
                            youtube_down.reverse()
                            facebook_up.reverse()
                            facebook_down.reverse()
                            leboncoin_up.reverse()
                            leboncoin_down.reverse()
                            nb_google_up_set.reverse()
                            nb_google_down_set.reverse()
                            nb_youtube_up_set.reverse()
                            nb_youtube_down_set.reverse()
                            nb_facebook_up_set.reverse()
                            nb_facebook_down_set.reverse()
                            nb_leboncoin_up_set.reverse()
                            nb_leboncoin_down_set.reverse()
                            date_usage=date


                            if len(date)>0:
                                # GOOGLE_________UP
                                # _____________________***PARAMS***________________________________________

                                ax1 = plt.subplot2grid((22, 9), (14, 0), colspan=4)
                                plt.xticks(rotation='vertical', fontsize=8)
                                plt.title('GOOGLE UL MEASUREMENT (MByte)' + date[0] + ' au ' + date[len(date) - 1])
                                params = {'legend.fontsize': 10,
                                          'legend.linewidth': 0, }
                                plt.gca().xaxis.set_major_formatter(mdates.DateFormatter("%Y-%m-%d"))
                                plt.gca().xaxis.set_major_locator(mdates.DayLocator())

                                # _____________________***AXE 1***________________________________________


                                x = [dt.datetime.strptime(d, "%Y-%m-%d").date() for d in date]
                                y = nb_google_up_set
                                ax1.bar(x, y, color='#4885ed', zorder=1)
                                ax1.set_ylabel('Nb UL Usage', color='#4885ed')
                                for tl in ax1.get_yticklabels():
                                    tl.set_color('#4885ed')

                                    # _____________________***AXE 2***________________________________________

                                ax2 = ax1.twinx()
                                x = [dt.datetime.strptime(d, "%Y-%m-%d").date() for d in date]
                                y = google_up
                                ax2.plot(x, y, color='#db3236', zorder=2)
                                plt.legend(loc='best')
                                ax2.set_xlabel('Jour')
                                ax2.set_ylabel('Moy DL (MByte)', color='#db3236')
                                ax2.grid(True)
                                ax2.xaxis_date()
                                for t2 in ax2.get_yticklabels():
                                    t2.set_color('#db3236')

                                # GOOGLE_________DOWN
                                # _____________________***PARAMS***________________________________________

                                ax1 = plt.subplot2grid((22, 9), (14, 5), colspan=4)
                                plt.xticks(rotation='vertical', fontsize=8)
                                plt.title('GOOGLE DL MEASUREMENT (MByte)' + date[0] + ' au ' + date[len(date) - 1])
                                params = {'legend.fontsize': 10,
                                          'legend.linewidth': 0, }
                                plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%d/%m/%Y'))
                                plt.gca().xaxis.set_major_locator(mdates.DayLocator())

                                # _____________________***AXE 1***________________________________________


                                x = [dt.datetime.strptime(d, "%Y-%m-%d").date() for d in date]
                                y = nb_google_down_set
                                ax1.bar(x, y, color='#4885ed', zorder=1)
                                ax1.set_ylabel('Nb DL Usage', color='#4885ed')
                                for tl in ax1.get_yticklabels():
                                    tl.set_color('#4885ed')

                                    # _____________________***AXE 2***________________________________________

                                ax2 = ax1.twinx()
                                x = [dt.datetime.strptime(d, '%Y-%m-%d').date() for d in date]
                                y = google_down
                                ax2.plot(x, y, color='#db3236', zorder=2)
                                plt.legend(loc='best')
                                ax2.set_xlabel('Jour')
                                ax2.set_ylabel('Moy DL (MByte)', color='#db3236')
                                ax2.grid(True)
                                ax2.xaxis_date()
                                for t2 in ax2.get_yticklabels():
                                    t2.set_color('#db3236')

                                    # ________________________________________________--___**_YOUTUBE _**___--___________________________________________________
                                # YOUTUBE_________UP
                                # _____________________***PARAMS***________________________________________

                                ax1 = plt.subplot2grid((22, 9), (16, 0), colspan=4)
                                plt.xticks(rotation='vertical', fontsize=8)
                                plt.title('YOUTUBE UL MEASUREMENT (MByte)' + date[0] + ' au ' + date[len(date) - 1])
                                params = {'legend.fontsize': 10,
                                          'legend.linewidth': 0, }
                                plt.gca().xaxis.set_major_formatter(mdates.DateFormatter("%Y-%m-%d"))
                                plt.gca().xaxis.set_major_locator(mdates.DayLocator())

                                # _____________________***AXE 1***________________________________________


                                x = [dt.datetime.strptime(d, "%Y-%m-%d").date() for d in date]
                                y = nb_youtube_up_set
                                ax1.bar(x, y, color='#b31217', zorder=1)
                                ax1.set_ylabel('Nb UL Usage', color='#b31217')
                                for tl in ax1.get_yticklabels():
                                    tl.set_color('#b31217')

                                    # _____________________***AXE 2***________________________________________

                                ax2 = ax1.twinx()
                                x = [dt.datetime.strptime(d, "%Y-%m-%d").date() for d in date]
                                y = youtube_up
                                ax2.plot(x, y, color='black', zorder=2)
                                plt.legend(loc='best')
                                ax2.set_xlabel('Jour')
                                ax2.set_ylabel('Moy UL (MByte)', color='black')
                                ax2.grid(True)
                                ax2.xaxis_date()
                                for t2 in ax2.get_yticklabels():
                                    t2.set_color('black')

                                # YOUTUBE_________DOWN
                                # _____________________***PARAMS***________________________________________

                                ax1 = plt.subplot2grid((22, 9), (16, 5), colspan=4)
                                plt.xticks(rotation='vertical', fontsize=8)
                                plt.title('YOUTUBE DL MEASUREMENT (MByte)' + date[0] + ' au ' + date[len(date) - 1])
                                params = {'legend.fontsize': 10,
                                          'legend.linewidth': 0, }
                                plt.gca().xaxis.set_major_formatter(mdates.DateFormatter("%Y-%m-%d"))
                                plt.gca().xaxis.set_major_locator(mdates.DayLocator())

                                # _____________________***AXE 1***________________________________________


                                x = [dt.datetime.strptime(d, "%Y-%m-%d").date() for d in date]
                                y = nb_youtube_down_set
                                ax1.bar(x, y, color='#b31217', zorder=1)
                                ax1.set_ylabel('Nb DL Usage', color='#b31217')
                                for tl in ax1.get_yticklabels():
                                    tl.set_color('#b31217')

                                    # _____________________***AXE 2***________________________________________

                                ax2 = ax1.twinx()
                                x = [dt.datetime.strptime(d, "%Y-%m-%d").date() for d in date]
                                y = youtube_down
                                ax2.plot(x, y, color='black', zorder=2)
                                plt.legend(loc='best')
                                ax2.set_xlabel('Jour')
                                ax2.set_ylabel('Moy DL (MByte)', color='black')
                                ax2.grid(True)
                                ax2.xaxis_date()
                                for t2 in ax2.get_yticklabels():
                                    t2.set_color('black')

                                # ________________________________________________--___**_FACEBOOK _**___--___________________________________________________
                                # FACEBOOK_________UP
                                # _____________________***PARAMS***________________________________________

                                ax1 = plt.subplot2grid((22, 9), (18, 0), colspan=4)
                                plt.xticks(rotation='vertical', fontsize=8)
                                plt.title('Facebook UL MEASUREMENT (MByte)' + date[0] + ' au ' + date[len(date) - 1])
                                params = {'legend.fontsize': 10,
                                          'legend.linewidth': 0, }
                                plt.gca().xaxis.set_major_formatter(mdates.DateFormatter("%Y-%m-%d"))
                                plt.gca().xaxis.set_major_locator(mdates.DayLocator())

                                # _____________________***AXE 1***________________________________________


                                x = [dt.datetime.strptime(d, "%Y-%m-%d").date() for d in date]
                                y = nb_facebook_up_set
                                ax1.bar(x, y, color='#3b5998', zorder=1)
                                ax1.set_ylabel('Nb UL Usage', color='#3b5998')
                                for tl in ax1.get_yticklabels():
                                    tl.set_color('#3b5998')

                                    # _____________________***AXE 2***________________________________________

                                ax2 = ax1.twinx()
                                x = [dt.datetime.strptime(d, "%Y-%m-%d").date() for d in date]
                                y = facebook_up
                                ax2.plot(x, y, color='#8b9dc3', zorder=2)
                                plt.legend(loc='best')
                                ax2.set_xlabel('Jour')
                                ax2.set_ylabel('Moy UL (MByte)', color='#8b9dc3')
                                ax2.grid(True)
                                ax2.xaxis_date()
                                for t2 in ax2.get_yticklabels():
                                    t2.set_color('#8b9dc3')

                                # FACEBOOK_________DOWN
                                # _____________________***PARAMS***________________________________________

                                ax1 = plt.subplot2grid((22, 9), (18, 5), colspan=4)
                                plt.xticks(rotation='vertical', fontsize=8)
                                plt.title('Facebook DL MEASUREMENT (MByte)' + date[0] + ' au ' + date[len(date) - 1])
                                params = {'legend.fontsize': 10,
                                          'legend.linewidth': 0, }
                                plt.gca().xaxis.set_major_formatter(mdates.DateFormatter("%Y-%m-%d"))
                                plt.gca().xaxis.set_major_locator(mdates.DayLocator())

                                # _____________________***AXE 1***________________________________________


                                x = [dt.datetime.strptime(d, "%Y-%m-%d").date() for d in date]
                                y = nb_facebook_down_set
                                ax1.bar(x, y, color='#3b5998', zorder=1)
                                ax1.set_ylabel('Nb DL Usage', color='#3b5998')
                                for tl in ax1.get_yticklabels():
                                    tl.set_color('#3b5998')

                                    # _____________________***AXE 2***________________________________________

                                ax2 = ax1.twinx()
                                x = [dt.datetime.strptime(d, "%Y-%m-%d").date() for d in date]
                                y = facebook_down
                                ax2.plot(x, y, color='#8b9dc3', zorder=2)
                                plt.legend(loc='best')
                                ax2.set_xlabel('Jour')
                                ax2.set_ylabel('Moy DL (MByte)', color='#8b9dc3')
                                ax2.grid(True)
                                ax2.xaxis_date()
                                for t2 in ax2.get_yticklabels():
                                    t2.set_color('#8b9dc3')

                                # ________________________________________________--___**LEBONCOIN _**___--___________________________________________________
                                # LEBONCOIN_________UP
                                # _____________________***PARAMS***________________________________________

                                ax1 = plt.subplot2grid((22, 9), (20, 0), colspan=4)
                                plt.xticks(rotation='vertical', fontsize=8)
                                plt.title('Leboncoin UL MEASUREMENT (MByte)' + date[0] + ' au ' + date[len(date) - 1])
                                params = {'legend.fontsize': 10,
                                          'legend.linewidth': 0, }
                                plt.gca().xaxis.set_major_formatter(mdates.DateFormatter("%Y-%m-%d"))
                                plt.gca().xaxis.set_major_locator(mdates.DayLocator())

                                # _____________________***AXE 1***________________________________________


                                x = [dt.datetime.strptime(d, "%Y-%m-%d").date() for d in date]
                                y = nb_leboncoin_up_set
                                ax1.bar(x, y, color='#D97114', zorder=1)
                                ax1.set_ylabel('Nb UL Usage', color='#D97114')
                                for tl in ax1.get_yticklabels():
                                    tl.set_color('#D97114')

                                    # _____________________***AXE 2***________________________________________

                                ax2 = ax1.twinx()
                                x = [dt.datetime.strptime(d, "%Y-%m-%d").date() for d in date]
                                y = leboncoin_up
                                ax2.plot(x, y, color='black', zorder=2)
                                plt.legend(loc='best')
                                ax2.set_xlabel('Jour')
                                ax2.set_ylabel('Moy UL (MByte)', color='black')
                                ax2.grid(True)
                                ax2.xaxis_date()
                                for t2 in ax2.get_yticklabels():
                                    t2.set_color('black')

                                # LEBONCOIN_________DOWN
                                # _____________________***PARAMS***________________________________________

                                ax1 = plt.subplot2grid((22, 9), (20, 5), colspan=4)
                                plt.xticks(rotation='vertical', fontsize=8)
                                plt.title('Leboncoin DL MEASUREMENT (MByte)' + date[0] + ' au ' + date[len(date) - 1])
                                params = {'legend.fontsize': 10,
                                          'legend.linewidth': 0, }
                                plt.gca().xaxis.set_major_formatter(mdates.DateFormatter("%Y-%m-%d"))
                                plt.gca().xaxis.set_major_locator(mdates.DayLocator())

                                # _____________________***AXE 1***________________________________________


                                x = [dt.datetime.strptime(d, "%Y-%m-%d").date() for d in date]
                                y = nb_leboncoin_down_set
                                ax1.bar(x, y, color='#D97114', zorder=1)
                                ax1.set_ylabel('Nb DL Usage', color='#D97114')
                                for tl in ax1.get_yticklabels():
                                    tl.set_color('#D97114')

                                    # _____________________***AXE 2***________________________________________

                                ax2 = ax1.twinx()
                                x = [dt.datetime.strptime(d, "%Y-%m-%d").date() for d in date]
                                y = leboncoin_down
                                ax2.plot(x, y, color='black', zorder=2)
                                plt.legend(loc='best')
                                ax2.set_xlabel('Jour')
                                ax2.set_ylabel('Moy DL (MByte)', color='black')
                                ax2.grid(True)
                                ax2.xaxis_date()
                                for t2 in ax2.get_yticklabels():
                                    t2.set_color('black')

                            else:
                                date = ['2017-04-05']
                                google_up = [0]
                                google_down = [0]
                                youtube_up = [0]
                                youtube_down = [0]
                                facebook_up = [0]
                                facebook_down = [0]
                                leboncoin_up = [0]
                                leboncoin_down = [0]
                                nb_google_up_set = [0]
                                nb_google_down_set = [0]
                                nb_youtube_up_set = [0]
                                nb_youtube_down_set = [0]
                                nb_facebook_up_set = [0]
                                nb_facebook_down_set = [0]
                                nb_leboncoin_up_set = [0]
                                nb_leboncoin_down_set = [0]

                                # GOOGLE_________UP
                                # _____________________***PARAMS***________________________________________

                                ax1 = plt.subplot2grid((22, 9), (14, 0), colspan=4)
                                plt.xticks(rotation='vertical', fontsize=8)
                                plt.title('GOOGLE UL MEASUREMENT (MByte)')
                                params = {'legend.fontsize': 10,
                                          'legend.linewidth': 0, }
                                plt.gca().xaxis.set_major_formatter(mdates.DateFormatter("%Y-%m-%d"))
                                plt.gca().xaxis.set_major_locator(mdates.DayLocator())

                                # _____________________***AXE 1***________________________________________


                                x = [dt.datetime.strptime(d, "%Y-%m-%d").date() for d in date]
                                y = nb_google_up_set
                                ax1.bar(x, y, color='#4885ed', zorder=1)
                                ax1.set_ylabel('Nb UL Usage', color='#4885ed')
                                for tl in ax1.get_yticklabels():
                                    tl.set_color('#4885ed')

                                    # _____________________***AXE 2***________________________________________

                                ax2 = ax1.twinx()
                                x = [dt.datetime.strptime(d, "%Y-%m-%d").date() for d in date]
                                y = google_up
                                ax2.plot(x, y, color='#db3236', zorder=2)
                                plt.legend(loc='best')
                                ax2.set_xlabel('Jour')
                                ax2.set_ylabel('Moy DL (MByte)', color='#db3236')
                                ax2.grid(True)
                                ax2.xaxis_date()
                                for t2 in ax2.get_yticklabels():
                                    t2.set_color('#db3236')

                                # GOOGLE_________DOWN
                                # _____________________***PARAMS***________________________________________

                                ax1 = plt.subplot2grid((22, 9), (14, 5), colspan=4)
                                plt.xticks(rotation='vertical', fontsize=8)
                                plt.title('GOOGLE DL MEASUREMENT (MByte)')
                                params = {'legend.fontsize': 10,
                                          'legend.linewidth': 0, }
                                plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%d/%m/%Y'))
                                plt.gca().xaxis.set_major_locator(mdates.DayLocator())

                                # _____________________***AXE 1***________________________________________


                                x = [dt.datetime.strptime(d, "%Y-%m-%d").date() for d in date]
                                y = nb_google_down_set
                                ax1.bar(x, y, color='#4885ed', zorder=1)
                                ax1.set_ylabel('Nb DL Usage', color='#4885ed')
                                for tl in ax1.get_yticklabels():
                                    tl.set_color('#4885ed')

                                    # _____________________***AXE 2***________________________________________

                                ax2 = ax1.twinx()
                                x = [dt.datetime.strptime(d, '%Y-%m-%d').date() for d in date]
                                y = google_down
                                ax2.plot(x, y, color='#db3236', zorder=2)
                                plt.legend(loc='best')
                                ax2.set_xlabel('Jour')
                                ax2.set_ylabel('Moy DL (MByte)', color='#db3236')
                                ax2.grid(True)
                                ax2.xaxis_date()
                                for t2 in ax2.get_yticklabels():
                                    t2.set_color('#db3236')

                                    # ________________________________________________--___**_YOUTUBE _**___--___________________________________________________
                                # YOUTUBE_________UP
                                # _____________________***PARAMS***________________________________________

                                ax1 = plt.subplot2grid((22, 9), (16, 0), colspan=4)
                                plt.xticks(rotation='vertical', fontsize=8)
                                plt.title('YOUTUBE UL MEASUREMENT (MByte)')
                                params = {'legend.fontsize': 10,
                                          'legend.linewidth': 0, }
                                plt.gca().xaxis.set_major_formatter(mdates.DateFormatter("%Y-%m-%d"))
                                plt.gca().xaxis.set_major_locator(mdates.DayLocator())

                                # _____________________***AXE 1***________________________________________


                                x = [dt.datetime.strptime(d, "%Y-%m-%d").date() for d in date]
                                y = nb_youtube_up_set
                                ax1.bar(x, y, color='#b31217', zorder=1)
                                ax1.set_ylabel('Nb UL Usage', color='#b31217')
                                for tl in ax1.get_yticklabels():
                                    tl.set_color('#b31217')

                                    # _____________________***AXE 2***________________________________________

                                ax2 = ax1.twinx()
                                x = [dt.datetime.strptime(d, "%Y-%m-%d").date() for d in date]
                                y = youtube_up
                                ax2.plot(x, y, color='black', zorder=2)
                                plt.legend(loc='best')
                                ax2.set_xlabel('Jour')
                                ax2.set_ylabel('Moy UL (MByte)', color='black')
                                ax2.grid(True)
                                ax2.xaxis_date()
                                for t2 in ax2.get_yticklabels():
                                    t2.set_color('black')

                                # YOUTUBE_________DOWN
                                # _____________________***PARAMS***________________________________________

                                ax1 = plt.subplot2grid((22, 9), (16, 5), colspan=4)
                                plt.xticks(rotation='vertical', fontsize=8)
                                plt.title('YOUTUBE DL MEASUREMENT (MByte)')
                                params = {'legend.fontsize': 10,
                                          'legend.linewidth': 0, }
                                plt.gca().xaxis.set_major_formatter(mdates.DateFormatter("%Y-%m-%d"))
                                plt.gca().xaxis.set_major_locator(mdates.DayLocator())

                                # _____________________***AXE 1***________________________________________


                                x = [dt.datetime.strptime(d, "%Y-%m-%d").date() for d in date]
                                y = nb_youtube_down_set
                                ax1.bar(x, y, color='#b31217', zorder=1)
                                ax1.set_ylabel('Nb DL Usage', color='#b31217')
                                for tl in ax1.get_yticklabels():
                                    tl.set_color('#b31217')

                                    # _____________________***AXE 2***________________________________________

                                ax2 = ax1.twinx()
                                x = [dt.datetime.strptime(d, "%Y-%m-%d").date() for d in date]
                                y = youtube_down
                                ax2.plot(x, y, color='black', zorder=2)
                                plt.legend(loc='best')
                                ax2.set_xlabel('Jour')
                                ax2.set_ylabel('Moy DL (MByte)', color='black')
                                ax2.grid(True)
                                ax2.xaxis_date()
                                for t2 in ax2.get_yticklabels():
                                    t2.set_color('black')

                                # ________________________________________________--___**_FACEBOOK _**___--___________________________________________________
                                # FACEBOOK_________UP
                                # _____________________***PARAMS***________________________________________

                                ax1 = plt.subplot2grid((22, 9), (18, 0), colspan=4)
                                plt.xticks(rotation='vertical', fontsize=8)
                                plt.title('Facebook UL MEASUREMENT (MByte)')
                                params = {'legend.fontsize': 10,
                                          'legend.linewidth': 0, }
                                plt.gca().xaxis.set_major_formatter(mdates.DateFormatter("%Y-%m-%d"))
                                plt.gca().xaxis.set_major_locator(mdates.DayLocator())

                                # _____________________***AXE 1***________________________________________


                                x = [dt.datetime.strptime(d, "%Y-%m-%d").date() for d in date]
                                y = nb_facebook_up_set
                                ax1.bar(x, y, color='#3b5998', zorder=1)
                                ax1.set_ylabel('Nb UL Usage', color='#3b5998')
                                for tl in ax1.get_yticklabels():
                                    tl.set_color('#3b5998')

                                    # _____________________***AXE 2***________________________________________

                                ax2 = ax1.twinx()
                                x = [dt.datetime.strptime(d, "%Y-%m-%d").date() for d in date]
                                y = facebook_up
                                ax2.plot(x, y, color='#8b9dc3', zorder=2)
                                plt.legend(loc='best')
                                ax2.set_xlabel('Jour')
                                ax2.set_ylabel('Moy UL (MByte)', color='#8b9dc3')
                                ax2.grid(True)
                                ax2.xaxis_date()
                                for t2 in ax2.get_yticklabels():
                                    t2.set_color('#8b9dc3')

                                # FACEBOOK_________DOWN
                                # _____________________***PARAMS***________________________________________

                                ax1 = plt.subplot2grid((22, 9), (18, 5), colspan=4)
                                plt.xticks(rotation='vertical', fontsize=8)
                                plt.title('Facebook DL MEASUREMENT (MByte)')
                                params = {'legend.fontsize': 10,
                                          'legend.linewidth': 0, }
                                plt.gca().xaxis.set_major_formatter(mdates.DateFormatter("%Y-%m-%d"))
                                plt.gca().xaxis.set_major_locator(mdates.DayLocator())

                                # _____________________***AXE 1***________________________________________


                                x = [dt.datetime.strptime(d, "%Y-%m-%d").date() for d in date]
                                y = nb_facebook_down_set
                                ax1.bar(x, y, color='#3b5998', zorder=1)
                                ax1.set_ylabel('Nb DL Usage', color='#3b5998')
                                for tl in ax1.get_yticklabels():
                                    tl.set_color('#3b5998')

                                    # _____________________***AXE 2***________________________________________

                                ax2 = ax1.twinx()
                                x = [dt.datetime.strptime(d, "%Y-%m-%d").date() for d in date]
                                y = facebook_down
                                ax2.plot(x, y, color='#8b9dc3', zorder=2)
                                plt.legend(loc='best')
                                ax2.set_xlabel('Jour')
                                ax2.set_ylabel('Moy DL (MByte)', color='#8b9dc3')
                                ax2.grid(True)
                                ax2.xaxis_date()
                                for t2 in ax2.get_yticklabels():
                                    t2.set_color('#8b9dc3')

                                # ________________________________________________--___**LEBONCOIN _**___--___________________________________________________
                                # LEBONCOIN_________UP
                                # _____________________***PARAMS***________________________________________

                                ax1 = plt.subplot2grid((22, 9), (20, 0), colspan=4)
                                plt.xticks(rotation='vertical', fontsize=8)
                                plt.title('Leboncoin UL MEASUREMENT (MByte)')
                                params = {'legend.fontsize': 10,
                                          'legend.linewidth': 0, }
                                plt.gca().xaxis.set_major_formatter(mdates.DateFormatter("%Y-%m-%d"))
                                plt.gca().xaxis.set_major_locator(mdates.DayLocator())

                                # _____________________***AXE 1***________________________________________


                                x = [dt.datetime.strptime(d, "%Y-%m-%d").date() for d in date]
                                y = nb_leboncoin_up_set
                                ax1.bar(x, y, color='#D97114', zorder=1)
                                ax1.set_ylabel('Nb UL Usage', color='#D97114')
                                for tl in ax1.get_yticklabels():
                                    tl.set_color('#D97114')

                                    # _____________________***AXE 2***________________________________________

                                ax2 = ax1.twinx()
                                x = [dt.datetime.strptime(d, "%Y-%m-%d").date() for d in date]
                                y = leboncoin_up
                                ax2.plot(x, y, color='black', zorder=2)
                                plt.legend(loc='best')
                                ax2.set_xlabel('Jour')
                                ax2.set_ylabel('Moy UL (MByte)', color='black')
                                ax2.grid(True)
                                ax2.xaxis_date()
                                for t2 in ax2.get_yticklabels():
                                    t2.set_color('black')

                                # LEBONCOIN_________DOWN
                                # _____________________***PARAMS***________________________________________

                                ax1 = plt.subplot2grid((22, 9), (20, 5), colspan=4)
                                plt.xticks(rotation='vertical', fontsize=8)
                                plt.title('Leboncoin DL MEASUREMENT (MByte)')
                                params = {'legend.fontsize': 10,
                                          'legend.linewidth': 0, }
                                plt.gca().xaxis.set_major_formatter(mdates.DateFormatter("%Y-%m-%d"))
                                plt.gca().xaxis.set_major_locator(mdates.DayLocator())

                                # _____________________***AXE 1***________________________________________


                                x = [dt.datetime.strptime(d, "%Y-%m-%d").date() for d in date]
                                y = nb_leboncoin_down_set
                                ax1.bar(x, y, color='#D97114', zorder=1)
                                ax1.set_ylabel('Nb DL Usage', color='#D97114')
                                for tl in ax1.get_yticklabels():
                                    tl.set_color('#D97114')

                                    # _____________________***AXE 2***________________________________________

                                ax2 = ax1.twinx()
                                x = [dt.datetime.strptime(d, "%Y-%m-%d").date() for d in date]
                                y = leboncoin_down
                                ax2.plot(x, y, color='black', zorder=2)
                                plt.legend(loc='best')
                                ax2.set_xlabel('Jour')
                                ax2.set_ylabel('Moy DL (MByte)', color='black')
                                ax2.grid(True)
                                ax2.xaxis_date()
                                for t2 in ax2.get_yticklabels():
                                    t2.set_color('black')

                            return date_usage,google_up,google_down,youtube_up,youtube_down,facebook_up,facebook_down,leboncoin_up,leboncoin_down,nb_google_up_set,nb_google_down_set,nb_youtube_up_set,nb_youtube_down_set,nb_facebook_up_set,nb_facebook_down_set,nb_leboncoin_up_set,nb_leboncoin_down_set


                                # ________________________________________________--___**_FIN MATPLOTLIB _**___--___________________________________________________


                        #PYGAL

                        def taux_incoming2(fichier,val1,val2,val3,val4,val5,tech,event):
                            #print(val3)
                            one_ex = []
                            two_ex = []
                            fichier = fichier
                            three_ex = []
                            four_ex = []
                            five_ex = []
                            six_ex = []
                            seven_ex = []
                            eight_ex = []
                            other_one_ex = []
                            other_two_ex = []
                            date_ex = []
                            one_cumul_exe = 0.0
                            two_cumul_exe = 0.0
                            three_cumul_exe = 0.0
                            four_cumul_exe = 0.0
                            five_cumul_exe = 0.0
                            six_cumul_exe = 0.0
                            seven_cumul_exe = 0.0
                            eight_cumul_exe = 0.0
                            other_one_cumul_exe = 0.0  # Succes comul
                            other_two_cumul_exe = 0.0  # Not Connected cumul
                            taux_one = 0.0
                            taux_two = 0.0
                            taux_three = 0.0
                            taux_five = 0.0
                            taux_six = 0.0
                            taux_seven = 0.0
                            taux_eight = 0.0
                            taux_succes = 0.0
                            taux_notconnected = 0.0
                            valeur_totale = 0.0
                            drop_total = 0.0
                            caf_cumul_exe = 0.0
                            connected_cumul_exe=0.0
                            connected_set_exe=[]
                            caf_sef_exe = []
                            drop_exe = []
                            legende = []

                            # Incoming
                            one_ex_incoming = []
                            two_ex_incoming = []
                            three_ex_incoming = []
                            four_ex_incoming = []
                            five_ex_incoming = []
                            six_ex_incoming = []
                            seven_ex_incoming = []
                            eight_ex_incoming = []
                            other_one_ex_incoming = []
                            other_two_ex_incoming = []
                            date_ex_incoming = []
                            one_cumul_exe_incoming = 0.0
                            two_cumul_exe_incoming = 0.0
                            three_cumul_exe_incoming = 0.0
                            four_cumul_exe_incoming = 0.0
                            five_cumul_exe_incoming = 0.0
                            six_cumul_exe_incoming = 0.0
                            seven_cumul_exe_incoming = 0.0
                            eight_cumul_exe_incoming = 0.0
                            other_one_cumul_exe_incoming = 0.0  # Succes comul
                            other_two_cumul_exe_incoming = 0.0  # Not Connected cumul
                            taux_one_incoming = 0.0
                            taux_two_incoming = 0.0
                            taux_three_incoming = 0.0
                            taux_four_incoming = 0.0
                            taux_five_incoming = 0.0
                            taux_six_incoming = 0.0
                            taux_seven_incoming = 0.0
                            taux_eight_incoming = 0.0
                            taux_succes_incoming = 0.0
                            taux_notconnected_incoming = 0.0
                            taux_connected_incoming=0.0
                            valeur_totale_incoming = 0.0
                            drop_total_incoming = 0.0
                            caf_taux = 0.0
                            drop_exe_incoming = []
                            legende = []

                            #one_ex, two_ex, three_ex, four_ex, five_ex, six_ex, seven_ex, eight_ex, other_one_ex, other_two_ex, date_ex, one_cumul_exe, two_cumul_exe, three_cumul_exe, four_cumul_exe, five_cumul_exe, six_cumul_exe, seven_cumul_exe, eight_cumul_exe, other_one_cumul_exe, other_two_cumul_exe, drop_exe, drop_total, caf_cumul_exe, caf_sef_exe = etat_par_date(fichier,val1,val2,val3)
                            #valeur_totale = caf_cumul_exe + one_cumul_exe + two_cumul_exe + three_cumul_exe + four_cumul_exe + five_cumul_exe + six_cumul_exe + seven_cumul_exe + eight_cumul_exe + other_one_cumul_exe + other_two_cumul_exe

                            one_ex_incoming, two_ex_incoming, three_ex_incoming, four_ex_incoming, five_ex_incoming, six_ex_incoming, seven_ex_incoming, eight_ex_incoming, other_one_ex_incoming, other_two_ex_incoming, date_ex_incoming, one_cumul_exe_incoming, two_cumul_exe_incoming, three_cumul_exe_incoming, four_cumul_exe_incoming, five_cumul_exe_incoming, six_cumul_exe_incoming, seven_cumul_exe_incoming, eight_cumul_exe_incoming, other_one_cumul_exe_incoming, other_two_cumul_exe_incoming, drop_exe_incoming, drop_total_incoming, caf_cumul_exe, caf_sef_exe,connected_cumul_exe,connected_set_exe = etat_par_date_incoming(fichier,val1,val2,val3,val4,val5,tech)
                            valeur_totale_incoming = caf_cumul_exe + one_cumul_exe_incoming + two_cumul_exe_incoming + three_cumul_exe_incoming + four_cumul_exe_incoming + five_cumul_exe_incoming + six_cumul_exe_incoming + seven_cumul_exe_incoming + eight_cumul_exe_incoming + other_one_cumul_exe_incoming + other_two_cumul_exe_incoming+connected_cumul_exe
                            date_ex.reverse()


                            #print(valeur_totale_incoming)
                            # Incoming taux
                            taux_one_incoming = (one_cumul_exe_incoming * 100.0) / valeur_totale_incoming  # ERROR
                            taux_two_incoming = (two_cumul_exe_incoming * 100.0) / valeur_totale_incoming
                            taux_three_incoming = (three_cumul_exe_incoming * 100.0) / valeur_totale_incoming
                            taux_four_incoming = (four_cumul_exe_incoming * 100.0) / valeur_totale_incoming
                            taux_five_incoming = (five_cumul_exe_incoming * 100.0) / valeur_totale_incoming
                            taux_six_incoming = (six_cumul_exe_incoming * 100.0) / valeur_totale_incoming
                            taux_seven_incoming = (seven_cumul_exe_incoming * 100.0) / valeur_totale_incoming
                            taux_eight_incoming = (eight_cumul_exe_incoming * 100.0) / valeur_totale_incoming
                            taux_succes_incoming = (other_one_cumul_exe_incoming * 100.0) / valeur_totale_incoming
                            taux_notconnected_incoming = (other_two_cumul_exe_incoming * 100.0) / valeur_totale_incoming
                            drop_total_incoming = (drop_total_incoming * 100) / valeur_totale_incoming
                            caf_taux = (caf_cumul_exe * 100) / valeur_totale_incoming
                            taux_connected_incoming=(connected_cumul_exe*100.0)/valeur_totale_incoming

                            # ____________________________________--Pygal--________________________________________________________

                            pie_chart2 = pygal.Pie(height=400)
                            pie_chart2.title = 'Voix Incoming'
                            pie_chart2.add('Succes: '+str(round(taux_succes_incoming,1))+'%', taux_succes_incoming)
                            pie_chart2.add('NotCon: '+str(round(taux_notconnected_incoming,1))+'%', taux_notconnected_incoming)
                            pie_chart2.add('Drop: '+str(round(drop_total_incoming,1))+'%', drop_total_incoming)
                            pie_chart2.add('Failure: '+str(round(caf_taux,1))+'%', caf_taux)
                            pie_chart2.render_in_browser()
                            pie_chart2.render_to_file("INCOMING.svg")

                            # __________________________________--Pygal--_____________________________________________________________

                        def taux_outgoing2(fichier,val1,val2,val3,val4,val5,tech,event):
                            #print(val3)
                            one_ex = []
                            two_ex = []
                            fichier = fichier
                            three_ex = []
                            four_ex = []
                            five_ex = []
                            six_ex = []
                            seven_ex = []
                            eight_ex = []
                            other_one_ex = []
                            other_two_ex = []
                            date_ex = []
                            one_cumul_exe = 0.0
                            two_cumul_exe = 0.0
                            three_cumul_exe = 0.0
                            four_cumul_exe = 0.0
                            five_cumul_exe = 0.0
                            six_cumul_exe = 0.0
                            seven_cumul_exe = 0.0
                            eight_cumul_exe = 0.0
                            other_one_cumul_exe = 0.0  # Succes comul
                            other_two_cumul_exe = 0.0  # Not Connected cumul
                            taux_one = 0.0
                            taux_two = 0.0
                            taux_three = 0.0
                            taux_five = 0.0
                            taux_six = 0.0
                            taux_seven = 0.0
                            taux_eight = 0.0
                            taux_succes = 0.0
                            taux_notconnected = 0.0
                            valeur_totale = 0.0
                            drop_total = 0.0
                            caf_cumul_exe = 0.0
                            connected_cumul_exe=0.0
                            connected_set_exe=[]
                            caf_sef_exe = []
                            drop_exe = []
                            legende = []

                            # Incoming
                            one_ex_incoming = []
                            two_ex_incoming = []
                            three_ex_incoming = []
                            four_ex_incoming = []
                            five_ex_incoming = []
                            six_ex_incoming = []
                            seven_ex_incoming = []
                            eight_ex_incoming = []
                            other_one_ex_incoming = []
                            other_two_ex_incoming = []
                            date_ex_incoming = []
                            one_cumul_exe_incoming = 0.0
                            two_cumul_exe_incoming = 0.0
                            three_cumul_exe_incoming = 0.0
                            four_cumul_exe_incoming = 0.0
                            five_cumul_exe_incoming = 0.0
                            six_cumul_exe_incoming = 0.0
                            seven_cumul_exe_incoming = 0.0
                            eight_cumul_exe_incoming = 0.0
                            other_one_cumul_exe_incoming = 0.0  # Succes comul
                            other_two_cumul_exe_incoming = 0.0  # Not Connected cumul
                            taux_one_incoming = 0.0
                            taux_two_incoming = 0.0
                            taux_three_incoming = 0.0
                            taux_four_incoming = 0.0
                            taux_five_incoming = 0.0
                            taux_six_incoming = 0.0
                            taux_seven_incoming = 0.0
                            taux_eight_incoming = 0.0
                            taux_succes_incoming = 0.0
                            taux_notconnected_incoming = 0.0
                            taux_connected_incoming=0.0
                            valeur_totale_incoming = 0.0
                            drop_total_incoming = 0.0
                            caf_taux = 0.0
                            drop_exe_incoming = []
                            legende = []

                            #one_ex, two_ex, three_ex, four_ex, five_ex, six_ex, seven_ex, eight_ex, other_one_ex, other_two_ex, date_ex, one_cumul_exe, two_cumul_exe, three_cumul_exe, four_cumul_exe, five_cumul_exe, six_cumul_exe, seven_cumul_exe, eight_cumul_exe, other_one_cumul_exe, other_two_cumul_exe, drop_exe, drop_total, caf_cumul_exe, caf_sef_exe = etat_par_date(fichier,val1,val2,val3)
                            #valeur_totale = caf_cumul_exe + one_cumul_exe + two_cumul_exe + three_cumul_exe + four_cumul_exe + five_cumul_exe + six_cumul_exe + seven_cumul_exe + eight_cumul_exe + other_one_cumul_exe + other_two_cumul_exe

                            one_ex_incoming, two_ex_incoming, three_ex_incoming, four_ex_incoming, five_ex_incoming, six_ex_incoming, seven_ex_incoming, eight_ex_incoming, other_one_ex_incoming, other_two_ex_incoming, date_ex_incoming, one_cumul_exe_incoming, two_cumul_exe_incoming, three_cumul_exe_incoming, four_cumul_exe_incoming, five_cumul_exe_incoming, six_cumul_exe_incoming, seven_cumul_exe_incoming, eight_cumul_exe_incoming, other_one_cumul_exe_incoming, other_two_cumul_exe_incoming, drop_exe_incoming, drop_total_incoming, caf_cumul_exe, caf_sef_exe,connected_cumul_exe,connected_set_exe = etat_par_date_outgoing(fichier,val1,val2,val3,val4,val5,tech)
                            valeur_totale_incoming = caf_cumul_exe + one_cumul_exe_incoming + two_cumul_exe_incoming + three_cumul_exe_incoming + four_cumul_exe_incoming + five_cumul_exe_incoming + six_cumul_exe_incoming + seven_cumul_exe_incoming + eight_cumul_exe_incoming + other_one_cumul_exe_incoming + other_two_cumul_exe_incoming+connected_cumul_exe
                            date_ex.reverse()

                            """
                            taux_one = (one_cumul_exe * 100.0) / valeur_totale  # ERROR
                            taux_two = (two_cumul_exe * 100.0) / valeur_totale
                            taux_three = (three_cumul_exe * 100.0) / valeur_totale
                            taux_four = (four_cumul_exe * 100.0) / valeur_totale
                            taux_five = (five_cumul_exe * 100.0) / valeur_totale
                            taux_six = (six_cumul_exe * 100.0) / valeur_totale
                            taux_seven = (seven_cumul_exe * 100.0) / valeur_totale
                            taux_eight = (eight_cumul_exe * 100.0) / valeur_totale
                            taux_succes = (other_one_cumul_exe * 100.0) / valeur_totale
                            taux_notconnected = (other_two_cumul_exe * 100.0) / valeur_totale
                            taux_drop = (drop_total * 100) / valeur_totale
                            """
                            #print(valeur_totale_incoming)
                            # Incoming taux
                            taux_one_incoming = (one_cumul_exe_incoming * 100.0) / valeur_totale_incoming  # ERROR
                            taux_two_incoming = (two_cumul_exe_incoming * 100.0) / valeur_totale_incoming
                            taux_three_incoming = (three_cumul_exe_incoming * 100.0) / valeur_totale_incoming
                            taux_four_incoming = (four_cumul_exe_incoming * 100.0) / valeur_totale_incoming
                            taux_five_incoming = (five_cumul_exe_incoming * 100.0) / valeur_totale_incoming
                            taux_six_incoming = (six_cumul_exe_incoming * 100.0) / valeur_totale_incoming
                            taux_seven_incoming = (seven_cumul_exe_incoming * 100.0) / valeur_totale_incoming
                            taux_eight_incoming = (eight_cumul_exe_incoming * 100.0) / valeur_totale_incoming
                            taux_succes_incoming = (other_one_cumul_exe_incoming * 100.0) / valeur_totale_incoming
                            taux_notconnected_incoming = (other_two_cumul_exe_incoming * 100.0) / valeur_totale_incoming
                            drop_total_incoming = (drop_total_incoming * 100) / valeur_totale_incoming
                            caf_taux = (caf_cumul_exe * 100) / valeur_totale_incoming
                            taux_connected_incoming=(connected_cumul_exe*100.0)/valeur_totale_incoming

                            # _________________________________--Pygal--________________________________________________________

                            pie_chart1 = pygal.Pie(height=400)
                            pie_chart1.title = 'Voix Outgoing'
                            pie_chart1.add('Succes: '+str(round(taux_succes_incoming,1))+'%', taux_succes_incoming)
                            pie_chart1.add('NotCon: '+str(round(taux_notconnected_incoming,1))+'%', taux_notconnected_incoming)
                            pie_chart1.add('Drop: '+str(round(drop_total_incoming,1))+'%', drop_total_incoming)
                            pie_chart1.add('Failure: '+str(round(caf_taux,1))+'%', caf_taux)
                            pie_chart1.render_in_browser()
                            pie_chart1.render_to_file("OUTGOING.svg")

                            # _________________________________--Pygal--________________________________________________________

                        def latences3(fichier,val1,val2,val3,val4,val5,tech,event):
                            date_debut = time.strptime(val1, "%d/%m/%Y")
                            date_fin = time.strptime(val2, "%d/%m/%Y")
                            fichier = fichier
                            date = []
                            trois_g = 0.0
                            quatre_g = 0.0
                            deux_g = 0.0
                            autre_g = 0.0
                            taux_2g = 0.0
                            taux_3g = 0.0
                            taux_4g = 0.0
                            taux_autre = 0.0
                            autre = 0.0
                            trois = 0.0
                            deux = 0.0
                            quatre = 0.0
                            deux_cumul = 0.0
                            trois_cumul = 0.0
                            quatre_cumul = 0.0
                            total_g = 0.0
                            # print val1
                            # print(val2)
                            # print val3
                            # print val5

                            csvfile = open(fichier, 'r')
                            reader = csv.reader(csvfile)

                            b = ''
                            D = {}
                            dict_taux = {}
                            dq = []
                            total = 0.10
                            latency = []
                            lat = 0.0
                            nombre = 0.0
                            row_check = 0.0
                            var_ajout = 0.0
                            for row in reader:
                                # f = date_test.match(row[1])
                                row_check = row_check + 1
                                f = row[1][0:10]
                                a = row[161]
                                gt = row[210]
                                tecc = row[236]
                                latence = row[175]
                                if f == 'date_utc_a':
                                    continue

                                datef = time.strptime(f, "%d/%m/%Y")
                                row[221] = '_'.join(row[221].split(" "))
                                if datef > date_fin:
                                    continue
                                if datef < date_debut:
                                    if nombre == 0:
                                        lat = 0.0
                                        nombre = 0.0
                                        latency.append(lat)
                                        break
                                    lat = lat / nombre
                                    latency.append(lat)
                                    break
                                if row_check == val4:
                                    # print("J ai quitte LAAA___ 2")
                                    if nombre == 0:
                                        lat = 0.0
                                        nombre = 0.0
                                        latency.append(lat)
                                        break
                                    lat = lat / nombre
                                    latency.append(lat)
                                    break

                                row[241] = '_'.join(row[241].split(" "))
                                if row[241] in val3 and row[240] in val5 and tecc in tech:

                                    if b != str(f):
                                        date.append(str(f))
                                        b = str(f)
                                        if var_ajout > 0:
                                            if nombre == 0:
                                                lat = 0.0
                                                nombre = 0.0
                                                latency.append(lat)
                                                continue
                                            lat = lat / nombre
                                            latency.append(lat)
                                            lat = 0.0
                                            nombre = 0.0

                                    if latence != 'NULL' and row[200] != 'NULL' and float(row[200]) >= 512:
                                        nombre = nombre + 1
                                        lat = lat + float(latence)
                                        var_ajout = var_ajout + 1

                            date.reverse()
                            latency.reverse()
                            # _________________________________________--PYGAL--______________________________________________
                            y = latency
                            nb_users_bar = pygal.Bar(height=300,x_label_rotation=90)
                            nb_users_bar.title = 'Latence Moyenne (ms)'
                            nb_users_bar.x_labels = date
                            nb_users_bar.add('Latence Moy(ms)', y)
                            nb_users_bar.render_in_browser()
                            nb_users_bar.render_to_file("LATENCE_Moy_HTT.svg")
                            # _________________________________________--PYGAL--______________________________________________

                        def mobile_gt2(fichier, val1, val2, val3,val5,tech,event):
                            date_debut=time.strptime(val1, "%Y-%m-%d")
                            date_fin = time.strptime(val2, "%Y-%m-%d")
                            fichier = fichier
                            date = []
                            trois_g=0.0
                            quatre_g=0.0
                            deux_g=0.0
                            autre_g = 0.0
                            taux_2g=0.0
                            taux_3g = 0.0
                            taux_4g=0.0
                            taux_autre=0.0
                            autre=0.0
                            trois=0.0
                            deux=0.0
                            quatre=0.0
                            deux_cumul=0.0
                            trois_cumul=0.0
                            quatre_cumul=0.0
                            total_g=0.0
                            #print val1
                            #print(val2)
                            #print val3
                            #print val5

                            csvfile = open(fichier, 'r')
                            reader = csv.reader(csvfile)

                            b = ''
                            D={}
                            dict_taux={}
                            dq=[]
                            total=0.10
                            for row in reader:
                                #f = date_test.match(row[1])
                                dqaid=row[0]
                                f = row[1][0:10]
                                a = row[161]
                                gt=row[210]
                                tecc=row[216]
                                if f=='date_utc_a':
                                    continue

                                datef = time.strptime(f, "%Y-%m-%d")

                                if datef>date_fin:
                                    continue
                                if datef<date_debut:
                                    break

                                row[221]= '_'.join(row[221].split(" "))
                                if str(row[220]) in val5 and str(row[221]) in val3 and tecc in tech:

                                    if dqaid not in dq:
                                            dq.append(dqaid)
                                            total=total+1

                                            if b != str(f):

                                                date.append(str(f))
                                                b = str(f)
                                                if gt not in D:
                                                    D[gt]=1

                                                else:
                                                    D[str(gt)]=D[str(gt)]+1
                                            else:
                                                if gt not in D:
                                                    D[gt]=1
                                                else:
                                                    D[str(gt)]=D[str(gt)]+1
                                    if str(row[216])=='3G':
                                        trois_g=trois_g+1
                                    if str(row[216])=='2G':
                                        deux_g=deux_g+1
                                    if str(row[216])=='4G':
                                        quatre_g=quatre_g+1
                                    if str(row[216])=='UNKNOWN':
                                        autre_g=autre_g+1

                            fracs=[]
                            legende=[]
                            labels=[]
                            under_two=0.0
                            dict_taux_reduce=[]
                            for val in D:
                                dict_taux[val]=D[val]*100.0/total
                                #print(dict_taux[val])
                                if dict_taux[val]<=3:
                                    #print(dict_taux[val])
                                    under_two=under_two+dict_taux[val]
                                    #fracs.append(dict_taux[val])
                                    #labels.append(dict_taux.keys())
                                    #legende.append((val))
                                else:
                                    fracs.append(dict_taux[val])
                                    arr=round(dict_taux[val], 3)
                                    #print(arr)
                                    labels.append(str(val)+': '+str(arr) + '%')
                                    legende.append(str(val)+': '+str(arr) + '%')



                            #print(dict_taux)
                            #print(under_two)
                            fracs.append(under_two)
                            arr = round(under_two, 3)
                            colors = ['green', 'red', 'yellow', 'orange','white', 'purple', 'lightgray', 'moccasin', 'lime', 'cyan', 'pink','black','blue','brown']
                            legende.append('Autres: '+str(arr) + '%')
                            labels.append('Autres')



                            #TAUX TECNO
                            total_g = deux_g + trois_g + quatre_g + autre_g
                            taux_2g = (deux_g * 100.0) / total_g
                            taux_3g = (trois_g * 100.0) / total_g
                            taux_4g = (quatre_g * 100.0) / total_g
                            taux_autre = (autre_g) / total_g

                            #________________________--Pygal--__________________________________________
                            pie_techno = pygal.Pie(height=400)
                            pie_techno.title = 'TECHNO'
                            pie_techno.add('2G: '+str(round(taux_2g,1)), taux_2g)
                            pie_techno.add('3G: '+str(round(taux_3g,1)), taux_3g)
                            pie_techno.add('4G: '+str(round(taux_4g,1)), taux_4g)
                            pie_techno.add('Autre: '+str(round(taux_autre,1)), taux_autre)
                            pie_techno.render_in_browser()
                            pie_techno.render_to_file("techno.svg")
                            # ________________________--Pygal--__________________________________________

                        def mobile_gt3(fichier, val1, val2, val3,val5,tech,event):
                            date_debut=time.strptime(val1, "%Y-%m-%d")
                            date_fin = time.strptime(val2, "%Y-%m-%d")
                            fichier = fichier
                            date = []
                            trois_g=0.0
                            quatre_g=0.0
                            deux_g=0.0
                            autre_g = 0.0
                            taux_2g=0.0
                            taux_3g = 0.0
                            taux_4g=0.0
                            taux_autre=0.0
                            autre=0.0
                            trois=0.0
                            deux=0.0
                            quatre=0.0
                            deux_cumul=0.0
                            trois_cumul=0.0
                            quatre_cumul=0.0
                            total_g=0.0
                            #print val1
                            #print(val2)
                            #print val3
                            #print val5

                            csvfile = open(fichier, 'r')
                            reader = csv.reader(csvfile)

                            b = ''
                            D={}
                            dict_taux={}
                            dq=[]
                            total=0.10
                            for row in reader:
                                #f = date_test.match(row[1])
                                dqaid=row[0]
                                f = row[1][0:10]
                                a = row[161]
                                gt=row[210]
                                tecc=row[216]
                                if f=='date_utc_a':
                                    continue

                                datef = time.strptime(f, "%Y-%m-%d")

                                if datef>date_fin:
                                    continue
                                if datef<date_debut:
                                    break

                                row[221]= '_'.join(row[221].split(" "))
                                if str(row[220]) in val5 and str(row[221]) in val3 and tecc in tech:

                                    if dqaid not in dq:
                                            dq.append(dqaid)
                                            total=total+1

                                            if b != str(f):

                                                date.append(str(f))
                                                b = str(f)
                                                if gt not in D:
                                                    D[gt]=1

                                                else:
                                                    D[str(gt)]=D[str(gt)]+1
                                            else:
                                                if gt not in D:
                                                    D[gt]=1
                                                else:
                                                    D[str(gt)]=D[str(gt)]+1
                                    if str(row[216])=='3G':
                                        trois_g=trois_g+1
                                    if str(row[216])=='2G':
                                        deux_g=deux_g+1
                                    if str(row[216])=='4G':
                                        quatre_g=quatre_g+1
                                    if str(row[216])=='UNKNOWN':
                                        autre_g=autre_g+1

                            fracs=[]
                            legende=[]
                            labels=[]
                            under_two=0.0
                            dict_taux_reduce=[]

                            for val in D:
                                dict_taux[val]=D[val]*100.0/total
                                #print(dict_taux[val])
                                if dict_taux[val]<=3:
                                    #print(dict_taux[val])
                                    under_two=under_two+dict_taux[val]
                                    #fracs.append(dict_taux[val])
                                    #labels.append(dict_taux.keys())
                                    #legende.append((val))
                                else:
                                    fracs.append(dict_taux[val])
                                    arr=round(dict_taux[val], 3)
                                    #print(arr)
                                    labels.append(str(val)+': '+str(round(arr,1)) + '%')
                                    legende.append(str(val)+': '+str(round(arr,1)) + '%')


                            #TAUX TECNO
                            total_g = deux_g + trois_g + quatre_g + autre_g
                            taux_2g = (deux_g * 100.0) / total_g
                            taux_3g = (trois_g * 100.0) / total_g
                            taux_4g = (quatre_g * 100.0) / total_g
                            taux_autre = (autre_g) / total_g

                            # ______________________________--Pygal--______________________________________
                            Parc_Mobile = pygal.Pie(height=400,margin_left=70,legend_box_size=10)
                            Parc_Mobile.title = 'PARC MOBILE'
                            compteur=0
                            for valeur in fracs:
                                Parc_Mobile.add(legende[compteur],round(valeur,1))
                                compteur=compteur+1
                            Parc_Mobile.render_in_browser()
                            Parc_Mobile.render_to_file("Parc_Mobile.svg")



                            #______________________________--Pygal--_______________________________________

                        def success_ratio3(fichier, val1, val2, val3,val4,val5,tech):
                            date_debut = time.strptime(val1, "%d/%m/%Y")
                            date_fin = time.strptime(val2, "%d/%m/%Y")
                            succes = 0.0
                            success_set = []
                            success_taux = []
                            fichier = fichier
                            nb = 0.0
                            nb_set = []
                            date = []
                            csvfile = open(fichier, 'r')
                            # print(csvfile)
                            reader = csv.reader(csvfile)

                            b = ''
                            var_ajout = 0.0
                            variable = ''

                            row_check = 0.0
                            for row in reader:
                                row_check = row_check + 1
                                # print(row_check)
                                f = row[1][0:10]

                                tecc = row[235]
                                if f == 'date_utc_a':
                                    continue
                                datef = time.strptime(f, "%d/%m/%Y")
                                if datef > date_fin:
                                    continue

                                if datef < date_debut:
                                    success_set.append(succes)
                                    nb_set.append(nb)
                                    break
                                if row_check == val4:
                                    # print("J ai quitte LAAA___ 2 et SUCCESSSS")

                                    success_set.append(succes)
                                    nb_set.append(nb)
                                    break

                                row[241] = '_'.join(row[241].split(" "))

                                if str(row[241]) in val3 and row[240] in val5 and tecc in tech:

                                    variable = val2

                                    if b != str(f):

                                        # Graphes independants

                                        date.append(str(f))
                                        b = str(f)
                                        # a chaque nouvelle date je met le nombre de succes a 0 ainsi que le nombre total succes et autres inclus
                                        if var_ajout > 0:
                                            success_set.append(succes)
                                            var_ajout = var_ajout + 1
                                            nb_set.append(nb)
                                            # print succes
                                            # print nb
                                            succes = 0.0
                                            nb = 0
                                            var_ajout = var_ajout + 1

                                        if str(row[238]) == 'Success' or str(row[238]) == 'Canceled':
                                            succes = succes + 1
                                            nb = nb + 1
                                            var_ajout = var_ajout + 1
                                            continue
                                        else:
                                            if row[238] != 'N/A':
                                                nb = nb + 1
                                                var_ajout = var_ajout + 1



                                    else:
                                        var_ajout = var_ajout + 1
                                        if str(row[238]) == 'Success' or str(row[238]) == 'Canceled':
                                            succes = succes + 1
                                            nb = nb + 1
                                            continue
                                        else:
                                            if row[238] != 'N/A':
                                                nb = nb + 1
                                                continue

                                    var_ajout = var_ajout + 1

                            # print(nb_set)

                            # print(date)

                            date.reverse()
                            success_set.reverse()
                            nb_set.reverse()

                            # print(" ")
                            # print("_____________________AFFICHONS DU SUCCES_____________________________")
                            # print(date)
                            # print(success_set)
                            # print(nb_set)
                            # print(" ")
                            # print(date)
                            # print(int(date[1][6])+1)
                            # print(date)

                            i = 0

                            for s in success_set:
                                if nb_set[i] == 0.0:
                                    success_taux.append(0.0)
                                    i = i + 1
                                    continue
                                success_taux.append(float(s) * 100.0 / nb_set[i])
                                i = i + 1

                            b = []
                            n_set = []
                            n = 2
                            a = 1  # decallage date sur les graphes
                            for i in date:
                                b.append(a)
                                n_set.append(n)
                                a = a + 2
                                n = n + 2

                            # __________________________-------------------------PYGAL------------------------------------__________________________________________________________________________
                            success_plot = pygal.Line(height=400, secondary_range=(min(success_taux), max(success_taux)),x_label_rotation=90)
                            success_plot.title = 'SUCCESS_RATIO'
                            success_plot.x_labels = date
                            success_plot.add('Nombre_Success', success_set)
                            success_plot.add('Taux_Succes', success_taux, secondary=True)
                            success_plot.render_in_browser()
                            success_plot.render_to_file("Success_RATIO_data.svg")
                            # __________________________-------------------------PYGAL------------------------------------__________________________________________________________________________

                        def debit_download_3(fichier, val1, val2, val3,val4,val5,tech,event):
                            date_debut = time.strptime(val1, "%d/%m/%Y")
                            date_fin = time.strptime(val2, "%d/%m/%Y")
                            fichier = fichier
                            date = []
                            trois_g = 0.0
                            quatre_g = 0.0
                            deux_g = 0.0
                            autre_g = 0.0
                            taux_2g = 0.0
                            taux_3g = 0.0
                            taux_4g = 0.0
                            taux_autre = 0.0
                            autre = 0.0
                            trois = 0.0
                            deux = 0.0
                            quatre = 0.0
                            deux_cumul = 0.0
                            trois_cumul = 0.0
                            quatre_cumul = 0.0
                            total_g = 0.0
                            # print val1
                            # print(val2)
                            # print val3
                            # print val5

                            csvfile = open(fichier, 'r')
                            reader = csv.reader(csvfile)

                            b = ''
                            D = {}
                            dict_taux = {}
                            dq = []
                            total = 0.10
                            debit_set = []
                            deb = 0.0
                            nombre = 0.0
                            row_check = 0.0
                            check_decalage = 0.0
                            nombre_p_jour = []
                            for row in reader:
                                # f = date_test.match(row[1])
                                row_check = row_check + 1
                                f = row[1][0:10]
                                a = row[161]
                                gt = row[210]
                                tecc = row[236]
                                debit = row[171]
                                if f == 'date_utc_a':
                                    continue

                                datef = time.strptime(f, "%d/%m/%Y")

                                if datef > date_fin:
                                    continue
                                if datef < date_debut:
                                    if nombre == 0.0:
                                        deb = 0.0
                                        nombre = 0.0
                                        nombre_p_jour.append(nombre)
                                        debit_set.append(deb)
                                        check_decalage = check_decalage + 1
                                        break
                                    deb = deb / (nombre * 1000)
                                    nombre_p_jour.append(nombre)
                                    debit_set.append(deb)
                                    break
                                if row_check == val4:
                                    if nombre == 0.0:
                                        deb = 0.0
                                        nombre = 0.0
                                        debit_set.append(deb)
                                        nombre_p_jour.append(nombre)
                                        check_decalage = check_decalage + 1
                                        break
                                    deb = deb / (nombre * 1000)
                                    nombre_p_jour.append(nombre)
                                    debit_set.append(deb)
                                    break

                                row[241] = '_'.join(row[241].split(" "))
                                if row[241] in val3 and row[240] in val5 and tecc in tech and row[239] == 'Download':
                                    if b != str(f):

                                        date.append(str(f))
                                        b = str(f)
                                        if check_decalage > 0:
                                            if nombre == 0.0:
                                                deb = 0.0
                                                nombre = 0.0
                                                debit_set.append(deb)
                                                nombre_p_jour.append(nombre)
                                                check_decalage = check_decalage + 1
                                                continue
                                            deb = deb / (nombre * 1000)
                                            nombre_p_jour.append(nombre)
                                            debit_set.append(deb)
                                            deb = 0.0
                                            nombre = 0.0
                                        check_decalage = check_decalage + 1

                                    if debit != 'NULL' and row[200] != 'NULL' and float(row[200]) >= 512 and row[238] == 'Success':
                                        check_decalage = check_decalage + 1
                                        nombre = nombre + 1
                                        deb = deb + float(debit)
                                    check_decalage = check_decalage + 1

                            date.reverse()
                            debit_set.reverse()
                            nombre_p_jour.reverse()
                            # __________________________-------------------------PYGAL------------------------------------__________________________________________________________________________
                            success_plot = pygal.Line(height=400, secondary_range=(min(debit_set+nombre_p_jour), max(debit_set+nombre_p_jour)),x_label_rotation=90)
                            success_plot.title = 'DEBIT MOY DOWNLOAD (Mb/s)'
                            success_plot.x_labels = date
                            success_plot.add('Nb_TEST_DL', nombre_p_jour)
                            success_plot.add('Moy DL (Mb/s)', debit_set, secondary=True)
                            success_plot.render_in_browser()
                            success_plot.render_to_file("DEBIT_Download_HTTP.svg")
                            # __________________________-------------------------PYGAL------------------------------------__________________________________________________________________________

                        def debit_upload_3(fichier, val1, val2, val3,val4,val5,tech,event):
                            date_debut = time.strptime(val1, "%d/%m/%Y")
                            date_fin = time.strptime(val2, "%d/%m/%Y")
                            fichier = fichier
                            date = []
                            trois_g = 0.0
                            quatre_g = 0.0
                            deux_g = 0.0
                            autre_g = 0.0
                            taux_2g = 0.0
                            taux_3g = 0.0
                            taux_4g = 0.0
                            taux_autre = 0.0
                            autre = 0.0
                            trois = 0.0
                            deux = 0.0
                            quatre = 0.0
                            deux_cumul = 0.0
                            trois_cumul = 0.0
                            quatre_cumul = 0.0
                            total_g = 0.0
                            # print val1
                            # print(val2)
                            # print val3
                            # print val5

                            csvfile = open(fichier, 'r')
                            reader = csv.reader(csvfile)

                            b = ''
                            D = {}
                            dict_taux = {}
                            dq = []
                            total = 0.10
                            debit_set = []
                            deb = 0.0
                            nombre = 0.0
                            row_check = 0.0
                            check_decalage = 0.0
                            nombre_p_jour = []
                            for row in reader:
                                # f = date_test.match(row[1])
                                row_check = row_check + 1
                                f = row[1][0:10]
                                a = row[161]
                                gt = row[210]
                                tecc = row[236]
                                debit = row[171]
                                if f == 'date_utc_a':
                                    continue

                                datef = time.strptime(f, "%d/%m/%Y")

                                if datef > date_fin:
                                    continue
                                if datef < date_debut:
                                    if nombre == 0.0:
                                        deb = 0.0
                                        nombre = 0.0
                                        nombre_p_jour.append(nombre)
                                        debit_set.append(deb)
                                        check_decalage = check_decalage + 1
                                        break
                                    deb = deb / (nombre * 1000)
                                    nombre_p_jour.append(nombre)
                                    debit_set.append(deb)
                                    break
                                if row_check == val4:
                                    if nombre == 0.0:
                                        deb = 0.0
                                        nombre = 0.0
                                        debit_set.append(deb)
                                        nombre_p_jour.append(nombre)
                                        check_decalage = check_decalage + 1
                                        break
                                    deb = deb / (nombre * 1000)
                                    nombre_p_jour.append(nombre)
                                    debit_set.append(deb)
                                    break

                                row[241] = '_'.join(row[241].split(" "))
                                if row[241] in val3 and row[240] in val5 and tecc in tech and row[239] == 'Upload':
                                    if b != str(f):

                                        date.append(str(f))
                                        b = str(f)
                                        if check_decalage > 0:
                                            if nombre == 0.0:
                                                deb = 0.0
                                                nombre = 0.0
                                                debit_set.append(deb)
                                                nombre_p_jour.append(nombre)
                                                check_decalage = check_decalage + 1
                                                continue
                                            deb = deb / (nombre * 1000)
                                            nombre_p_jour.append(nombre)
                                            debit_set.append(deb)
                                            deb = 0.0
                                            nombre = 0.0
                                        check_decalage = check_decalage + 1

                                    if debit != 'NULL' and row[200] != 'NULL' and float(row[200]) >= 512 and row[
                                        238] == 'Success':
                                        check_decalage = check_decalage + 1
                                        nombre = nombre + 1
                                        deb = deb + float(debit)
                                    check_decalage = check_decalage + 1

                            date.reverse()
                            debit_set.reverse()
                            nombre_p_jour.reverse()



                            # __________________________-------------------------PYGAL------------------------------------__________________________________________________________________________
                            success_plot = pygal.Line(height=400, secondary_range=(min(debit_set + nombre_p_jour), max(debit_set + nombre_p_jour)),x_label_rotation=90)
                            success_plot.title = 'DEBIT MOY UPLOAD (Mb/s)'
                            success_plot.x_labels = date
                            success_plot.add('Nb UL',nombre_p_jour)
                            success_plot.add('Moy UL(Mb/s)',debit_set, secondary=True)
                            success_plot.render_in_browser()
                            success_plot.render_to_file("DEBIT_MOY_UP_HTTP.svg")
                            # __________________________-------------------------PYGAL------------------------------------__________________________________________________________________________

                        def failure_ratio3(fichier, val1, val2, val3, val4, val5, tech,event):
                            date_debut = time.strptime(val1, "%d/%m/%Y")
                            date_fin = time.strptime(val2, "%d/%m/%Y")
                            succes = 0.0
                            success_set = []
                            success_taux = []
                            fichier = fichier
                            nb = 0.0
                            nb_set = []
                            date = []
                            csvfile = open(fichier, 'r')
                            # print(csvfile)
                            reader = csv.reader(csvfile)

                            b = ''
                            var_ajout = 0.0
                            variable = ''

                            row_check = 0.0
                            for row in reader:
                                row_check = row_check + 1
                                # print(row_check)
                                f = row[1][0:10]

                                tecc = row[235]
                                if f == 'date_utc_a':
                                    continue
                                datef = time.strptime(f, "%d/%m/%Y")
                                if datef > date_fin:
                                    continue

                                if datef < date_debut:
                                    success_set.append(succes)
                                    nb_set.append(nb)
                                    break
                                if row_check == val4:
                                    success_set.append(succes)
                                    nb_set.append(nb)
                                    break

                                row[241] = '_'.join(row[241].split(" "))

                                if str(row[241]) in val3 and row[240] in val5 and tecc in tech:

                                    variable = val2

                                    if b != str(f):

                                        # Graphes independants

                                        date.append(str(f))
                                        b = str(f)
                                        # a chaque nouvelle date je met le nombre de succes a 0 ainsi que le nombre total succes et autres inclus
                                        if var_ajout > 0:
                                            success_set.append(succes)
                                            var_ajout = var_ajout + 1
                                            nb_set.append(nb)
                                            succes = 0.0
                                            nb = 0
                                            var_ajout = var_ajout + 1

                                        if str(row[238]) == 'Failure':
                                            succes = succes + 1
                                            nb = nb + 1
                                            var_ajout = var_ajout + 1
                                            continue
                                        if str(row[238]) == 'Timeout':
                                            succes = succes + 1
                                            nb = nb + 1
                                            continue
                                        else:
                                            if row[238] != 'N/A':
                                                nb = nb + 1
                                                var_ajout = var_ajout + 1


                                    else:
                                        var_ajout = var_ajout + 1
                                        if str(row[238]) == 'Failure':
                                            succes = succes + 1
                                            nb = nb + 1
                                            continue
                                        if str(row[238]) == 'Timeout':
                                            succes = succes + 1
                                            nb = nb + 1
                                            continue

                                        else:
                                            if row[238] != 'N/A':
                                                nb = nb + 1
                                                continue
                                    var_ajout = var_ajout + 1

                            # print(nb_set)
                            # print(date)
                            # print(success_set)
                            # print(date)

                            date.reverse()
                            # print(date)
                            success_set.reverse()
                            nb_set.reverse()
                            # print(date)
                            # print(int(date[1][6])+1)
                            # print(date)

                            i = 0

                            for s in success_set:
                                if nb_set[i] == 0.0:
                                    success_taux.append(0.0)
                                    i = i + 1
                                    continue
                                success_taux.append(float(s) * 100.0 / nb_set[i])
                                i = i + 1

                            b = []
                            n_set = []
                            n = 2
                            a = 1  # decallage date sur les graphes
                            for i in date:
                                b.append(a)
                                n_set.append(n)
                                a = a + 2
                                n = n + 2

                            # __________________________-------------------------PYGAL------------------------------------__________________________________________________________________________
                            Failure_plot = pygal.Line(height=400,
                                                      secondary_range=(min(success_taux), max(success_taux)),x_label_rotation=90)
                            Failure_plot.title = 'FAILURE_RATIO'
                            Failure_plot.x_labels = date
                            Failure_plot.add('Nombre_Echec', success_set)
                            Failure_plot.add('Taux_Echec', success_taux, secondary=True)
                            Failure_plot.render_in_browser()
                            Failure_plot.render_to_file("Failure_RATIO.svg")
                            # __________________________-------------------------PYGAL------------------------------------__________________________________________________________________________

                        def drop_ratio3(fichier, val1, val2, val3,val4,val5,tech,event):
                            # print(val3)
                            # print('Tu es dans la fonction Succes et tu as VAL1: '+val1)
                            # print('Tu es dans la fonction Succes et tu as VAL2: '+val2)
                            date_debut = time.strptime(val1, "%d/%m/%Y")
                            date_fin = time.strptime(val2, "%d/%m/%Y")
                            succes = 0.0
                            success_set = []
                            success_taux = []
                            fichier = fichier
                            nb = 0.0
                            nb_set = []
                            date = []
                            csvfile = open(fichier, 'r')
                            # print(csvfile)
                            reader = csv.reader(csvfile)

                            b = ''
                            var_ajout = 0.0
                            variable = ''

                            row_check = 0.0
                            for row in reader:
                                row_check = row_check + 1
                                # print(row_check)
                                f = row[1][0:10]

                                tecc = row[235]
                                if f == 'date_utc_a':
                                    continue
                                datef = time.strptime(f, "%d/%m/%Y")
                                if datef > date_fin:
                                    continue

                                if datef < date_debut:
                                    success_set.append(succes)
                                    nb_set.append(nb)
                                    break
                                if row_check == val4:
                                    success_set.append(succes)
                                    nb_set.append(nb)
                                    break

                                row[241] = '_'.join(row[241].split(" "))

                                if str(row[241]) in val3 and row[240] in val5 and tecc in tech:

                                    variable = val2

                                    if b != str(f):

                                        # Graphes independants

                                        date.append(str(f))
                                        b = str(f)
                                        # a chaque nouvelle date je met le nombre de succes a 0 ainsi que le nombre total succes et autres inclus
                                        if var_ajout > 0:
                                            success_set.append(succes)
                                            var_ajout = var_ajout + 1
                                            nb_set.append(nb)
                                            succes = 0.0
                                            nb = 0

                                        var_ajout = var_ajout + 1
                                        if str(row[238]) == 'Drop':
                                            succes = succes + 1
                                            nb = nb + 1
                                            var_ajout = var_ajout + 1
                                            continue
                                        else:
                                            if row[238] != 'N/A':
                                                nb = nb + 1
                                                var_ajout = var_ajout + 1


                                    else:
                                        var_ajout = var_ajout + 1
                                        if str(row[238]) == 'Drop':
                                            succes = succes + 1
                                            nb = nb + 1
                                            continue
                                        else:
                                            if row[238] != 'N/A':
                                                nb = nb + 1
                                                continue
                                    var_ajout = var_ajout + 1

                            # print(nb_set)
                            # print(date)
                            # print(success_set)
                            # print(date)

                            date.reverse()
                            success_set.reverse()
                            nb_set.reverse()
                            # print(date)
                            # print(int(date[1][6])+1)
                            # print(date)

                            i = 0

                            for s in success_set:
                                if nb_set[i] == 0.0:
                                    success_taux.append(0.0)
                                    i = i + 1
                                    continue
                                success_taux.append(float(s) * 100.0 / nb_set[i])
                                i = i + 1

                            b = []
                            n_set = []
                            n = 2
                            a = 1  # decallage date sur les graphes
                            for i in date:
                                b.append(a)
                                n_set.append(n)
                                a = a + 2
                                n = n + 2

                            #_____________________--PYGAL--_________________________
                            Drop_plot = pygal.Line(height=400, secondary_range=(min(success_taux), max(success_taux)),x_label_rotation=90)
                            Drop_plot.title = 'DROP_RATIO'
                            Drop_plot.x_labels = date
                            Drop_plot.add('Nombre_Drop', success_set)
                            Drop_plot.add('Taux_Drop', success_taux, secondary=True)
                            Drop_plot.render_in_browser()
                            Drop_plot.render_to_file("Drop_RATIO.svg")
                            # _____________________--PYGAL--_________________________

                        def debit_moy_3(fichier, val1, val2, val3,val4,val5,tech,event):
                            date_debut = time.strptime(val1, "%d/%m/%Y")
                            date_fin = time.strptime(val2, "%d/%m/%Y")
                            fichier = fichier
                            date = []
                            trois_g = 0.0
                            quatre_g = 0.0
                            deux_g = 0.0
                            autre_g = 0.0
                            taux_2g = 0.0
                            taux_3g = 0.0
                            taux_4g = 0.0
                            taux_autre = 0.0
                            autre = 0.0
                            trois = 0.0
                            deux = 0.0
                            quatre = 0.0
                            deux_cumul = 0.0
                            trois_cumul = 0.0
                            quatre_cumul = 0.0
                            total_g = 0.0
                            # print val1
                            # print(val2)
                            # print val3
                            # print val5

                            csvfile = open(fichier, 'r')
                            reader = csv.reader(csvfile)

                            b = ''
                            D = {}
                            dict_taux = {}
                            dq = []
                            total = 0.10
                            debit_set = []
                            deb = 0.0
                            nombre = 0.0
                            row_check = 0.0
                            check_decalage = 0.0
                            nombre_p_jour = []

                            for row in reader:
                                # f = date_test.match(row[1])
                                row_check = row_check + 1
                                f = row[1][0:10]
                                a = row[161]
                                gt = row[210]
                                tecc = row[236]
                                debit = row[171]
                                if f == 'date_utc_a':
                                    continue

                                datef = time.strptime(f, "%d/%m/%Y")

                                if datef > date_fin:
                                    continue
                                if datef < date_debut:
                                    if nombre == 0.0:
                                        deb = 0.0
                                        nombre = 0.0
                                        debit_set.append(deb)
                                        nombre_p_jour.append(nombre)
                                        check_decalage = check_decalage + 1
                                        break
                                    deb = deb / (nombre * 1000)
                                    nombre_p_jour.append(nombre)
                                    debit_set.append(deb)
                                    break
                                if row_check == val4:
                                    if nombre == 0.0:
                                        deb = 0.0
                                        nombre = 0.0
                                        debit_set.append(deb)
                                        nombre_p_jour.append(nombre)
                                        check_decalage = check_decalage + 1
                                        break
                                    deb = deb / (nombre * 1000)
                                    nombre_p_jour.append(nombre)
                                    debit_set.append(deb)
                                    break

                                row[241] = '_'.join(row[241].split(" "))
                                if row[241] in val3 and row[240] in val5 and tecc in tech:
                                    if b != str(f):
                                        date.append(str(f))
                                        b = str(f)
                                        if check_decalage > 0:
                                            if nombre == 0.0:
                                                deb = 0.0
                                                nombre = 0.0
                                                debit_set.append(deb)
                                                nombre_p_jour.append(nombre)
                                                check_decalage = check_decalage + 1
                                                continue
                                            deb = deb / (nombre * 1000)
                                            nombre_p_jour.append(nombre)
                                            debit_set.append(deb)
                                            deb = 0.0
                                            nombre = 0.0
                                        check_decalage = check_decalage + 1

                                    if debit != 'NULL' and row[200] != 'NULL' and float(row[200]) >= 512 and row[
                                        238] == 'Success':
                                        check_decalage = check_decalage + 1
                                        nombre = nombre + 1
                                        deb = deb + float(debit)
                                    check_decalage = check_decalage + 1

                            date.reverse()
                            debit_set.reverse()
                            nombre_p_jour.reverse()

                            # _____________________--PYGAL--_________________________
                            DEBIT_plot = pygal.Line(height=400, secondary_range=(min(debit_set + debit_set), max(debit_set + debit_set)),x_label_rotation=90)
                            DEBIT_plot.title = 'Debit Moyens (Mb/s)'
                            DEBIT_plot.x_labels = date
                            DEBIT_plot.add('Debit (Mb/s)', debit_set, secondary=True)
                            DEBIT_plot.add('Nombre De tests', nombre_p_jour)
                            DEBIT_plot.render_in_browser()
                            DEBIT_plot.render_to_file("DEBIT_MOY_HTTP.svg")
                            # _____________________--PYGAL--_________________________

                        def taux_etat_par_date2(fichier,val1,val2,val3,val4,val5,tech,event):
                            #print(val3)
                            one_ex = []
                            two_ex = []
                            fichier = fichier
                            three_ex = []
                            four_ex = []
                            five_ex = []
                            six_ex = []
                            seven_ex = []
                            eight_ex = []
                            other_one_ex = []
                            other_two_ex = []
                            date_ex = []
                            one_cumul_exe = 0.0
                            two_cumul_exe = 0.0
                            three_cumul_exe = 0.0
                            four_cumul_exe = 0.0
                            five_cumul_exe = 0.0
                            six_cumul_exe = 0.0
                            seven_cumul_exe = 0.0
                            eight_cumul_exe = 0.0
                            other_one_cumul_exe = 0.0  # Succes comul
                            other_two_cumul_exe = 0.0  # Not Connected cumul
                            taux_one = 0.0
                            taux_two = 0.0
                            taux_three = 0.0
                            taux_five = 0.0
                            taux_six = 0.0
                            taux_seven = 0.0
                            taux_eight = 0.0
                            taux_succes = 0.0
                            taux_notconnected = 0.0
                            valeur_totale = 0.0
                            drop_total = 0.0
                            caf_cumul_exe = 0.0
                            connected_cumul_exe=0.0
                            connected_set_exe=[]
                            caf_sef_exe = []
                            drop_exe = []
                            legende = []

                            # Incoming
                            one_ex_incoming = []
                            two_ex_incoming = []
                            three_ex_incoming = []
                            four_ex_incoming = []
                            five_ex_incoming = []
                            six_ex_incoming = []
                            seven_ex_incoming = []
                            eight_ex_incoming = []
                            other_one_ex_incoming = []
                            other_two_ex_incoming = []
                            date_ex_incoming = []
                            one_cumul_exe_incoming = 0.0
                            two_cumul_exe_incoming = 0.0
                            three_cumul_exe_incoming = 0.0
                            four_cumul_exe_incoming = 0.0
                            five_cumul_exe_incoming = 0.0
                            six_cumul_exe_incoming = 0.0
                            seven_cumul_exe_incoming = 0.0
                            eight_cumul_exe_incoming = 0.0
                            other_one_cumul_exe_incoming = 0.0  # Succes comul
                            other_two_cumul_exe_incoming = 0.0  # Not Connected cumul
                            taux_one_incoming = 0.0
                            taux_two_incoming = 0.0
                            taux_three_incoming = 0.0
                            taux_four_incoming = 0.0
                            taux_five_incoming = 0.0
                            taux_six_incoming = 0.0
                            taux_seven_incoming = 0.0
                            taux_eight_incoming = 0.0
                            taux_succes_incoming = 0.0
                            taux_notconnected_incoming = 0.0
                            taux_connected_incoming=0.0
                            valeur_totale_incoming = 0.0
                            drop_total_incoming = 0.0
                            caf_taux = 0.0
                            drop_exe_incoming = []
                            legende = []

                            #one_ex, two_ex, three_ex, four_ex, five_ex, six_ex, seven_ex, eight_ex, other_one_ex, other_two_ex, date_ex, one_cumul_exe, two_cumul_exe, three_cumul_exe, four_cumul_exe, five_cumul_exe, six_cumul_exe, seven_cumul_exe, eight_cumul_exe, other_one_cumul_exe, other_two_cumul_exe, drop_exe, drop_total, caf_cumul_exe, caf_sef_exe = etat_par_date(fichier,val1,val2,val3)
                            #valeur_totale = caf_cumul_exe + one_cumul_exe + two_cumul_exe + three_cumul_exe + four_cumul_exe + five_cumul_exe + six_cumul_exe + seven_cumul_exe + eight_cumul_exe + other_one_cumul_exe + other_two_cumul_exe

                            one_ex, two_ex, three_ex, four_ex, five_ex, six_ex, seven_ex, eight_ex, other_one_ex, other_two_ex, date_ex, one_cumul_exe, two_cumul_exe, three_cumul_exe, four_cumul_exe, five_cumul_exe, six_cumul_exe, seven_cumul_exe, eight_cumul_exe, other_one_cumul_exe, other_two_cumul_exe, drop_exe, drop_total, caf_cumul_exe, caf_set_exe, connected_set_exe, connected_cumul_exe = etat_par_date(fichier,val1,val2,val3,val4,val5,tech)
                            valeur_totale = connected_cumul_exe + one_cumul_exe + two_cumul_exe + three_cumul_exe + four_cumul_exe + five_cumul_exe + six_cumul_exe + seven_cumul_exe + eight_cumul_exe + other_one_cumul_exe + other_two_cumul_exe+caf_cumul_exe
                            date_ex.reverse()


                            #print(valeur_totale_incoming)
                            # Incoming taux
                            taux_one = (one_cumul_exe * 100.0) / valeur_totale  # ERROR
                            taux_two = (two_cumul_exe * 100.0) / valeur_totale
                            taux_three = (three_cumul_exe * 100.0) / valeur_totale
                            taux_four = (four_cumul_exe * 100.0) / valeur_totale
                            taux_five = (five_cumul_exe * 100.0) / valeur_totale
                            taux_six = (six_cumul_exe * 100.0) / valeur_totale
                            taux_seven = (seven_cumul_exe * 100.0) / valeur_totale
                            taux_eight = (eight_cumul_exe * 100.0) / valeur_totale
                            taux_succes = (other_one_cumul_exe * 100.0) / valeur_totale
                            taux_notconnected = (other_two_cumul_exe * 100.0) / valeur_totale
                            taux_connected = (connected_cumul_exe * 100.0) / valeur_totale
                            taux_caf = (caf_cumul_exe * 100.0) / valeur_totale


                            # _______________________--Pygal--________________________________________________________

                            pie_chart2 = pygal.Pie(height=400)
                            pie_chart2.title = 'Voix Incoming'
                            pie_chart2.add('Cov Lost: '+str(round(taux_one,1))+"%", taux_one)
                            pie_chart2.add('Mult-RAB t: '+str(round(taux_two,1))+"%", taux_two)
                            pie_chart2.add('Low Cov: '+str(round(taux_three,1))+"%", taux_three)
                            pie_chart2.add('Us_Beha: '+str(round(taux_four,1))+"%", taux_four)
                            pie_chart2.add('CAF OS: '+str(round(taux_five,1))+"%", taux_five)
                            pie_chart2.add('4G wout 2G3G f: '+str(round(taux_six,1))+"%", taux_six)
                            pie_chart2.add('Quafy as CAF: '+str(round(taux_seven,1))+"%", taux_seven)
                            pie_chart2.add('F2G unkno bear: '+str(round(taux_eight,1))+"%", taux_eight)
                            pie_chart2.add('Succes: '+str(round(taux_succes,1))+"%", taux_succes)
                            pie_chart2.add('Not Connected: '+str(round(taux_notconnected,1))+"%", taux_notconnected)
                            pie_chart2.add('CAF: '+str(round(taux_caf,1))+"%", taux_caf)
                            pie_chart2.add('Connected: '+str(round(taux_connected,1))+"%", taux_connected)
                            pie_chart2.render_in_browser()
                            pie_chart2.render_to_file("Cause_Code.svg")

                            # __________________________________--Pygal--_____________________________________________________________

                        #val4 = taille_csv(reader)
                        #taille_web=taille_csv(reader_web)
                        #taille_video = taille_csv(reader_video)
                        #taille_usage=taille_csv2(reader_usage)

                        #CLASSE QUI GERE L INTERFACE DASHBOARD DATA ET BOUTONS PYGAL

                        class ScrollableWindow(QtGui.QMainWindow):


                            # , , , nb_set, , ,
                            def success_ratio3(self,date, success_set, success_taux,event):

                                # __________________________-------------------------PYGAL------------------------------------__________________________________________________________________________
                                success_plot = pygal.Line(height=400,include_x_axis=True,label_font_size=4,title_font_size=26,x_title='Jours',y_title='Succes',legend_at_bottom=True,x_label_rotation=90)
                                success_plot.title = 'SUCCESS_RATIO'
                                success_plot.x_labels = date
                                success_plot.add('Nombre_Success', success_set)
                                success_plot.add('Taux_Succes', success_taux, secondary=True)
                                success_plot.render_in_browser()
                                success_plot.render_to_file("Success_RATIO_data_http.svg")
                                # __________________________-------------------------PYGAL------------------------------------__________________________________________________________________________
                            def failure_ratio3(self,date,failure_set, failure_taux, event):
                                # __________________________-------------------------PYGAL------------------------------------__________________________________________________________________________
                                Failure_plot = pygal.Line(height=400,include_x_axis=True,label_font_size=4,title_font_size=26,x_title='Jours',y_title='Echec',legend_at_bottom=True,x_label_rotation=90)
                                Failure_plot.title = 'FAILURE_RATIO'
                                Failure_plot.x_labels = date
                                Failure_plot.add('Nombre_Echec', failure_set)
                                Failure_plot.add('Taux_Echec', failure_taux, secondary=True)
                                Failure_plot.render_in_browser()
                                Failure_plot.render_to_file("Failure_RATIO_http.svg")
                                # __________________________-------------------------PYGAL------------------------------------__________________________________________________________________________
                            def drop_ratio3(self,date,drop_set, drop_taux, event):

                                # _____________________--PYGAL--_________________________
                                Drop_plot = pygal.Line(height=400,include_x_axis=True,label_font_size=4,title_font_size=26,x_title='Jours',y_title='Coupure',legend_at_bottom=True,x_label_rotation=90)
                                Drop_plot.title = 'DROP_RATIO'
                                Drop_plot.x_labels = date
                                Drop_plot.add('Nombre_Drop', drop_set)
                                Drop_plot.add('Taux_Drop', drop_taux, secondary=True)
                                Drop_plot.render_in_browser()
                                Drop_plot.render_to_file("Drop_RATIO_http.svg")
                                # _____________________--PYGAL--_________________________
                            def latences3(self,date,latency, event):

                                # _________________________________________--PYGAL--______________________________________________
                                y = latency
                                nb_users_bar = pygal.Bar(height=400,include_x_axis=True,label_font_size=4,title_font_size=26,x_title='Jours',y_title='Latence',legend_at_bottom=True,x_label_rotation=90)
                                nb_users_bar.title = 'Latence Moyenne (ms)'
                                nb_users_bar.x_labels = date
                                nb_users_bar.add('Latence Moy(ms)', y)
                                nb_users_bar.render_in_browser()
                                nb_users_bar.render_to_file("LATENCE_Moy_HTT.svg")
                                # _________________________________________--PYGAL--______________________________________________
                            def debit_download_3(self,date,debit_set_download, nombre_p_jour_download, event):

                                # __________________________-------------------------PYGAL------------------------------------__________________________________________________________________________
                                success_plot = pygal.Line(height=400,include_x_axis=True,label_font_size=4,title_font_size=26,x_title='Jours',y_title=' Debit DL',legend_at_bottom=True,x_label_rotation=90)
                                success_plot.title = 'DEBIT MOY DOWNLOAD (Mb/s)'
                                success_plot.x_labels = date
                                success_plot.add('Nb_TEST_DL', nombre_p_jour_download)
                                success_plot.add('Moy DL (Mb/s)', debit_set_download, secondary=True)
                                success_plot.render_in_browser()
                                success_plot.render_to_file("DEBIT_Download_HTTP.svg")
                                # __________________________-------------------------PYGAL------------------------------------__________________________________________________________________________
                            def debit_upload_3(self,date,debit_set_upload, nombre_p_jour_upload, event):

                                # __________________________-------------------------PYGAL------------------------------------__________________________________________________________________________
                                success_plot = pygal.Line(height=400,include_x_axis=True,label_font_size=4,title_font_size=26,x_title='Jours',y_title='Debit UL',legend_at_bottom=True,x_label_rotation=90)
                                success_plot.title = 'DEBIT MOY UPLOAD (Mb/s)'
                                success_plot.x_labels = date
                                success_plot.add('Nb UL', nombre_p_jour_upload)
                                success_plot.add('Moy UL(Mb/s)', debit_set_upload, secondary=True)
                                success_plot.render_in_browser()
                                success_plot.render_to_file("DEBIT_MOY_UP_HTTP.svg")
                                # __________________________-------------------------PYGAL------------------------------------__________________________________________________________________________


                            def page_loading_time_3(self,date_web, sfr_web, nb_sfr_web, event):
                                # __________________________-------------------------PYGAL------------------------------------__________________________________________________________________________
                                success_plot = pygal.Line(height=400,include_x_axis=True,label_font_size=4,title_font_size=26,x_title='Jours',y_title='PLT',legend_at_bottom=True,x_label_rotation=90)
                                success_plot.title = 'PAGE LOADING TIME WEB"sfr.fr" (s)'
                                success_plot.x_labels = date_web
                                success_plot.add('Nb Resultats', nb_sfr_web)
                                success_plot.add('Moyenne (s)', sfr_web, secondary=True)
                                success_plot.render_in_browser()
                                success_plot.render_to_file("Page_Loading_Time_web.svg")
                                # __________________________-------------------------PYGAL------------------------------------__________________________________________________________________________
                            def success_web_3(self,date_web, taux_succes_web_set, nb_succes_web_set, event):

                                # __________________________-------------------------PYGAL------------------------------------__________________________________________________________________________
                                #success_plot = pygal.Line(height=400, secondary_range=(min(success_taux + success_set), max(success_taux + success_set)), x_label_rotation=90)
                                success_plot = pygal.Line(height = 400, include_x_axis = True, label_font_size = 4, title_font_size = 26, x_title = 'Jours', y_title = 'Succes', legend_at_bottom = True, x_label_rotation = 90)
                                success_plot.title = 'Succes Ration WEB'
                                success_plot.x_labels = date_web
                                success_plot.add('Nb Resultats', nb_succes_web_set)
                                success_plot.add('TAUX Sicc %', taux_succes_web_set, secondary=True)
                                success_plot.render_in_browser()
                                success_plot.render_to_file("Success_Ratio_WEB.svg")
                                # __________________________-------------------------PYGAL------------------------------------__________________________________________________________________________
                            def timeout_web_3(self,date_web, taux_timeout_web_set, nb_timeout_web_set, event):

                                # __________________________-------------------------PYGAL------------------------------------__________________________________________________________________________
                                success_plot = pygal.Line(height = 400, include_x_axis = True, label_font_size = 4, title_font_size = 26, x_title = 'Jours', y_title = 'Timout', legend_at_bottom = True, x_label_rotation = 90)
                                success_plot.title = 'Timeout Ratio WEB'
                                success_plot.x_labels = date_web
                                success_plot.add('Nb Resultats', nb_timeout_web_set)
                                success_plot.add('Taux (%)', taux_timeout_web_set, secondary=True)
                                success_plot.render_in_browser()
                                success_plot.render_to_file("Timeout_Ratio_Web.svg")
                                # __________________________-------------------------PYGAL------------------------------------__________________________________________________________________________
                            def failure_web_3(self,date_web, taux_failure_web_set, nb_failure_web_set, event):

                                # __________________________-------------------------PYGAL------------------------------------__________________________________________________________________________
                                success_plot = pygal.Line(height = 400, include_x_axis = True, label_font_size = 4, title_font_size = 26, x_title = 'Jours', y_title = 'Echec', legend_at_bottom = True, x_label_rotation = 90)
                                success_plot.title = 'FAILURE RATIO WEB'
                                success_plot.x_labels = date_web
                                success_plot.add('Nb Echec', nb_failure_web_set)
                                success_plot.add('Taux Echec (%)', taux_failure_web_set, secondary=True)
                                success_plot.render_in_browser()
                                success_plot.render_to_file("FAILURE_RATIO_WEB.svg")
                                # __________________________-------------------------PYGAL------------------------------------__________________________________________________________________________



                            def buffering_time_video_3(self,date_video, nb_test_video_set, time_video_buffering_set, event):

                                # _____________________--PYGAL--_________________________
                                Drop_plot = pygal.Line(height = 400, include_x_axis = True, label_font_size = 4, title_font_size = 26, x_title = 'Jours', y_title = 'BTV', legend_at_bottom = True, x_label_rotation = 90)
                                Drop_plot.title = 'BUFFERING TIME VIDEO(s)'
                                Drop_plot.x_labels = date_video
                                Drop_plot.add('Nb_Resultats', nb_test_video_set)
                                Drop_plot.add('Buff Time(s)', time_video_buffering_set, secondary=True)
                                Drop_plot.render_in_browser()
                                Drop_plot.render_to_file("buffering_time_video.svg")
                                # _____________________--PYGAL--_________________________
                            def drop_video_3(self,date_video, drop_set_video, nb_drop_set_video, event):

                                # __________________________-------------------------PYGAL------------------------------------__________________________________________________________________________
                                #success_plot = pygal.Line(height=400, secondary_range=(min(success_taux + success_set), max(success_taux + success_set)), x_label_rotation=90)
                                success_plot = pygal.Line(height = 400, include_x_axis = True, label_font_size = 4, title_font_size = 26, x_title = 'Jours', y_title = 'Coupure', legend_at_bottom = True, x_label_rotation = 90)
                                success_plot.title = 'DROP Ration VIDEO'
                                success_plot.x_labels = date
                                success_plot.add('Nb Resultats', nb_drop_set_video)
                                success_plot.add('TAUX drop %', drop_set_video, secondary=True)
                                success_plot.render_in_browser()
                                success_plot.render_to_file("Drop_Ratio_VIDEO.svg")
                                # __________________________-------------------------PYGAL------------------------------------__________________________________________________________________________
                            def timeout_video_3(self,date_video, timeout_set_video, nb_timeout_set_video, event):

                                # __________________________-------------------------PYGAL------------------------------------__________________________________________________________________________
                                success_plot = pygal.Line(height = 400, include_x_axis = True, label_font_size = 4, title_font_size = 26, x_title = 'Jours', y_title = 'Succes', legend_at_bottom = True, x_label_rotation = 90)
                                success_plot.title = 'Timeout Ratio VIDEO'
                                success_plot.x_labels = date_video
                                success_plot.add('Nb Resultats', nb_timeout_set_video)
                                success_plot.add('Taux (%)', timeout_set_video, secondary=True)
                                success_plot.render_in_browser()
                                success_plot.render_to_file("Timeout_Ratio_Video.svg")
                                # __________________________-------------------------PYGAL------------------------------------__________________________________________________________________________
                            #LES BOUTONS DE LINTERFACE DASHBOARD DATA
                            def __init__(self, fig):
                                #self.setWindowTitle('DASHBOARD DATA SFR PERF')
                                plt.suptitle('DASHBOARD KPI DATA', fontsize=18, bbox={'facecolor': 'white', 'pad': 5})
                                plt.figure(1).patch.set_facecolor('white')

                                self.qapp = QtGui.QApplication([])
                                self.qapp.setStyleSheet('background-color: red;')
                                QtGui.QMainWindow.__init__(self)
                                self.widget = QtGui.QWidget()
                                self.setCentralWidget(self.widget)
                                self.widget.setLayout(QtGui.QVBoxLayout())
                                self.widget.layout().setContentsMargins(0, 0, 0, 0)
                                self.widget.layout().setSpacing(0)

                                #self.setStyleSheet("background:white")
                                self.fig = fig
                                self.canvas = FigureCanvas(self.fig)
                                FigureCanvas(self.fig).setStyleSheet('background-color: red;')

                                self.canvas.draw()
                                self.scroll = QtGui.QScrollArea(self.widget)
                                self.scroll.setWidget(self.canvas)

                                self.nav = NavigationToolbar(self.canvas, self.widget)
                                self.widget.layout().addWidget(self.nav)
                                self.widget.layout().addWidget(self.scroll)

                                # ------------------------*-LES BOUTTONS PYGAL-*----------------------------------
                                i=230
                                # Bouton Success_Ratio_HTTP
                                self.button1 = QtGui.QPushButton('Succ HTTP', self)
                                self.button1.clicked.connect(lambda:self.success_ratio3(date_http, success_set, success_taux,event))
                                self.button1.setGeometry(i, 0, 90, 30)
                                i = i + 90
                                self.button1.setStyleSheet('font-size: 8pt; font-family: Courier;')
                                layout = QtGui.QVBoxLayout(self)
                                layout.addWidget(self.button1)


                                # Bouton Failure_Ratio_HTTP
                                self.button1 = QtGui.QPushButton('Fail HTTP', self)
                                self.button1.clicked.connect(lambda: self.failure_ratio3(date_http, failure_set, failure_taux, event))
                                self.button1.setGeometry(i, 0, 90, 30)
                                i = i + 90
                                self.button1.setStyleSheet('font-size: 8pt; font-family: Courier;')
                                layout = QtGui.QVBoxLayout(self)
                                layout.addWidget(self.button1)

                                # Bouton Drop_Ratio_HTTP
                                self.button1 = QtGui.QPushButton('Drop HTTP', self)
                                self.button1.clicked.connect(lambda: self.drop_ratio3(date_http, drop_set, drop_taux, event))
                                self.button1.setGeometry(i, 0, 90, 30)
                                i = i + 90
                                self.button1.setStyleSheet('font-size: 8pt; font-family: Courier;')
                                layout = QtGui.QVBoxLayout(self)
                                layout.addWidget(self.button1)

                                # Bouton Latence_HTTP
                                self.button1 = QtGui.QPushButton('Lat HTTP', self)
                                self.button1.clicked.connect(lambda: self.latences3(date_http, latency, event))
                                self.button1.setGeometry(i, 0, 90, 30)
                                i = i + 90
                                self.button1.setStyleSheet('font-size: 8pt; font-family: Courier;')
                                layout = QtGui.QVBoxLayout(self)
                                layout.addWidget(self.button1)

                                # Bouton DEBIT_DL
                                self.button1 = QtGui.QPushButton('Debit DL', self)
                                self.button1.clicked.connect(lambda: self.debit_download_3(date_http, debit_set_download,nombre_p_jour_download, event))
                                self.button1.setGeometry(i, 0, 90, 30)
                                i = i + 90
                                #self.button1.setGeometry(1600, 400, 90, 30)
                                self.button1.setStyleSheet('font-size: 8pt; font-family: Courier;')
                                layout = QtGui.QVBoxLayout(self)
                                layout.addWidget(self.button1)

                                # Bouton DEBIT_UL
                                self.button1 = QtGui.QPushButton('Debit UL', self)
                                self.button1.clicked.connect(lambda: self.debit_upload_3(date_http, debit_set_upload, nombre_p_jour_upload, event))
                                self.button1.setGeometry(i, 0, 90, 30)
                                i = i + 90
                                self.button1.setStyleSheet('font-size: 8pt; font-family: Courier;')
                                layout = QtGui.QVBoxLayout(self)
                                layout.addWidget(self.button1)


                                # Bouton Page_Loading_Time
                                self.button1 = QtGui.QPushButton('PLoad Time', self)
                                self.button1.clicked.connect(lambda: self.page_loading_time_3(date_web, sfr, nb_sfr, event))
                                self.button1.setGeometry(i, 0, 90, 30)
                                i = i + 90
                                self.button1.setStyleSheet('font-size: 8pt; font-family: Courier;')
                                layout = QtGui.QVBoxLayout(self)
                                layout.addWidget(self.button1)

                                # Bouton sUCCESS_Ratio_WEB
                                self.button1 = QtGui.QPushButton('Succ WEB', self)
                                self.button1.clicked.connect(lambda: self.success_web_3(date_web, taux_succes_web_set, nb_succes_web_set,event))
                                self.button1.setGeometry(i, 0, 90, 30)
                                i = i + 90
                                self.button1.setStyleSheet('font-size: 8pt; font-family: Courier;')
                                layout = QtGui.QVBoxLayout(self)
                                layout.addWidget(self.button1)

                                # Bouton fAILURE_Ratio_WEB
                                self.button1 = QtGui.QPushButton('Fail WEB', self)
                                self.button1.clicked.connect(lambda: self.failure_web_3(date_web, taux_failure_web_set, nb_failure_web_set,event))
                                self.button1.setGeometry(i, 0, 90, 30)
                                i = i + 90
                                self.button1.setStyleSheet('font-size: 8pt; font-family: Courier;')
                                layout = QtGui.QVBoxLayout(self)
                                layout.addWidget(self.button1)

                                # Bouton tIMEOUT_Ratio_WEB
                                self.button1 = QtGui.QPushButton('T_Out WEB', self)
                                self.button1.clicked.connect(lambda: self.timeout_web_3(date_web, taux_timeout_web_set, nb_timeout_web_set,event))
                                self.button1.setGeometry(i, 0, 90, 30)
                                i = i + 90
                                self.button1.setStyleSheet('font-size: 8pt; font-family: Courier;')
                                layout = QtGui.QVBoxLayout(self)
                                layout.addWidget(self.button1)

                                # Bouton VIDEO_BUFFERING_TIME
                                self.button1 = QtGui.QPushButton('Buff Video', self)
                                self.button1.clicked.connect(lambda: self.buffering_time_video_3(date_video, nb_test_video_set, time_video_buffering_set, event))
                                self.button1.setGeometry(i, 0, 90, 30)
                                i = i + 90
                                self.button1.setStyleSheet('font-size: 8pt; font-family: Courier;')
                                layout = QtGui.QVBoxLayout(self)
                                layout.addWidget(self.button1)


                                # Bouton Drop_Ratio_VIDEO
                                self.button1 = QtGui.QPushButton('Drop Video', self)
                                self.button1.clicked.connect(lambda: self.drop_video_3(date_video, drop_video_set,nb_drop_video_set, event))
                                self.button1.setGeometry(i, 0, 90, 30)
                                i = i + 90
                                self.button1.setStyleSheet('font-size: 8pt; font-family: Courier;')
                                layout = QtGui.QVBoxLayout(self)
                                layout.addWidget(self.button1)

                                # Bouton tIMEOUT_Ratio_VIDEO
                                self.button1 = QtGui.QPushButton('T_Out Video', self)
                                self.button1.clicked.connect(lambda: self.timeout_video_3(date_video, timeout_set, nb_timeout_set, event))
                                self.button1.setGeometry(i, 0, 90, 30)
                                i = i + 90
                                self.button1.setStyleSheet('font-size: 8pt; font-family: Courier;')
                                layout = QtGui.QVBoxLayout(self)
                                layout.addWidget(self.button1)

                                #RETOUR A LA CONFIG DE LA FENETRE
                                self.setGeometry(10, 29, 1900, 1000)
                                # figManager = plt.get_current_fig_manager()
                                # figManager.window.showMaximized()

                                #self.widget.setStyleSheet('background-color: white;')
                                plt.figure(1).patch.set_facecolor('white')
                                self.show()
                                plt.close()
                                # exit(self.qapp.exec_())
                                self.qapp.exec_()

                                # Bouton Success_Ratio

                        """
                        class excuteur_pro():
                            global legraphe_pyg
                            if event:
                                taux_incoming2 = taux_incoming2(reader, val1, val2, val3, val4, val5, tech)
                            #legraphe_pyg = taux_outgoing2(reader, val1, val2, val3, val4, val5, tech)

                        # success_ratio(reader)
                        #print(val3)
                        """
                        taille_usage=0.0
                        val4=0.0
                        taille_web=0.0
                        taille_video=0.0


                        #Thread(target=csfb(reader,val1,val2,val3,val4,val5,tech)).start()
                        #Thread(target=failure_ratio2(reader,val1,val2,val3,val4,val5,tech)).start()
                        #Thread(target=drop_ratio2(reader,val1,val2,val3,val4,val5,tech)).start()
                        #Thread(target=drop_ratio2(reader,val1,val2,val3,val4,val5,tech)).start()
                        #Thread(target=success_ratio2(reader,val1,val2,val3,val4,val5,tech)).start()
                        #Thread(target=mobile_gt(reader, val1, val2, val3,val5,tech)).start()
                        #pie_chart=Thread(target=taux_incoming(reader,val1,val2,val3,val4,val5,tech)).start()
                        #pie_chart2=Thread(target=taux_outgoing(reader,val1,val2,val3,val4,val5,tech)).start()
                        #bar2=Thread(target=ticket_profil(reader,val1,val2,val3,val4,val5,tech)).start()

                        # csfb(reader,val1,val2,val3,val4,val5)
                        # failure_ratio2(reader,val1,val2,val3,val4,val5)
                        # drop_ratio2(reader,val1,val2,val3,val4,val5)
                        # success_ratio2(reader,val1,val2,val3,val4,val5)
                        # mobile_gt(reader, val1, val2, val3,val5)
                        # taux_incoming(reader,val1,val2,val3,val4,val5)
                        # taux_outgoing(reader,val1,val2,val3,val4,val5)
                        # ticket_profil(reader,val1,val2,val3,val4,val5)

                        # f = Figure(figsize=(5, 4), dpi=100)
                        # root_2 = tix.Tk()
                        # root_2.wm_title("Dashboard")
                        params = {'legend.fontsize': 10, 'legend.linewidth': 0, }
                        # canvas = FigureCanvasTkAgg(f, master=choix)
                        # canvas.show()
                        # canvas.get_tk_widget().pack(side=Tk.TOP, fill=Tk.BOTH, expand=1)
                        # toolbar = NavigationToolbar2TkAgg(canvas, root)
                        # toolbar.update()
                        # canvas._tkcanvas.pack(side=Tk.TOP, fill=Tk.BOTH, expand=1)

                        # plt.xticks(rotation='vertical', fontsize=8)
                        # plt.rcParams.update(params)

                        #pie_chart = taux_incoming(reader, val1, val2, val3, val4, val5, tech)
                        #pie_chart2 = taux_outgoing(reader, val1, val2, val3, val4, val5, tech)
                        #nb_users_bar = ticket_profil(reader, val1, val2, val3, val4, val5, tech)
                        #failure_graph=failure_ratio2(reader,val1,val2,val3,val4,val5,tech)
                        #success_graph=success_ratio2(reader, val1, val2, val3, val4, val5, tech)
                        #drop_graph=drop_ratio2(reader,val1,val2,val3,val4,val5,tech)
                        #csfb_graph=csfb(reader,val1,val2,val3,val4,val5,tech)
                        #taux_etat_par_date(reader, val1, val2, val3, val4, val5, tech)

                        #latence_moy(reader,val1,val2,val3,val4,val5,tech)
                        #debit_moy(reader, val1, val2, val3, val4, val5, tech)
                        #debit_moy_download(reader,val1,val2,val3,val4,val5,tech)
                        #debit_moy_upload(reader,val1,val2,val3,val4,val5,tech)








                        #sys.exit(app.exec_())
                        if __name__ == '__main__':
                            #print("JE SUIS LA")
                            #arguments_usage=reader_usage, val1, val2, val3, taille_usage, val5, tech
                            #arguments_http=reader, val1, val2, val3, val4, val5, tech
                            #t1 = Thread(target=wrapper,args=(usage_ul_dl,arguments_usage,q1))
                            #t2 = Thread(target=wrapper,args=(success_ratio2, arguments_http, q2))

                            #t1 = Thread(target=ProgressBar.startLoop)
                            t1 = Thread(target=success_ratio2, args=(reader, val1, val2, val3, val4, val5, tech))
                            t2 = Thread(target=page_loading_time, args=(reader_web, val1, val2, val3, taille_web, val5, tech))
                            t3 = Thread(target=buffering_time_video, args=(reader_video, val1, val2, val3, taille_video, val5, tech))
                            t4 = Thread(target=usage_ul_dl,args=(reader_usage, val1, val2, val3, taille_usage, val5, tech))
                            #t1.join
                            #t2.start()
                            #t5.start()
                            t1.start()
                            t2.start()
                            t3.start()
                            t4.start()

                            t1.join()
                            t2.join()
                            t3.join()
                            #t5.join()
                            t4.join()
                            #t2.join()
                            #t1.join()

                            #Thread(target=page_loading_time(reader_web, val1, val2, val3, taille_web, val5, tech)).start()
                            #Thread(target=buffering_time_video(reader_video, val1, val2, val3, taille_video, val5,tech)).start()
                            #t2=Thread(target=usage_ul_dl(reader_usage, val1, val2, val3, taille_usage, val5, tech)).join(3)
                            #t1 = Thread(target=success_ratio2(reader, val1, val2, val3, val4, val5, tech))
                            #t2.join()
                            #t1.join()
                            #t2.start() and t1.start()
                            #print('FINIS')
                            #t2.start()
                            #t1.start()
                            #p1=Process(target=success_ratio2(reader, val1, val2, val3, val4, val5, tech))
                            #p1.start()
                            #p2 = Process(target=page_loading_time(reader_web, val1, val2, val3, taille_web, val5, tech))
                            #p2.start()
                            #p3 = Process(target=buffering_time_video(reader_video, val1, val2, val3, taille_video, val5,tech))
                            #p3.start()
                            #p4 = Process(target=usage_ul_dl(reader_usage, val1, val2, val3, taille_usage, val5, tech))
                            #p4.start()
                            #p1.join()
                            #p2.join()
                            #p3.join()
                            #p4.join()
                            #commands=[success_ratio2(reader, val1, val2, val3, val4, val5, tech),usage_ul_dl(reader_usage, val1, val2, val3, taille_usage, val5, tech)]
                            #import parallelpy
                            #parallelpy.run(commands)

                            #date_http, success_set, success_taux, failure_set, failure_taux, drop_set, drop_taux, nb_set, latency, debit_set_download, nombre_p_jour_download, debit_set_upload, nombre_p_jour_upload=success_ratio2(reader, val1, val2, val3, val4, val5, tech)
                            #date_web, sfr_web, nb_sfr_web, taux_succes_web_set, nb_succes_web_set, taux_failure_web_set, nb_failure_web_set, taux_timeout_web_set, nb_timeout_web_set=page_loading_time(reader_web, val1, val2, val3, taille_web, val5, tech)
                            #date_video, nb_test_video_set, time_video_buffering_set, drop_set_video, nb_drop_set_video, timeout_set_video, nb_timeout_set_video=buffering_time_video(reader_video, val1, val2, val3, taille_video, val5,tech)
                            #date_usage, google_up, google_down, youtube_up, youtube_down, facebook_up, facebook_down, leboncoin_up, leboncoin_down, nb_google_up_set, nb_google_down_set, nb_youtube_up_set, nb_youtube_down_set, nb_facebook_up_set, nb_facebook_down_set, nb_leboncoin_up_set, nb_leboncoin_down_set=usage_ul_dl(reader_usage, val1, val2, val3, taille_usage, val5, tech)


                            #date_usage, google_up, google_down, youtube_up, youtube_down, facebook_up, facebook_down, leboncoin_up, leboncoin_down, nb_google_up_set, nb_google_down_set, nb_youtube_up_set, nb_youtube_down_set, nb_facebook_up_set, nb_facebook_down_set, nb_leboncoin_up_set, nb_leboncoin_down_set=q1.get()
                            #date_http, success_set, success_taux, failure_set, failure_taux, drop_set, drop_taux, nb_set, latency, debit_set_download, nombre_p_jour_download, debit_set_upload, nombre_p_jour_upload = q2.get()
                            a = ScrollableWindow(figure_data)

                        #print("RECUPERATION DES DONNEES  ** HTTP **")
                        #success_ratio2(reader, val1, val2, val3, val4, val5, tech)

                        #print("RECUPERATION DES DONNEES  ** WEB **")
                        #page_loading_time(reader_web, val1, val2, val3, taille_web, val5, tech)
                        #success_web(reader_web, val1, val2, val3, taille_web, val5, tech)
                        #failure_web(reader_web, val1, val2, val3, taille_web, val5, tech)
                        #timeout_web(reader_web, val1, val2, val3, taille_web, val5, tech)

                        #print("RECUPERATION DES DONNEES  ** VIDEO **")
                        #buffering_time_video(reader_video, val1, val2, val3, taille_video, val5, tech)

                        #drop_video(reader_video, val1, val2, val3, taille_video, val5, tech)
                        #timeout_video(reader_video, val1, val2, val3, taille_video, val5, tech)

                        #print("RECUPERATION DES DONNEES  ** USAGE ET APPLICATION **")
                        #usage_ul_dl(reader_usage, val1, val2, val3, taille_usage, val5, tech)

                        #Appels Fonction VIDEO
                        #reader_video



                        #p = gridplot([success_graph, failure_graph, drop_graph, csfb_graph, nb_users_bar, pie_chart, pie_chart2],ncols=3, plot_width=500, plot_height=500)

                        #show(p)

                        #plt.legend(loc='best')
                        #figManager = plt.get_current_fig_manager()
                        #figManager.window.showMaximized()
                        #from matplotlib.widgets import Button as buttonn

                        """
                        #bouttons matplotlib
                        #Bouton incoming
                        #b2ax = plt.axes([0.25, 0.4, 0.01, 0.01])
                        #bouttonni = buttonn(b2ax, '', color='grey')
                        #bouttonni.on_clicked(lambda event: taux_incoming2(reader, val1, val2, val3, val4, val5, tech,event))

                        #Bouton Debit UPLOAD
                        b2ax_upload= plt.axes([0.93, 0.48, 0.01, 0.01])
                        bouttonni2 = buttonn(b2ax_upload, '', color='grey')
                        bouttonni2.on_clicked(lambda event: debit_upload_3(reader, val1, val2, val3, val4, val5, tech, event))
                        # Bouton Debit Download

                        b2ax_download = plt.axes([0.49, 0.48, 0.01, 0.01])
                        bouttonni4 = buttonn(b2ax_download, '', color='grey')
                        bouttonni4.on_clicked(lambda event: debit_download_3(reader, val1, val2, val3, val4, val5, tech, event))
                        #Bouton Latences
                        b2ax_latences = plt.axes([0.93, 0.65, 0.01, 0.01])
                        bouttonni3 = buttonn(b2ax_latences, '', color='grey')
                        bouttonni3.on_clicked(lambda event: latences3(reader, val1, val2, val3, val4, val5, tech,event))


                        # Bouton Parc_Mobile
                        #b2ax_mobile = plt.axes([0.75, 0.4, 0.01, 0.01])
                        #bouttonni5 = buttonn(b2ax_mobile, '', color='grey')
                        #bouttonni5.on_clicked(lambda event: mobile_gt3(reader, val1, val2, val3, val5, tech, event))

                        # Bouton Success_Ratio
                        b2ax_SSRatio = plt.axes([0.49, 0.83, 0.01, 0.01])
                        bouttonni6 = buttonn(b2ax_SSRatio, '', color='grey')
                        bouttonni6.on_clicked(lambda event: success_ratio3(reader, val1, val2, val3, val4, val5, tech,event))
                        # Bouton Failure_Ratio
                        b2ax_FRRatio = plt.axes([0.93, 0.83, 0.01, 0.01])
                        bouttonni7 = buttonn(b2ax_FRRatio, '', color='grey')
                        bouttonni7.on_clicked(lambda event: failure_ratio3(reader, val1, val2, val3, val4, val5, tech, event))
                        # Bouton Drop_Ratio
                        b2ax_DPRatio = plt.axes([0.49, 0.65, 0.01, 0.01])
                        bouttonni8 = buttonn(b2ax_DPRatio, '', color='grey')
                        bouttonni8.on_clicked(lambda event: drop_ratio3(reader, val1, val2, val3, val4, val5, tech, event))

                        # Bouton Debit_Moy
                        #b2ax_DebitMoy =  plt.axes([0.9, 0.1, 0.01, 0.01])
                        #bouttonni9 = buttonn(b2ax_DebitMoy, '', color='grey')
                        #bouttonni9.on_clicked(lambda event: debit_moy_3(reader, val1, val2, val3, val4, val5, tech, event))

                        #Bouton CAUSE CODE
                        #b2ax_cc = plt.axes([0.58, 0.4, 0.01, 0.01])
                        #bouttonni10 = buttonn(b2ax_cc, '', color='grey')
                        #bouttonni10.on_clicked(lambda event: taux_etat_par_date2(reader, val1, val2, val3, val4, val5, tech, event))

                        #plt.tight_layout()
                        #plt.show()

                        #plt.show()
                        #mpld3.show()
                        #Thread(target=plt.show()).start()
                        #Thread(target=mpld3.show()).start()
                        """
                avec_dpt_filtre(val1, val2, val3, tech, val5, departement, file)


        #__________________________________---Choix date---________________________________________-------___________________________________
        global value1 # DATE DEPART
        value1 = combo.get()
        #print("value 1:  "+value1)

        global value2 #DATE ARRIVEE
        value2 = combo2.get()

        global val5  # OS
        val5 = combo3.get()

        global departement
        departement=combo4.get()
        #print(departement)
        #print("value 3:  " + value3)
        if val5=='ALL':
            val5=['iOS','Android','Unknown','']
        if val5=='Android':
            val5=['Android']
        if val5=='iOS':
            val5=['iOS']
        if val5=='AUTRES':
            val5=['']
        if val5=='Unknown':
            val5=['Unknown']

        if value1 and value2 and val5 and departement:

            global csvfile
            #csvfile = ouvrir_fich()
            #csvfile=lefichier.fichier
            # -------------------------------------------------------------------------------DEBUT--------------------------------------------------------------------------------
            #__________________________________--------------************--------------EX FONCTION SELECT-------------------*****************-----------___________________________
            # -------------------------------------------------------------------------------DEBUT--------------------------------------------------------------------------------

            import tkinter as tk
            #try:
                #import Tix as tix  # Python27
            #except ImportError:
                #import tkinter.tix as tix  # Python31+

            # choix1.geometry("+50+150")
            #choix.geometry("500x600+20+50")
            s = ttk.Style()
            global frame2

            #choix.mainloop()
            #Label(ttk.Frame, text="SCENARIO                    TECHNO").pack(side='top')
            #SCENARIO
            s.configure('My.TFrame', background='white', label='SFR',Scrollbar=True)
            frame = ttk.Frame(choix, padding=(70, 70, 160, 160), style='My.TFrame')
            frame.grid(column=4, row=15, sticky=(N, S, E, W))


            #Label(choix, text="    SCENARIOS", font=("Helvetica", 15, "bold"), fg='white', bg='black').pack()
            #Label(choix, text="            TECHNO", font=("Helvetica", 15, "bold"), fg='white', bg='black').pack()
            #labelframe.pack(fill="both", expand="yes")

            #TECNO
            frame2 = ttk.Frame(choix, padding=(70, 70, 160, 160), style='My.TFrame')
            frame2.grid(column=5, row=15, sticky=(N, S, E, W))

            #BOUTON RECHERCHE
            frame4 = ttk.Frame(choix, padding=(183, 0, 0, 0), style='My.TFrame')
            frame4.grid(column=4, row=14, sticky=(N, S, E, W))

            #RECHERCHE
            frame3 = ttk.Frame(choix, padding=(70, 10, 0, 0), style='My.TFrame')
            frame3.grid(column=4, row=13, sticky=(N, S, E, W))

            # frame.config(bg='black')

            #s1 = Scrollbar(frame)
            # l1 = Tk.Listbox(f1)

            # choix = Tk()
            # print(str(csvfile))

            # csvfile = ouvrir_fich()
            #csv_opner_result = re.compile(r".*u'(D:.*)'\, .*", re.IGNORECASE)
            #f = csv_opner_result.search(str(csvfile))

            #reader = f.group(1)
            # print(reader)

            #csvfile = open(reader, 'r')
            # print(csvfile)
            #reader = csv.reader(csvfile, delimiter=';')

            #date_test = re.compile(r".*([0-9][0-9][0-9][0-9]\-[0-9][0-9]\-[0-9][0-9]) .*", re.IGNORECASE)
            #scenario_test = re.compile(r".*('Scenario Label \[campaign\_label\]').*", re.IGNORECASE)

            b = ''
            z = False
            l = 0
            g = 0
            k = 0
            d = ''
            tec=''

            techno_ = []
            date = []
            k = []
            # RECUPERATION DATE ET SCENARIO

            techno_.append('ALL')
            techno_.append('2G')
            techno_.append('3G')
            techno_.append('4G')
            techno_.append('WIFI')
            techno_.append('INCONNU')
            #print(scenario)
            scenario=list(scenario)
            #print(scenario)
            #print(len(scenario))
                    # b = str(f.group(1)) #RECUPERATION DE LA DATE
            # scrollbar = Scrollbar(choix)


            #date.reverse()



            makeitastring = ' '.join(map(str, scenario))
            # print(scenario)
            #print(scenario)
            #print(len(scenario))

            makeitastring = (makeitastring)
            # print(makeitastring)
            # scrollbar2 = Scrollbar(frame, orient=VERTICAL)
            # scrollbar2.grid(column=2, row=2, sticky='EW')

    # _____-************************-__________________________________________________________________________________________________________________________________
            #SELECTION DES SCENARIOS

            #LES SCENARIOS
            global valores
            valores = StringVar()
            valores1 = tuple(scenario)
            valores.set(valores1)
            #print(valores)
            #print(valores1)

            #LA TECNO
            global valores2
            valores2 = StringVar()
            valores3 = tuple(techno_)
            valores2.set(valores3)

            #SCENARIO
            lstbox = Listbox(frame, listvariable=valores, selectmode=MULTIPLE, width=30, height=10, fg='OrangeRed2',bg='white')
            lstbox.grid(column=0, row=3, columnspan=2)
            #vbar = Scrollbar(lstbox, orient=VERTICAL)
            #lstbox.config(yscrollcommand=vbar.set)
            #vbar.config(command=lstbox.yview)

            #lstbox.pack(side=LEFT, fill=BOTH, expand=1)
            #lstbox.grid(column=0, row=3)
            #vbar.grid(column=0, sticky=N+S)
            #scrollbar.config(command=lstbox.yview)
            #scrollbar.pack(side=RIGHT, fill=Y)

            #RECHERCHE
            v = StringVar()
            e = Entry(frame3,textvariable=v)
            e.grid(column=0, row=3)
            #e.grid_bbox(0, 3,0,2)
            e.pack()
            e.focus_set()

            #v.set("a default value")
            lstbox2 = Listbox(frame2, listvariable=valores2, selectmode=MULTIPLE, width=30, height=10, fg='red',bg='white')
            lstbox2.grid(column=0, row=3, columnspan=2)

            #___________________________________________________HEREEEEEE##################################################################**********
            def callback(frame, frame2,scenario,techno_,lstbox):
                text = v.get()
                v.set(text)
                #print(text)
                #frame.destroy()
                #frame2.destroy()

                import tkinter as tk
                #try:
                    #import Tix as tix  # Python27
                #except ImportError:
                    #import tkinter.tix as tix  # Python31+

                # choix1.geometry("+50+150")
                # choix.geometry("500x600+20+50")
                s = ttk.Style()


                # SCENARIO
                s.configure('My.TFrame', background='white', label='SFR')
                frame = ttk.Frame(choix, padding=(70, 70, 160, 160), style='My.TFrame')
                frame.grid(column=4, row=15, sticky=(N, S, E, W))

                # TECNO
                frame2 = ttk.Frame(choix, padding=(70, 70, 160, 160), style='My.TFrame')
                frame2.grid(column=5, row=15, sticky=(N, S, E, W))

                # LES SCENARIOS
                global valores
                valores = StringVar()
                valores1 = tuple(scenario)
                valores.set(valores1)

                # LA TECNO
                global valores2
                valores2 = StringVar()
                valores3 = tuple(techno_)
                valores2.set(valores3)
                #print(lstbox)
                for elementes in scenario:
                    if text in elementes or text.lower() in elementes or text.upper() in elementes:
                        lstbox.insert(0,elementes)

                # SCENARIO
                lstbox = Listbox(frame, listvariable=valores, selectmode=MULTIPLE, width=30, height=10, fg='green',
                                 bg='white')
                lstbox.grid(column=0, row=3, columnspan=2)
                lstbox2 = Listbox(frame2, listvariable=valores2, selectmode=MULTIPLE, width=30, height=10, fg='red',
                                  bg='white')
                lstbox2.grid(column=0, row=3, columnspan=2)
                lstbox.update()





                #print(v)
            #b = Button(choix, text="get", width=10, command=callback)
            #b.pack()

            btn3 = ttk.Button(frame4, text='Rechercher',command=lambda: callback(frame,frame2,scenario,techno_,lstbox))
            btn3.grid(column=2, row=2)
            #lstbox3 = Listbox(frame3, listvariable=valores, selectmode=MULTIPLE, width=30, height=1, fg='grey',bg='white')
            #lstbox3.grid(column=0, row=3)

            #namelbl = ttk.Label(lstbox, text="SCENARIO")
            #name = ttk.Entry(frame)
            #TECNO


            def choix_techno(value1, value2, value3,val5,departement, csvfile):
                btn8 = ttk.Button(frame2, text='ok',command=lambda: select_with_tech(value1, value2, value3, val5,departement, csvfile))
                btn8.grid(column=0, row=4)

            # lstbox = Listbox(frame, listvariable=valores, selectmode=MULTIPLE, width=20, height=10, yscrollcommand=scrollbar2.set)  # LISTBOX
            # scrollbar2.config(command=mapLBox.yview)
            # lstbox.grid(column=2, row=2, sticky='EW')
            # lstbox.grid(column=0, row=0, columnspan=2)

            # print(makeitastring)
            # print(valores.get())

            """
            def select():
                global reslist
                global seleccion
                reslist = list()
                seleccion = lstbox.curselection()  # PRENDRE EN COMPTE LA SELECTION
                for i in seleccion:
                    entrada = lstbox.get(i)
                    reslist.append(entrada)
                #for val in reslist:
                    #print(val)

                def clear():
                    del reslist[:]
                    lstbox.select_clear(0, END)  # DESELECTIONNER CE QUI A ETE SELECTIONNE

                btn2 = ttk.Button(frame, text='Annuler', command=clear)
                btn2.grid(column=1, row=1)

                return reslist
            """

            def detruire():
                frame.destroy()
                frame2.destroy()
                frame3.destroy()
                frame4.destroy()
                root.destroy()
                choix.geometry("300x345+20+50")

            # btn = ttk.Button(frame, text="Valider", command=exec_voix(event))
            # btn.grid(column=0, row=1)
            # frame.bind('<ButtonRelease-1>', exec_voix)

            #def valider(value1, value2, value3, tech, val5, csvfile):


            def clear2():
                del value3[:]
                lstbox2.select_clear(0, END)  # DESELECTIONNER CE QUI A ETE SELECTIONNE
                #btn3 = ttk.Button(frame, text='ok', command=lambda: select(value1, value2, csvfile))
                btn6 = ttk.Button(frame2, text='Cancel', command=lambda: clear2())
                btn6.grid(column=0, row=4)
                #btn3.grid(column=0, row=1)

            def select_with_tech(value1, value2, value3, val5,departement, csvfile):
                value1=value1
                value2=value2
                csvfile=csvfile
                #print("JE SUIS ICI")

                #lobal tech
                global seleccion2
                tech = list()
                seleccion2 = lstbox2.curselection()  # PRENDRE EN COMPTE LA SELECTION
                for i in seleccion2:
                    entrada2 = lstbox2.get(i)
                    tech.append(entrada2)
                    #for val in value3:
                        #print(val)
                    #print(entrada2)
                #print(tech)
                btn6 = ttk.Button(frame2, text='Cancel', command=lambda: clear2())
                btn6.grid(column=1, row=4)
                btn7 = ttk.Button(frame2, text='Valider',command=lambda: lancer(value1, value2, value3, tech, val5,departement, csvfile))
                btn7.grid(column=0, row=4)





            def select(value1,value2,val5,departement,csvfile):
                value1=value1
                value2=value2
                csvfile=csvfile

                global value3
                global seleccion
                value3 = list()
                seleccion = lstbox.curselection()  # PRENDRE EN COMPTE LA SELECTION
                for i in seleccion:
                    entrada = lstbox.get(i)
                    value3.append(entrada)
                    #for val in value3:
                        #print(val)
                    #print(value3)
                #print(value3)
                if 'ALL' in value3:
                    value3=scenario

                btn5 = ttk.Button(frame, text='Valider', command=lambda: choix_techno(value1, value2, value3,val5,departement, csvfile))
                btn5.grid(column=0, row=4)
                #btn3 = ttk.Button(frame, text='ok', command=lambda: select(value1, value2, val5, csvfile))
                #btn3.grid(column=0, row=4)


            def select2(value1,value2,val5,csvfile):
                value1=value1
                value2=value2
                csvfile=csvfile

                #global value3
                #global seleccion
                #value3 = list()
                #seleccion = lstbox.curselection()  # PRENDRE EN COMPTE LA SELECTION
                #btn3 = ttk.Button(frame, text='Valider', command=lambda: lancer2(value1, value2,val5, csvfile))
                #btn3.grid(column=1, row=2)

            def clear():

                del value3[:]
                lstbox.select_clear(0, END)  # DESELECTIONNER CE QUI A ETE SELECTIONNE
                btn3 = ttk.Button(frame, text='ok', command=lambda: select(value1,value2,val5,csvfile))
                btn3.grid(column=0, row=4)

            def clear_custom():
                #del value3[:]
                lstbox.select_clear(0, END)  # DESELECTIONNER CE QUI A ETE SELECTIONNE
                btn3 = ttk.Button(frame, text='ok', command=lambda: select(value1, value2, val5, csvfile))
                btn3.grid(column=0, row=4)

            #print(value3)
            #btn3 = ttk.Button(frame, text='Valider', command=lambda : lancer(value1,value2,value3,csvfile))
            btn3 = ttk.Button(frame, text='ok', command=lambda: select(value1,value2,val5,departement,csvfile))
            btn3.grid(column=0, row=4)
            #btn4 = ttk.Button(frame, text='Default', command=lambda: select2(value1, value2,val5, csvfile))
            #btn4.grid(column=1, row=)
            btn2 = ttk.Button(frame, text='Cancel', command=clear_custom)
            btn2.grid(column=1, row=4)
            ttk.Style().configure('green/black.TLabel', relief="flat", foreground='white', background='red')
            btnn = ttk.Button(frame, text=" --> Menu Principal ", command=detruire, style='green/black.TLabel')
            # btnn.configure(bg="red")
            btnn.grid(column=0, row=6, sticky=(N, S, E, W))

            ttk.Style().configure('yellow/black.TLabel', relief="flat", foreground='black', background='white')
            btnn = ttk.Button(frame, text="CHOIX SCENARIO", style='yellow/black.TLabel')
            # btnn.configure(bg="red")
            btnn.grid(column=0, row=0, sticky=(N, S, E, W))

            btnn = ttk.Button(frame2, text="CHOIX TECHNO", style='yellow/black.TLabel')
            # btnn.configure(bg="red")
            btnn.grid(column=0, row=0, sticky=(N, S, E, W))


            choix.mainloop()

            #FIN DE SELECTION DES SCENARIOS
    #______-*******************************-________________________________________________________________________________________________________________________________

        #------------------------------------------------------------------------------------FIN------------------------------------------------------------------------------------

        #------------------------------------------------------------------------------------FIN------------------------------------------------------------------------------------


    date = []
    etat = []

    date_cumul = 0

    z = 0
    a = []
    b = 0



    reader = csv.reader(lefichier.fichier)



    date_test = re.compile(r".*([0-9][0-9][0-9][0-9]\-[0-9][0-9]\-[0-9][0-9]) .*", re.IGNORECASE)
    scenario_test = re.compile(r".*('Scenario Label \[campaign\_label\]').*"
                           , re.IGNORECASE)

    b = ''

    scenario=[]
    os=dict()

    #RECUPERATION OS


    key = "ALL"
    os.setdefault(key, [])

    #os.setdefault(key, [])

    #os['Belkacem'] = 'KAID'
    #RECUPERATION DATE ET SCENARIO
    scenario.append('ALL')
    for row in reader:
        #f = date_test.search(row[1])
        f = row[1][0:10]
        #print(f)
        a = row[161]
        o=row[240]
        if f in 'date_utc_agent' or 'date_utc_agent' in f:
            variable = (f)
            # print(int(val1[-2:]) - 2)
            continue

        # RECUPERATION DATE
        #if f and b != str(f.group(1)):

        if b != f and f not in date:

            #date.append(f.group(1))
            date.append(f)
            b=f
            #b = str(f.group(1))

        # RECUPERATION SCENARIOS
        k = scenario_test.search(row[221])
        d = row[241]
        if d=='campaign_label':
            continue
        if d not in scenario:
            scenario.append(str(d))

        #RECUPERATION OS
        if o:
            if o not in os:
                os[key].append(o)
                os[o]=o
                #os['Belkacem'].append(o)
    android_ios='Android & ios'
    os[android_ios]=['Android','iOS']
    for k in os.keys():
        try:
            if len(os[k]) < 1:
                del os[k]
        except:
            pass


    date.reverse()
    #print(scenario)
    #print(date)
    #sorted(os, key=operator.itemgetter("ALL"))


    def defocus(event):
        event.widget.master.focus_set()

    import Tix as tix

    #import tkinter.tix as tix
    #try:
        #import Tix as tix  # Python27
    #except ImportError:
        #import tkinter.tix as tix  # Python31+



    #import Tkinter as Tk
    root = Tk()
    root.attributes('-alpha', 0.8)
    # choix1 = Tk()
    # choix1.title("Multiple Choice Listbox")
    # choix1 = tix.Tk()
    root.config(bg='white')

    # use width x height + x_offset + y_offset (no spaces!)
    Label(root, text="SFR", font=("Helvetica", 20, "bold"), fg='red', bg='white').pack()
    Label(root, text="                  SELECTION OS                   ", font=("Helvetica", 10, "bold"), fg='black',bg='white').pack()
    Label(root,text="   DATE DEBUT                                                                                                     DATE FIN           ",font=("Helvetica", 10, "bold"), fg='black', bg='white').pack()

    root.geometry("%dx%d+%d+%d" % (640, 200, 738, 150))
    root.title("Interval")

    #print(os)
    os_remaked=['ALL','Android & ios','Android','iOS','Unknown']
    # COMBO 1_______________________
    combo = ttk.Combobox(root, values=date)
    #combo.config(bg='white')
    #Label(combo, text="start", font=("Helvetica", 10, "bold"), fg='red', bg='black').pack(side='left')
    combo.pack(side='left', padx=10, pady=10)
    #date=date.reverse()
    #for item in date:
        #combo.insert('end', item)

    # COMBO 2________________________
    combo2 = ttk.Combobox(root, values=date)
    #Label(combo2, text="end", font=("Helvetica", 10, "bold"), fg='red', bg='black').pack(side='right')
    combo2.pack(side='right', padx=10, pady=10)
    #date = date.reverse()
    #for item2 in date:
        #combo2.insert('end', item2)
    # left mouse click on a list item to display selection

    # COMBO 3________________________
    #print(os)
    combo3 = ttk.Combobox(root,values=os_remaked)
    #Label(combo3, text="OS", font=("Helvetica", 10, "bold"), fg='red', bg='black').pack(side='top')
    combo3.pack(side='top', padx=10, pady=10)
    # date = date.reverse()
    #for item3 in os:
        #combo3.insert('end', item3)
        # left mouse click on a list item to display selection

    #Label(root, text=" ", font=("Helvetica", 10, "bold"), fg='black',bg='white').pack()
    #region1 = Label(root, text="                    REGION                   ", font=("Helvetica", 10, "bold"),fg='black', bg='white').pack()
    # COMBO 4________________________
    # print(os)
    departement_list = ['TOUT DPTs', 'Ain', 'Aisne', 'Allier', 'Alpes_de_Haute-Provence', 'Hautes-Alpes',
                        'Alpes-Maritimes', 'Ardeche', 'Ardennes', 'Ariege', 'Aube', 'Aude', 'Aveyron',
                        'Bouches_du_Rhone', 'Calvados', 'Cantal', 'Charente', 'Charente_Maritime', 'Cher', 'Correze',
                        'Cote_dOr', 'Cotes_dArmor', 'Creuse', 'Dordogne', 'Doubs', 'Drome', 'Eure', 'Eure-et-Loir',
                        'Finistere', 'Gard', 'Haute-Garonne', 'Gers', 'Gironde', 'Herault', 'Ille-et-Vilaine', 'Indre',
                        'Indre-et-Loire', 'Isere', 'Jura', 'Landes', 'Loir-et-Cher', 'Loire', 'Haute-Loire',
                        'Loire-Atlantique', 'Loiret', 'Lot', 'Lot-et-Garonne', 'Lozere', 'Maine-et-Loire', 'Manche',
                        'Marne', 'Haute-Marne', 'Mayenne', 'Meurthe-et-Moselle', 'Meuse', 'Morbihan', 'Moselle',
                        'Nievre', 'Nord', 'Oise', 'Orne', 'Pas-de-Calais', 'Puy-de-Dome', 'Pyrenees-Atlantiques',
                        'Hautes-Pyrenees', 'Pyrenees-Orientales', 'Bas-Rhin', 'Haut-Rhin', 'Rhone', 'Haute-Saone',
                        'Saone-et-Loire', 'Sarthe', 'Savoie', 'Haute-Savoie', 'Paris', 'Seine-Maritime',
                        'Seine-et-Marne', 'Yvelines', 'Deux-Sevres', 'Somme', 'Tarn', 'Tarn-et-Garonne', 'Var',
                        'Vaucluse', 'Vendee', 'Vienne', 'Haute-Vienne', 'Vosges', 'Yonne', 'Territoire-de-Belfort',
                        'Essonne', 'Hauts-de-Seine', 'Seine-St-Denis', 'Val-de-Marne', 'Val-dOise', 'Corse_du_Sud',
                        'Haute-Corse']

    Label(root, text="                    DEPARTEMENT                   ", font=("Helvetica", 10, "bold"), fg='black',bg='white').pack()

    combo4 = ttk.Combobox(root,values=departement_list)
    #label_region=ttk.Label(root,text='Departement')
    #label_region.pack(side=TOP, fill=X, expand=1)
    #label_region=ttk.Label('Departement')
    #label_region.pack(side='bottom')
    # Label(combo3, text="OS", font=("Helvetica", 10, "bold"), fg='red', bg='black').pack(side='top')
    combo4.pack(side='bottom', padx=10, pady=10)

    index4=1
    #for item4 in departement_list:
        #print(index4)
    #combo4.insert('end',departement_list)
        #index4=index4+1
        # left mouse click on a list item to display selection


    for item in scenario:
        scenario[scenario.index(item)] = '_'.join(item.split(" "))


    combo.bind('<<ComboboxSelected>>', lambda event: exec_voix(scenario,event))
    combo2.bind('<<ComboboxSelected>>', lambda event: exec_voix(scenario,event))
    combo3.bind('<<ComboboxSelected>>', lambda event: exec_voix(scenario,event))
    combo4.bind('<<ComboboxSelected>>', lambda event: exec_voix(scenario, event))
    #choix_scenario(csvfile)



    root.mainloop()



    """
    fenetre = Tk()
    fenetre.geometry("300x345+20+50")
    fenetre.title("FENETRE DE CHOIX")
    fenetre.config(bg='black')
    fenetre.geometry()

    Label(fenetre, text="").pack()
    Label(fenetre, text="").pack()
    Label(fenetre, text="SFR", font=("Helvetica", 20, "bold"), fg='red', bg='black').pack()
    Label(fenetre, text="").pack()
    b5 = Button(fenetre, text="     VOIX   ", width=15, height=1, relief=GROOVE, command=voix, fg='white',
                bg='red').pack()
    b6 = Button(fenetre, text="       QUITTER         ", width=15, height=1, relief=GROOVE, command=quitter_prog,
                fg='white', bg='red').pack()
    Label(choix, text="").pack()
    label = Label(fenetre, text="SFR PERF", fg='white', bg='black').pack()
    Label(fenetre, text="").pack()
    # photo = open(file="logo-3.jpg")
    # Label= Label(fenetre,image="logo-3.jpg").pack() # keep a reference!
    choix.mainloop()
    """

#FONCTION D APPEL AUX TABLEAUX DE BORD VOIX ET DATA
def dashboard():
    choix = Tk()
    choix.attributes('-alpha', 0.8)
    choix.geometry("300x345+20+50")
    choix.title("FENETRE DE CHOIX")
    # choix.config(bg='white')
    choix.geometry()
    Label(choix, text="").pack()
    Label(choix, text="").pack()
    Label(choix, text="").pack()
    Label(choix, text="SFR", font=("Helvetica", 20, "bold"), fg='red', bg='white').pack()
    Label(choix, text="").pack()

    b5 = Button(choix, text="     DASHBOARD VOIX   ", width=15, height=1, relief=GROOVE, command=dashboard_voix, fg='white',
                bg='red').pack()

    b7 = Button(choix, text="     DASHBOARD DATA   ", width=15, height=1, relief=GROOVE, command=dashboard_data, fg='white',
                bg='red').pack()
    b6 = Button(choix, text="       QUITTER         ", width=15, height=1, relief=GROOVE, command=quitter_prog,
                fg='white',
                bg='red').pack()
    Label(choix, text="").pack()
    label = Label(choix, text="SFR PERF", fg='red', bg='white').pack()
    Label(choix, text="").pack()
    # photo = open(file="logo-3.jpg")
    # Label= Label(fenetre,image="logo-3.jpg").pack() # keep a reference!
    choix.mainloop()

#FONCTION D EXTINCTION DU PROGRAMME
def quitter_prog():  # FONCTION POUR QUITTER LE PROGRAMME
    result = tkMessageBox.askquestion("Quitter Le projet PROGRES", "Voulez-vous vraiment quitter le programme?",
                                      icon='warning')
    if result == 'yes':
        sys.exit(0)

# INTERFACE GRAPHIQUE Principale
choix = Tk()
choix.geometry("300x345+20+50")
choix.title("FENETRE DE CHOIX")
choix.geometry()
Label(choix, text="").pack()
Label(choix, text="").pack()
Label(choix, text="").pack()
Label(choix, text="SFR", font=("Helvetica", 20, "bold"), fg='red', bg='white').pack()
Label(choix, text="").pack()
b1 = Button(choix, text="     VOIX    ", width=15, height=1, relief=GROOVE, command=voix, fg='white', bg='red').pack()
b2 = Button(choix, text="     DATA   ", width=15, height=1, relief=GROOVE, command=data, fg='white', bg='red').pack()
b5 = Button(choix, text="     DASHBOARD   ", width=15, height=1, relief=GROOVE, command=dashboard, fg='white',
            bg='red').pack()
b6 = Button(choix, text="       QUITTER         ", width=15, height=1, relief=GROOVE, command=quitter_prog, fg='white',
            bg='red').pack()
Label(choix, text="").pack()
label = Label(choix, text="SFR PERF", fg='red', bg='white').pack()
Label(choix, text="").pack()
choix.mainloop()


#from xml import etree
#import lxml
#import Pmw
#import Tix
#import pandas as pd
# import pandas.io.data as web
#from matplotlib import style
#import py2exe
#from PIL import ImageTk, Image
#from socket import inet_aton, inet_ntoa
#from multiprocessing import Process
#import threading
#import matplotlib.pyplot as plt, mpld3  # POUR l'affichage des graphes
# from matplotlib.dates import YearLocator, MonthLocator, DateFormatter
#from matplotlib.figure import Figure
#from matplotlib.widgets import Button as buttonn
#import sys
#from distutils.core import setup
#from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg, NavigationToolbar2TkAgg
#from os import path
#import operator
#from collections import OrderedDict
#from bokeh.plotting import figure, output_file, show
#from bokeh.models import HoverTool, BoxSelectTool
#from bokeh.charts import Donut, show
#import pandas as pd
#from bokeh.charts import Bar, output_file, show
#from bokeh.models import HoverTool
#from bokeh.models import ColumnDataSource
#from bokeh.models import LinearAxis, Range1d
#from bokeh.io import gridplot, output_file, show
#from multiprocessing import Process
# import plotly.plotly as py
# import plotly.graph_objs as go

#FONCTION DE RECUPERATION DES FICHIERS PYTHON

#b4 = Button(choix, text="     DQAID   ", width=15, height=1, relief=GROOVE, command=ticket_profil, fg='white',bg='red').pack()
#b3 = Button(choix, text="     DATES   ", width=15, height=1, relief=GROOVE, command=date_obtain, fg='white',
            #bg='red').pack()
#from bokeh.plotting import figure, output_file, show
#from datetime import datetime as time
#import datetime as dt
#choix.attributes('-alpha',0.8)
#choix.config(bg='white')
#import py2exe, sys, os
# #from matplotlib.dates import date2num

"""
photo = PhotoImage(file="C:\Users\BK\PycharmProjects\SFR\sfr.png")
canvas = Canvas(choix,width=350, height=200)
canvas.create_image(0, 0, anchor=NW, image=photo)
canvas.pack()
"""

# photo = open(file="logo-3.jpg")
# Label= Label(fenetre,image="logo-3.jpg").pack() # keep a reference!
"""
f = date_test.search(row[1])
            a =  row[161]
            print(z)

            if f and b!=str(f.group(1)):
                print(z)

                b = str(f.group(1))
                #Graphes independants

                if z!=0:
                    date.append(f.group(1))
                    one_.append(one)
                    two_.append(two)
                    three_.append(three)
                    four_.append(four)
                    five_.append(five)
                    six_.append(six)
                    seven_.append(seven)
                    eight_.append(eight)
                    other_one_.append(other_one)
                    other_two_.append(other_two)
                    drop_set.append(drop)
                    one = 0.0
                    two = 0.0
                    three = 0.0
                    four = 0.0
                    five = 0.0
                    six = 0.0
                    seven = 0.0
                    eight = 0.0
                    other_one = 0.0
                    other_two = 0.0
                    drop = 0.0



                if (z==):
                    print('hello belkacem')
                    one_.append(one)
                    two_.append(two)
                    three_.append(three)
                    four_.append(four)
                    five_.append(five)
                    six_.append(six)
                    seven_.append(seven)
                    eight_.append(eight)
                    other_one_.append(other_one)
                    other_two_.append(other_two)
                    drop_set.append(drop)
                    one=0.0
                    two=0.0
                    three=0.0
                    four=0.0
                    five=0.0
                    six=0.0
                    seven=0.0
                    eight=0.0
                    other_one=0.0
                    other_two=0.0
                    drop=0.0

                if (z==0):
                    date.append(f.group(1))
"""
"""
def ouvrir_fich():
    fich = tkFileDialog.askopenfile(parent=choix, initialdir="/Vrac/Progres_proj/", title='CHOISIR UN FICHIER CSV')
    # with open('etude.csv','r+')as csvfile:
    # files = fich.readlines() #lecture fichier dentree
    return fich
"""
"""
def date_obtain():
    date = []
    etat = []
    csvfile = ouvrir_fich()
    date_cumul = 0

    z = 0
    a = []
    b = 0

    reader = csv.reader(csvfile, delimiter=';')

    date_test = re.compile(r".*([0-9][0-9][0-9][0-9]\-[0-9][0-9]\-[0-9][0-9]) .*"
                           , re.IGNORECASE)

    b = ''
    z = False
    l = 0
    g = 0
    k = 0
    for row in reader:
        f = date_test.search(row[1])
        a = row[161]

        if f and b != str(f.group(1)):
            date.append(f.group(1))
            b = str(f.group(1))

    def defocus(event):
        event.widget.master.focus_set()

    try:
        import Tix as tix  # Python27
    except ImportError:
        import tkinter.tix as tix  # Python31+

    def selected(event):
        global value1
        value1 = combo.entry.get()
        #print(value1)


    def selected2(event):
        global value2
        value2 = combo2.entry.get()
        #print(value2)

    root = tix.Tk()
    # use width x height + x_offset + y_offset (no spaces!)
    root.geometry("%dx%d+%d+%d" % (330, 80, 200, 150))
    root.title("Interval")

    #COMBO 1_______________________
    combo = tix.ComboBox(root)
    combo.pack(side='left', padx=10, pady=10)
    for item in date:
        combo.slistbox.listbox.insert('end', item)

    #COMBO 2________________________
    combo2 = tix.ComboBox(root)
    combo2.pack(side='right', padx=10, pady=10)
    for item2 in date:
        combo2.slistbox.listbox.insert('end', item2)
    # left mouse click on a list item to display selection

    combo.slistbox.listbox.bind('<ButtonRelease-1>', selected)

    combo2.slistbox.listbox.bind('<ButtonRelease-1>', selected2)

    root.mainloop()
"""

"""
def ouvrir_fich_2():
    fich = open('1785503233_1472817295_Voice_investigation_export.csv', 'r')
    return fich
"""

"""
def data_old():
    fenetre = Tk()

    def check_tecno_net_stat():
        window = Tk()
        tecno = []
        umts = 0
        na = 0
        lte = 0
        edge = 0
        gprs = 0
        hspa = 0
        hspa_p = 0
        hspda = 0
        # dual_carrier=0
        trois_g = 0
        autre = 0

        csvfile = ouvrir_fich()
        outputfile = open('workfile.csv', 'w')
        a = 0
        b = 0

        reader = csv.reader(csvfile, delimiter=';')

        for row in reader:

            if (row[166]) == 'UMTS':
                tecno.append(row[0] + '       ' + row[166] + '              TECNO: 3G \n')
                umts = umts + 1
                trois_g = trois_g + 1
                continue
            if (row[166]) == 'LTE':
                tecno.append(row[0] + '       ' + row[166] + '               TECNO: 4G \n')
                lte = lte + 1
                continue
            if (row[166]) == 'Dual Carrier':
                tecno.append(row[0] + '       ' + row[166] + '      TECNO: 3G++ \n')
                hspa_p = hspa_p + 1
                trois_g = trois_g + 1
                continue
            if (row[166]) == 'HSPA+':
                tecno.append(row[0] + '       ' + row[166] + '             TECNO: 3G++ \n')
                hspa_p = hspa_p + 1
                trois_g = trois_g + 1
                continue
            if (row[166]) == 'HSPA':
                tecno.append(row[0] + '       ' + row[166] + '              TECNO: 3G+ \n')
                hspa = hspa + 1
                trois_g = trois_g + 1
                continue
            if (row[166]) == 'EDGE':
                tecno.append(row[0] + '       ' + row[166] + '              TECNO: EDGE \n')
                edge = edge + 1
                continue
            if (row[166]) == 'GPRS':
                tecno.append(row[0] + '       ' + row[166] + '              TECNO: GPRS \n')
                gprs = gprs + 1
                continue

            if (((row[166]) == 'N/A') or ((row[166]) == 'UNKNOWN')):
                if (row[167]) == 'UMTS':
                    tecno.append(row[0] + '       ' + row[167] + '              TECNO: 3G \n')
                    umts = umts + 1
                    trois_g = trois_g + 1
                    continue
                if (row[167]) == 'LTE':
                    tecno.append(row[0] + '       ' + row[167] + '               TECNO: 4G \n')
                    lte = lte + 1
                    continue
                if (row[167]) == 'Dual Carrier':
                    tecno.append(row[0] + '       ' + row[167] + '      TECNO: 3G++ \n')
                    hspa_p = hspa_p + 1
                    trois_g = trois_g + 1
                    continue
                if (row[167]) == 'HSPA+':
                    tecno.append(row[0] + '       ' + row[167] + '             TECNO: 3G++ \n')
                    hspa_p = hspa_p + 1
                    trois_g = trois_g + 1
                    continue
                if (row[167]) == 'HSPA':
                    tecno.append(row[0] + '       ' + row[167] + '              TECNO: 3G+ \n')
                    hspa = hspa + 1
                    trois_g = trois_g + 1
                    continue
                if (row[167]) == 'EDGE':
                    tecno.append(row[0] + '       ' + row[167] + '              TECNO: EDGE \n')
                    edge = edge + 1
                    continue
                if (row[167]) == 'GPRS':
                    tecno.append(row[0] + '       ' + row[167] + '              TECNO: GPRS \n')
                    gprs = gprs + 1
                    continue
                if (((row[167]) == 'N/A') or ((row[167]) == 'UNKNOWN')):
                    if (row[167]) == 'N/A':
                        tecno.append(row[0] + '       ' + row[167] + '               TECNO: AUTRE \n')
                        autre = autre + 1
                        continue
                    if (row[167]) == 'UNKNOWN':
                        tecno.append(row[0] + '       ' + row[167] + '           TECNO: AUTRE \n')
                        autre = autre + 1
                        continue

        # Affichage erreurs dans interface
        scrollbar = Scrollbar(window)
        textfield = Text(window, yscrollcommand=scrollbar.set)
        scrollbar.config(command=textfield.yview)
        scrollbar.pack(side='right', fill='y')
        textfield.pack(side='left', expand=5, fill='both')
        window.geometry("1300x700+60+0")
        for i in tecno:
            textfield.insert(2.0, i)
            # b+1
        window.title("RESULTS")

    def check_by_tecno_net_stat():

        date_exe = []
        umts = 0.0
        na = 0.0
        lte = 0.0
        edge = 0.0
        gprs = 0.0
        hspa = 0.0
        hspa_p = 0.0
        hspda = 0
        # dual_carrier=0
        trois_g = 0.0
        autre = 0.0

        csvfile = ouvrir_fich()
        reader = csv.reader(csvfile, delimiter=';')

        date_test = re.compile(r".*([0-9][0-9][0-9][0-9]\-[0-9][0-9]\-[0-9][0-9]) .*"
                               , re.IGNORECASE)

        b = ''

        for row in reader:
            f = date_test.search(row[1])
            a = row[161]

            if f and b != str(f.group(1)):
                # Graphes independants
                date_exe.append(f.group(1))
                b = str(f.group(1))

            if (row[166]) == 'UMTS':
                umts = umts + 1
                trois_g = trois_g + 1
                continue
            if (row[166]) == 'LTE':
                lte = lte + 1
                continue
            if (row[166]) == 'Dual Carrier':
                hspa_p = hspa_p + 1
                trois_g = trois_g + 1
                continue
            if (row[166]) == 'HSPA+':
                hspa_p = hspa_p + 1
                trois_g = trois_g + 1
                continue
            if (row[166]) == 'HSPA':
                hspa = hspa + 1
                trois_g = trois_g + 1
                continue
            if (row[166]) == 'EDGE':
                edge = edge + 1
                continue
            if (row[166]) == 'GPRS':
                gprs = gprs + 1
                continue

            # REGARDER L AUTRE COLONNE
            if (((row[166]) == 'N/A') or ((row[166]) == 'UNKNOWN')):
                if (row[167]) == 'UMTS':
                    umts = umts + 1
                    trois_g = trois_g + 1
                    continue
                if (row[167]) == 'LTE':
                    lte = lte + 1
                    continue
                if (row[167]) == 'Dual Carrier':
                    hspa_p = hspa_p + 1
                    trois_g = trois_g + 1
                    continue
                if (row[167]) == 'HSPA+':
                    hspa_p = hspa_p + 1
                    trois_g = trois_g + 1
                    continue
                if (row[167]) == 'HSPA':
                    hspa = hspa + 1
                    trois_g = trois_g + 1
                    continue
                if (row[167]) == 'EDGE':
                    edge = edge + 1
                    continue
                if (row[167]) == 'GPRS':
                    gprs = gprs + 1
                    continue
                if (((row[167]) == 'N/A') or ((row[167]) == 'UNKNOWN')):
                    if (row[167]) == 'N/A':
                        autre = autre + 1
                        continue
                    if (row[167]) == 'UNKNOWN':
                        autre = autre + 1
                        continue
        date_exe.reverse()
        taux_3g = 0.0
        taux_3gp = 0.0
        taux_3gpp = 0.0
        taux_4g = 0.0
        taux_gprs = 0.0
        taux_edge = 0.0
        taux_autre = 0.0
        valeur_totale = 0.0

        print(umts)
        valeur_totale = umts + hspa + hspa_p + lte + gprs + edge + autre

        taux_3g = (umts * 100.0) / valeur_totale
        taux_3gp = (hspa * 100.0) / valeur_totale
        taux_3gpp = (hspa_p * 100.0) / valeur_totale
        taux_4g = (lte * 100.0) / valeur_totale
        taux_gprs = (gprs * 100.0) / valeur_totale
        taux_edge = (edge * 100.0) / valeur_totale
        taux_autre = (autre * 100.0) / valeur_totale

        colors = ['white', 'purple', 'yellow', 'brown', 'red', 'lightgray', 'moccasin']
        legende = [('3G: ' + str(round(taux_3g, 3)) + '%'), ('3G+: ' + str(round(taux_3gp, 3)) + '%'),
                   ('3G++: ' + str(round(taux_3gpp, 3)) + '%'), ('4G: ' + str(round(taux_4g, 3)) + '%'),
                   ('GPRS: ' + str(round(taux_gprs, 3)) + '%'), ('EDGE: ' + str(round(taux_edge, 3)) + '%'),
                   ('AUTRE: ' + str(round(taux_autre, 3)) + '%')]
        # make a square figure and axes
        plt.figure(1, figsize=(6, 6))
        ax = plt.axes([0.1, 0.1, 0.8, 0.8])

        # The slices will be ordered and plotted counter-clockwise.
        labels_abrev = ['3G', '3G+', '3G++', '4G', 'GPRS', 'EDGE', 'AUTRE']
        fracs = [taux_3g, taux_3gp, taux_3gpp, taux_4g, taux_gprs, taux_edge, taux_autre]
        # explode=(0, 0.05, 0, 0)
        the_grid = GridSpec(1, 1)
        plt.subplot(the_grid[0, 0], aspect=1)
        plt.pie(fracs, shadow=True, labels=labels_abrev, autopct='%1.1f%%', startangle=90, colors=(colors))
        # plt.legend(legende, loc="best",prop={'size':10}) #LEGENDE

        # plt.legend(fracs, loc="best",prop={'size':10})

        plt.title('TECNO DATA Du ' + date_exe[0] + ' Au ' + date_exe[len(date_exe) - 1],
                  bbox={'facecolor': '0.8', 'pad': 5})

        plt.show()

    def net_state():
        choix = Tk()
        choix.geometry("300x345+20+50")
        choix.title("FENETRE DE CHOIX")
        choix.config(bg='black')
        choix.geometry()
        Label(choix, text="").pack()
        Label(choix, text="").pack()
        Label(choix, text="").pack()
        Label(choix, text="SFR", font=("Helvetica", 20, "bold"), fg='red', bg='black').pack()
        Label(choix, text="").pack()

        b1 = Button(choix, text="     CHECK TECNO    ", width=15, height=1, relief=GROOVE, command=check_tecno_net_stat,
                    fg='white', bg='red').pack()
        b1 = Button(choix, text="     CHECK BY TECNO    ", width=15, height=1, relief=GROOVE,
                    command=check_by_tecno_net_stat, fg='white', bg='red').pack()
        b6 = Button(choix, text="       QUITTER         ", width=15, height=1, relief=GROOVE, command=quitter_prog,
                    fg='white', bg='red').pack()
        Label(choix, text="").pack()
        label = Label(fenetre, text="SFR PERF", fg='white', bg='black').pack()
        Label(choix, text="").pack()
        # photo = open(file="logo-3.jpg")
        # Label= Label(fenetre,image="logo-3.jpg").pack() # keep a reference!
        choix.mainloop()

    # INTERFACE GRAPHIQUE
    fenetre.geometry("300x345+20+50")
    fenetre.title("FENETRE DE CHOIX")
    fenetre.config(bg='black')
    fenetre.geometry()
    Label(fenetre, text="").pack()
    Label(fenetre, text="").pack()
    Label(fenetre, text="").pack()
    Label(fenetre, text="SFR", font=("Helvetica", 20, "bold"), fg='red', bg='black').pack()
    Label(fenetre, text="").pack()

    b1 = Button(fenetre, text="     NET_STAT    ", width=15, height=1, relief=GROOVE, command=net_state, fg='white',
                bg='red').pack()
    b2 = Button(fenetre, text="     WEB    ", width=15, height=1, relief=GROOVE, command=net_state, fg='white',
                bg='red').pack()
    b3 = Button(fenetre, text="     FTP    ", width=15, height=1, relief=GROOVE, command=net_state, fg='white',
                bg='red').pack()
    b6 = Button(fenetre, text="       QUITTER         ", width=15, height=1, relief=GROOVE, command=net_state,
                fg='white', bg='red').pack()
    Label(fenetre, text="").pack()
    label = Label(fenetre, text="SFR PERF", fg='white', bg='black').pack()
    Label(fenetre, text="").pack()
    # photo = open(file="logo-3.jpg")
    # Label= Label(fenetre,image="logo-3.jpg").pack() # keep a reference!
    fenetre.mainloop()
"""


